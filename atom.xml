<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moon</title>
  
  
  <link href="http://wangxu1905.github.io/atom.xml" rel="self"/>
  
  <link href="http://wangxu1905.github.io/"/>
  <updated>2022-06-04T08:48:27.856Z</updated>
  <id>http://wangxu1905.github.io/</id>
  
  <author>
    <name>Moon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 [蓝桥杯2022初赛] 选数异或</title>
    <link href="http://wangxu1905.github.io/2022/06/04/2024%20[%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%88%9D%E8%B5%9B]%20%E9%80%89%E6%95%B0%E5%BC%82%E6%88%96/"/>
    <id>http://wangxu1905.github.io/2022/06/04/2024%20[%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%88%9D%E8%B5%9B]%20%E9%80%89%E6%95%B0%E5%BC%82%E6%88%96/</id>
    <published>2022-06-04T08:25:28.171Z</published>
    <updated>2022-06-04T08:48:27.856Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个长度为 n 的数列A1，A2，… , An 和一个非负整数 x。<br>给定 m 次查询, 每次询问能否从某个区间 [l, r] 中选择两个数使得他们的异或等于 x。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行包含三个整数n,m,x。<br>第二行包含n个整数A1,A2,…,An。<br>接下来m行，每行两个整数l,r表示询问区间[l, r]。<br>20%的测试数据：1≤n,m≤100；<br>40%的测试数据：1≤n,m≤1000；<br>100%的测试数据：1≤n,m≤100000，0≤x,Ai&lt;2^20，1≤l≤r≤n；</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问, 如果该区间内存在两个数的异或为 x 则输出yes, 否则输出no。</p><h4 id="输入样例-复制"><a href="#输入样例-复制" class="headerlink" title="输入样例 复制"></a>输入样例 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 4 1</span><br><span class="line">1 2 3 4</span><br><span class="line">1 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-复制"><a href="#输出样例-复制" class="headerlink" title="输出样例 复制"></a>输出样例 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yes</span><br><span class="line">no</span><br><span class="line">yes</span><br><span class="line">no</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    对于每一个数字a[i],可以找到它左边最近的a[j],使得a[i] ^ a[j] = x,则二元组&lt;j,i&gt;是一个合法解，其中j &lt; i</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为什么一定是左边最近合法位置而不是右边最近？</span><br><span class="line">   二者是一样的，因为i找到的是左边最近的合法位置j，j找到的右边最近的是i</span><br></pre></td></tr></table></figure><p>​    对于每个i，都找到左边最近的合法j，记为left[i] = j,满足j &lt; i,a[i] ^ a[j] = x</p><p>​    对于询问[l,r]中是否存在两个数字异或值等于x，等价于**询问[l,r]中是否存在一个i满足：l &lt;= i &lt;= r,l &lt;= left[i]**，存在一个i即可满足条件，相当于最大的left[i]&gt;= l即可。</p><p>​    问题转换成：求区间最大值问题，用线段树或者ST表都可以。</p><p>​    如何快速的到left数组？    从左向右遍历时，利用pos[x]记录数组x上一次出现的位置，那么left[i] = pos[a[i] ^ x]</p><p>注：本题也可使用莫队算法维护区间异或等于x 的次数来求解。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>感觉过得还都挺极限的，可以使用scanf和printf</p><h4 id="1-ST表"><a href="#1-ST表" class="headerlink" title="1.ST表"></a>1.ST表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, x, k;</span><br><span class="line"><span class="comment">//注意pos数组的大小</span></span><br><span class="line"><span class="keyword">int</span> arr[N], pos[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">5</span>], Left[N], dp[N][(<span class="keyword">int</span>)<span class="built_in">log2</span>(N) + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp[l][k],dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        Left[i] = pos[arr[i] ^ x];</span><br><span class="line">        pos[arr[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i][<span class="number">0</span>] = Left[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= (<span class="keyword">int</span>)<span class="built_in">log2</span>(n); ++j)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n;++i)</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>],dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Query</span>(l,r) &gt;= l) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span>    cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-线段树"><a href="#2-线段树" class="headerlink" title="2.线段树"></a>2.线段树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, x, k;</span><br><span class="line"><span class="keyword">int</span> arr[N], pos[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">5</span>], Left[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,pre;</span><br><span class="line">&#125;t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l = l,t[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        t[p].pre = Left[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(p &lt;&lt; <span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">Build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    t[p].pre = <span class="built_in">max</span>(t[p &lt;&lt; <span class="number">1</span>].pre,t[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].pre);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r)  <span class="keyword">return</span> t[p].pre;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = t[p].l + t[p].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)    ans = <span class="built_in">max</span>(ans,<span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span>,x,y));</span><br><span class="line">    <span class="keyword">if</span>(y &gt; mid) ans = <span class="built_in">max</span>(ans,<span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        Left[i] = pos[arr[i] ^ x];</span><br><span class="line">        pos[arr[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ask</span>(<span class="number">1</span>,l,r) &gt;= l) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span>    cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一个长度为 n 的数列A1，A2，… , An 和一个非负整数 x。&lt;</summary>
      
    
    
    
    
    <category term="蓝桥杯" scheme="http://wangxu1905.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    <category term="ST表" scheme="http://wangxu1905.github.io/tags/ST%E8%A1%A8/"/>
    
    <category term="线段树" scheme="http://wangxu1905.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>D. The Enchanted Forest</title>
    <link href="http://wangxu1905.github.io/2022/06/04/D.%20The%20Enchanted%20Forest/"/>
    <id>http://wangxu1905.github.io/2022/06/04/D.%20The%20Enchanted%20Forest/</id>
    <published>2022-06-04T03:02:24.250Z</published>
    <updated>2022-06-04T03:12:46.264Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://codeforces.com/contest/1688/problem/D">Problem - D - Codeforces</a></p><p>题目翻译：</p><p>​    给定n个数字，然后可以从任意点出发，走k步，每次走1步时依次执行</p><ul><li>从x移动到y，|x - y| &lt;= 1,可能x = y</li><li>将y的数字进行收集</li><li>n个数字全部+1</li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    首先我们可以求出，在不进行全部数字+1操作是，走k步所能采集到的最大值</p><p>​    然后分为以下3种情况：</p><ul><li>如果n &gt;= k,那么始终按同一个方向走就可以，则少算的值为1 + 2 + ‘’’ + (k - 1) = k * (k - 1) / 2</li><li>如果n == 1,那么每次就是少算1个，则少算值为k - 1</li><li>如果n &lt; k，那么我们可以把缺少的+1值都加上，然后再依次减掉，因为最后我们都是停在n个点中的某一个点上，所以其余个点我们不能在最后全部采集，所以多算了1 + 2 + 3 + 4 + ‘’’’ n = n * (n + 1) / 2,因为最后一次操作是先采集再+1，所以是先从1开始，一直加到n</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,arr[N],sum[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">ans = <span class="built_in">max</span>(ans,sum[i] - sum[<span class="built_in">max</span>(i - k,<span class="number">0</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &gt;= k)ans += <span class="number">1ll</span> * k * (k - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)ans += k - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans += <span class="number">1ll</span> * k * n;</span><br><span class="line">ans -= <span class="number">1ll</span> * n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1688/problem/D&quot;&gt;Problem - D - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目翻译：&lt;/p&gt;
&lt;p&gt;​    给定</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://wangxu1905.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>C. Manipulating History</title>
    <link href="http://wangxu1905.github.io/2022/06/04/C.%20Manipulating%20History/"/>
    <id>http://wangxu1905.github.io/2022/06/04/C.%20Manipulating%20History/</id>
    <published>2022-06-04T02:55:08.906Z</published>
    <updated>2022-06-04T03:03:28.427Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://codeforces.com/contest/1688/problem/C">Problem - C - Codeforces</a></p><p>题目翻译：</p><p>给定数字n，接下来2n行输入2n个字符串，可以将某一个字符串替换成另一个字符串，但是2n个字符串是乱序的，最后输入替换后的字符串，要求求出最初的字符串（只有一个字符）</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    做的时候没注意，起始字符串只有单个字符，那么把所有字符串计算每个字符的个数，如果某个字符的个数为奇数，则输出</p><p>​    注意：putchar(10);是换行，ASCII码的10代表的换行</p><p>​    假设a -&gt; b,最后替换后为c，那么b字符串肯定包含在c中，那么b的字符串的字符个数最后肯定是偶数</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t,arr[N];</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">n = n &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> &amp;c : s)&#123;</span><br><span class="line">arr[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &amp; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(i + <span class="string">&#x27;a&#x27;</span>),<span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1688/problem/C&quot;&gt;Problem - C - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目翻译：&lt;/p&gt;
&lt;p&gt;给定数字n，接</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://wangxu1905.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>B. Patchouli&#39;s Magical Talisman</title>
    <link href="http://wangxu1905.github.io/2022/06/04/B.%20Patchouli&#39;s%20Magical%20Talisman/"/>
    <id>http://wangxu1905.github.io/2022/06/04/B.%20Patchouli&#39;s%20Magical%20Talisman/</id>
    <published>2022-06-04T02:16:05.423Z</published>
    <updated>2022-06-04T02:27:48.453Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://codeforces.com/contest/1688/problem/A"><a href="https://codeforces.com/contest/1688/problem/B">Problem - B - Codeforces</a></a></p><p>题目翻译：</p><p>给定n个数字，可以执行以下两种操作：</p><ul><li>选择两个数字合并，合并出的值是它们的和</li><li>选择一个偶数，将它的值减半</li></ul><p>我们要求将数组都变成奇数，所要执行最小操作次数</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    首先对于奇数，不用操作</p><p>​    对于偶数：</p><ul><li>如果存在奇数，与奇数合并是最快的操作，需要ans = 偶数的个数</li><li>不存在奇数的话，那么将一个偶数不断减半变成奇数，然后再和其他偶数合并，假设需要减半k次，那么ans = k + 偶数的个数 - 1</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, k,arr[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>,even = <span class="number">0</span>,ans = <span class="number">0</span>,minnum = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            cin &gt;&gt; arr[i];</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &amp; <span class="number">1</span>)  odd++;</span><br><span class="line">            <span class="keyword">else</span>    even++,minnum = <span class="built_in">min</span>(minnum,arr[i] &amp; -arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(odd &gt; <span class="number">0</span>)  ans = even;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>((minnum &gt;&gt; i) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                ans = i + even - <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1688/problem/A&quot;&gt;&lt;a href=&quot;https://codeforces.com/contest/1688/problem/B&quot;&gt;</summary>
      
    
    
    
    
    <category term="贪心" scheme="http://wangxu1905.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="位运算" scheme="http://wangxu1905.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>A. Cirno&#39;s Perfect Bitmasks Classroom</title>
    <link href="http://wangxu1905.github.io/2022/06/04/A.%20Cirno&#39;s%20Perfect%20Bitmasks%20Classroom/"/>
    <id>http://wangxu1905.github.io/2022/06/04/A.%20Cirno&#39;s%20Perfect%20Bitmasks%20Classroom/</id>
    <published>2022-06-04T01:56:56.455Z</published>
    <updated>2022-06-04T02:11:34.202Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://codeforces.com/contest/1688/problem/A">Problem - A - Codeforces</a></p><p>题目翻译：给定一个正整数x，求解使得x &amp; y &gt; 0并且x ^ y &gt; 0的y的最小值</p><p>一共t个测试样例，第一行输入t，随后t行每行给出x</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    显然是道位运算的题目，首先根据树状数组的lowbit运算，我们可以轻松的求出使得x &amp; y &gt; 0的最小值ans</p><p>​    接下来在此基础上，求符合x ^ y &gt; 0的最小值，如果x的二进制只有一个1，那么ans + 1即可，此时1需要单独考虑，如果x == 1,那么直接输出3</p><p>​    如果x的二进制有多个1,此时直接输出ans就好，因为ans二进制只有一个1，其余全是0，那么x ^ y &gt; 0一定成立</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h4 id="1-大佬的"><a href="#1-大佬的" class="headerlink" title="1.大佬的"></a>1.大佬的</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = n &amp; -n;</span><br><span class="line"><span class="keyword">if</span>(ans == n)ans++;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-我的"><a href="#2-我的" class="headerlink" title="2.我的"></a>2.我的</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, k;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, flag1 = <span class="number">1</span>, flag2 = <span class="number">1</span>,a = - <span class="number">1</span>,b = <span class="number">-1</span>,cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">           <span class="comment">//第一个1的位置，以及一共用多少个1</span></span><br><span class="line">            <span class="keyword">if</span>((t &gt;&gt; i) &amp; <span class="number">1</span>)  &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(a == <span class="number">-1</span>) a = i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//第一个0的位置</span></span><br><span class="line">                <span class="keyword">if</span>(b == <span class="number">-1</span>) b = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有多个1,直接考虑第一个1即可</span></span><br><span class="line">        <span class="comment">//否则第一个1的位置补1,第一个0的位置补1</span></span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; <span class="number">1</span>) res = (<span class="number">1</span> &lt;&lt; a);</span><br><span class="line">        <span class="keyword">else</span>    res = (<span class="number">1</span> &lt;&lt; a) + (<span class="number">1</span> &lt;&lt; b);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1688/problem/A&quot;&gt;Problem - A - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目翻译：给定一个正整数x，求解使得x </summary>
      
    
    
    
    
    <category term="位运算" scheme="http://wangxu1905.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>P7771 【模板】欧拉路径</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P7771%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P7771%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</id>
    <published>2022-06-03T14:16:26.213Z</published>
    <updated>2022-06-03T14:24:44.632Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="【模板】欧拉路径"><a href="#【模板】欧拉路径" class="headerlink" title="【模板】欧拉路径"></a>【模板】欧拉路径</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>求有向图字典序最小的欧拉路径。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,m$ 表示有向图的点数和边数。</p><p>接下来 $m$ 行每行两个整数 $u,v$ 表示存在一条 $u\to v$ 的有向边。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果不存在欧拉路径，输出一行 <code>No</code>。</p><p>否则输出一行 $m+1$ 个数字，表示字典序最小的欧拉路径。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 3</span><br><span class="line">2 1</span><br><span class="line">4 2</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 1 3 3 4 2</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2</span><br><span class="line">3 5</span><br><span class="line">4 3</span><br><span class="line">3 4</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 3 5</span><br></pre></td></tr></table></figure><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例 #3"></a>样例 #3</h2><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $50%$ 的数据，$n,m\leq 10^3$。</p><p>对于 $100%$ 的数据，$1\leq u,v\leq n\leq 10^5$，$m\leq 2\times 10^5$。</p><p>保证将有向边视为无向边后图连通。</p><p><a href="https://www.luogu.com.cn/paste/9oswk47n">数据生成器</a></p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><pre><code>#### 1.欧拉路径的定义：    </code></pre><p>​    图中经过所有边恰好一次的路径叫欧拉路径（也就是一笔画）。如果此路径起点和终点相同，则称其为一条欧拉回路。</p><h4 id="2-欧拉路径判断（是否存在）："><a href="#2-欧拉路径判断（是否存在）：" class="headerlink" title="2.欧拉路径判断（是否存在）："></a>2.欧拉路径判断（是否存在）：</h4><ul><li><p><strong>有向图欧拉路径</strong>：图中<strong>恰好</strong>存在一个出度比入度多1（这个点即为<strong>起点</strong>S），1个点入度比出度多1（这个点即为<strong>终点</strong>T），其余结点出度=入度。</p></li><li><p><strong>有向图欧拉回路</strong>：<strong>所有点</strong>的入度=出度（起点S和终点T可以为任意点）</p></li><li><p><strong>无向图欧拉路径</strong>：图中<strong>恰好</strong>存在 2 个点的度数是<strong>奇数</strong>，其余节点的度数为<strong>偶数</strong>，这两个度数为<strong>奇数</strong>的点即为欧拉路径的 <strong>起点</strong> <em>S</em> 和 <strong>终点</strong> <em>T</em>。</p></li><li><p><strong>无向图欧拉回路</strong>：<strong>所有点</strong>的度数都是<strong>偶数</strong>（起点 <em>S</em> 和终点 <em>T</em> 可以为任意点）。</p><p>注：存在欧拉回路（即满足存在欧拉回路的条件），也一定存在欧拉路径。</p><p>当然，一副图有欧拉路径，还<strong>必须满足</strong>将它的有向边视为无向边后它是<strong>连通</strong>的（不考虑度为 00 的孤立点），连通性的判断我们可以使用<code>并查集</code>或 <code>dfs</code> 等。</p></li></ul><h4 id="3-寻找欧拉路径（默认存在）："><a href="#3-寻找欧拉路径（默认存在）：" class="headerlink" title="3. 寻找欧拉路径（默认存在）："></a>3. <strong>寻找欧拉路径（默认存在）</strong>：</h4><ul><li>首先根据题意以及判定先确定起点 S<em>S</em>。</li><li>从起点 S<em>S</em> 开始 <code>dfs</code> 。</li></ul><p><code>dfs</code> 伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">枚举now的出边。</span><br><span class="line">如果该边还未被访问</span><br><span class="line">标记为已访问</span><br><span class="line"><span class="built_in">dfs</span>(该边连向的另一个点)</span><br><span class="line">now入栈</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后倒序输出栈内的所有节点即可。</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t,in[N],out[N],vis[N],del[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; mar[N];</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = del[s]; i &lt; mar[s].<span class="built_in">size</span>(); i = del[s])&#123;</span><br><span class="line">del[s] = i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(mar[s][i]);</span><br><span class="line">&#125;</span><br><span class="line">st.<span class="built_in">push</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">mar[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">out[u]++,in[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">sort</span>(mar[i].<span class="built_in">begin</span>(), mar[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>,S = <span class="number">1</span>,cnt1 = <span class="number">0</span>,cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] - out[i] == <span class="number">1</span>)cnt1++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(out[i] - in[i] == <span class="number">1</span>)cnt2++,S = i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in[i] != out[i])flag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(!flag &amp;&amp; !(cnt1 == cnt2 &amp;&amp; cnt1 == <span class="number">1</span>))&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(S);</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;【模板】欧拉路径&quot;&gt;&lt;a href=&quot;#【模板】欧拉路径&quot; class=&quot;headerlink&quot; title=&quot;【模板】欧拉路径&quot;&gt;&lt;/a&gt;【模板】欧拉路径&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="欧拉路径" scheme="http://wangxu1905.github.io/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>P3386 【模板】二分图最大匹配</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P3386%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P3386%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/</id>
    <published>2022-06-03T14:15:06.514Z</published>
    <updated>2022-06-03T14:15:56.397Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="【模板】二分图最大匹配"><a href="#【模板】二分图最大匹配" class="headerlink" title="【模板】二分图最大匹配"></a>【模板】二分图最大匹配</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二分图，其左部点的个数为 $n$，右部点的个数为 $m$，边数为 $e$，求其最大匹配的边数。</p><p>左部点从 $1$ 至 $n$ 编号，右部点从 $1$ 至 $m$ 编号。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行是三个整数，分别代表 $n$，$m$ 和 $e$。</p><p>接下来 $e$ 行，每行两个整数 $u, v$，表示存在一条连接左部点 $u$ 和右部点 $v$ 的边。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，代表二分图最大匹配的边数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 1 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4 2 7</span><br><span class="line">3 1</span><br><span class="line">1 2</span><br><span class="line">3 2</span><br><span class="line">1 1</span><br><span class="line">4 2</span><br><span class="line">4 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证：</p><ul><li>$1 \leq n, m \leq 500$。</li><li>$1 \leq e \leq 5 \times 10^4$。</li><li>$1 \leq u \leq n$，$1 \leq v \leq m$。</li></ul><p><strong>不保证给出的图没有重边</strong>。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    忘了</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">int</span> mch[N],vistime[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> u,<span class="keyword">const</span> <span class="keyword">int</span> tag)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vistime[u] == tag)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">vistime[u] = tag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : e[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(mch[v] == <span class="number">0</span> || <span class="built_in">dfs</span>(mch[v],tag))&#123;</span><br><span class="line">mch[v] = u;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(i,i))res++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;【模板】二分图最大匹配&quot;&gt;&lt;a href=&quot;#【模板】二分图最大匹配&quot; class=&quot;headerlink&quot; title=&quot;【模板】二分图最大匹配&quot;&gt;&lt;/a&gt;【模板】二分图最大匹配&lt;/h1&gt;&lt;h2 id=&quot;题目描述</summary>
      
    
    
    
    
    <category term="二分图" scheme="http://wangxu1905.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>P8377 [PFOI Round1] 暴龙的火锅</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P8377%20[PFOI%20Round1]%20%E6%9A%B4%E9%BE%99%E7%9A%84%E7%81%AB%E9%94%85/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P8377%20[PFOI%20Round1]%20%E6%9A%B4%E9%BE%99%E7%9A%84%E7%81%AB%E9%94%85/</id>
    <published>2022-06-03T14:04:11.493Z</published>
    <updated>2022-06-03T14:10:19.204Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="PFOI-Round1-暴龙的火锅"><a href="#PFOI-Round1-暴龙的火锅" class="headerlink" title="[PFOI Round1] 暴龙的火锅"></a>[PFOI Round1] 暴龙的火锅</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>暴龙爱吃火锅。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义 $S(x)$ 表示 $x$ 的每一位的数字之和，例如：$S(14)=1+4=5$，$S(114514)=1+1+4+5+1+4=16.$</p><p>另外，定义 $fib(x)$ 代表斐波那契数列的第 $x$ 项，具体地：</p><p>$$fib(1)=fib(2)=1,\ fib(x)=fib(x-1)+fib(x-2)\ (x≥3).$$</p><p>现在给定 $n$，求出下式的值，其中 $\bmod 9$ 表示对 $9$ 取余数：</p><p>$$(S(fib(1))+S(fib(2))+S(fib(3))+…+S(fib(n))) \bmod 9.$$</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $T$。</p><p>接下来 $T$ 组问询，每次一个整数 $n$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>$T$ 行，每行一个整数代表答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">14</span><br><span class="line">114514</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【样例解释】</p><p>对于第一组询问，$n=7$，答案为： </p><p>$$<br>\begin{aligned}<br>&amp; \ \ \ \ \ (S(fib(1))+S(fib(2))\ldots+S(fib(6))+S(fib(7)))\bmod 9 \<br>&amp; =(1+1+2+3+5+8+(1+3))\bmod 9 \<br>&amp; =6.<br>\end{aligned}<br>$$</p><hr><p>【数据范围】</p><p><strong>「本题采用捆绑测试」</strong></p><ul><li>$\texttt{Subtask 1(10 pts)：}T=1,\ n\le 10$；</li><li>$\texttt{Subtask 2(30 pts)：}T=10^2,\ n\le 10^3$；</li><li>$\texttt{Subtask 3(60 pts)：}$无特殊限制。</li></ul><p>对于 $100%$ 的数据，满足 $1\le T\le 10^5,\ 1\le n\le 10^6$。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    做题偶然发现的，结果还能被自己证明出来（我承认，是我学的少）</p><p>​    首先求fib(n)，没什么压力</p><p>​    然后压力来到了求S(n)上，S(n) % 9 = n % 9</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如<span class="number">132</span> = <span class="number">1</span> * <span class="number">100</span> + <span class="number">3</span> * <span class="number">10</span> + <span class="number">2</span> * <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">132</span> % <span class="number">9</span> = <span class="number">1</span> * <span class="number">100</span> % <span class="number">9</span> + <span class="number">3</span> * <span class="number">10</span> % <span class="number">9</span> + <span class="number">2</span> * <span class="number">1</span> % <span class="number">9</span></span><br><span class="line">    = (<span class="number">100</span> - <span class="number">99</span>) + (<span class="number">30</span> - <span class="number">27</span>) + <span class="number">2</span> - <span class="number">0</span></span><br><span class="line">    = <span class="number">6</span></span><br><span class="line"><span class="number">10</span>的幂 % <span class="number">9</span> = <span class="number">1</span>所以，得到的数都是各个位上的数相加即可</span><br></pre></td></tr></table></figure><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, f[N],sum[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">f[<span class="number">1</span>] = f[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">2</span>;</span><br><span class="line">sum[<span class="number">1</span>] = <span class="number">1</span>,sum[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">f[i] = (f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]) % <span class="number">9</span>;</span><br><span class="line">res = (res + f[i]) % <span class="number">9</span>;</span><br><span class="line">sum[i] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; sum[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;PFOI-Round1-暴龙的火锅&quot;&gt;&lt;a href=&quot;#PFOI-Round1-暴龙的火锅&quot; class=&quot;headerlink&quot; title=&quot;[PFOI Round1] 暴龙的火锅&quot;&gt;&lt;/a&gt;[PFOI Ro</summary>
      
    
    
    
    
    <category term="数论" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>P5836 [USACO19DEC]Milk Visits S</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P5836%20[USACO19DEC]Milk%20Visits%20S/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P5836%20[USACO19DEC]Milk%20Visits%20S/</id>
    <published>2022-06-03T13:57:45.679Z</published>
    <updated>2022-06-03T14:03:54.118Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="USACO19DEC-Milk-Visits-S"><a href="#USACO19DEC-Milk-Visits-S" class="headerlink" title="[USACO19DEC]Milk Visits S"></a>[USACO19DEC]Milk Visits S</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Farmer John 计划建造 $N$ 个农场，用 $N-1$ 条道路连接，构成一棵树（也就是说，所有农场之间都互相可以到达，并且没有环）。每个农场有一头奶牛，品种为更赛牛或荷斯坦牛之一。</p><p>Farmer John 的 $M$ 个朋友经常前来拜访他。在朋友 $i$ 拜访之时，Farmer John 会与他的朋友沿着从农场 $A_i$ 到农场 $B_i$ 之间的唯一路径行走（可能有 $A_i = B_i$）。除此之外，他们还可以品尝他们经过的路径上任意一头奶牛的牛奶。由于 Farmer John 的朋友们大多数也是农场主，他们对牛奶有着极强的偏好。他的有些朋友只喝更赛牛的牛奶，其余的只喝荷斯坦牛的牛奶。任何 Farmer John 的朋友只有在他们访问时能喝到他们偏好的牛奶才会高兴。</p><p>请求出每个朋友在拜访过后是否会高兴。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行包含两个整数 $N$ 和 $M$。</p><p>第二行包含一个长为 $N$ 的字符串。如果第 $i$ 个农场中的奶牛是更赛牛，则字符串中第 $i$ 个字符为 <code>G</code>，如果第 $i$ 个农场中的奶牛是荷斯坦牛则为 <code>H</code>。</p><p>以下 $N-1$ 行，每行包含两个不同的整数 $X$ 和 $Y$（$1 \leq X, Y \leq N$），表示农场 $X$ 与 $Y$ 之间有一条道路。</p><p>以下 $M$ 行，每行包含整数 $A_i$，$B_i$，以及一个字符 $C_i$。$A_i$ 和 $B_i$ 表示朋友 $i$ 拜访时行走的路径的端点，$C_i$ 是 <code>G</code> 或 <code>H</code> 之一，表示第 $i$ 个朋友喜欢更赛牛的牛奶或是荷斯坦牛的牛奶。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个长为 $M$ 的二进制字符串。如果第 $i$ 个朋友会感到高兴，则字符串的第 $i$ 个字符为 <code>1</code>，否则为 <code>0</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">HHGHG</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">1 5</span><br><span class="line">1 4 H</span><br><span class="line">1 4 G</span><br><span class="line">1 3 G</span><br><span class="line">1 3 H</span><br><span class="line">5 5 H</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10110</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>在这里，从农场 1 到农场 4 的路径包括农场 1、2 和 4。所有这些农场里都是荷斯坦牛，所以第一个朋友会感到满意，而第二个朋友不会。</p><p>关于部分分：</p><p>测试点 $1$ 样例。</p><p>测试点 $2\sim 5$ 满足 $N\le 10^3$，$M\le 2\cdot 10^3$。</p><p>对于 $100%$ 的数据，$1 \leq N \leq 10^5$，$1 \leq M \leq 10^5$。</p><p>供题：Spencer Compton</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    自我感觉比别人的方法简单（狗头保命）</p><p>​    首先是求LCA，然后因为只需要见到一头更赛牛或者荷斯坦牛就可以判断结果，所以我们可以然H为1,G为0，进行任意两点求出所见奶牛的权值和以及所见奶牛的总数，如果权值和小于总数，说明存在一头G，如果权值和大于0，说明存在一头H</p><p>​    注意：普通的LCA是把边带权，但这次是点带权，所以注意<code>dis[u] + dis[v] - 2 * dis[tmp] + (s[tmp] == &#39;H&#39;)</code>和<code>d[u] + d[v] - 2 * d[tmp] + 1</code>，把LCA点最后再加上</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,len,head[N],d[N],cnt[N],dis[N],f[N][(<span class="keyword">int</span>)<span class="built_in">log2</span>(N) + <span class="number">5</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,fail;</span><br><span class="line"><span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">v = _v,fail = _fail;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">e[++len] = <span class="built_in">edge</span>(v,head[u]);</span><br><span class="line">head[u] = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">d[u] = dep;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i ;i = e[i].fail)&#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!d[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(s[v] == <span class="string">&#x27;H&#x27;</span>)dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>dis[v] = dis[u];</span><br><span class="line"><span class="built_in">dfs</span>(v,dep + <span class="number">1</span>);</span><br><span class="line">f[v][<span class="number">0</span>] = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x] &gt; d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log2</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[f[y][i]] &gt;= d[x])</span><br><span class="line">y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x == y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][i] != f[y][i])</span><br><span class="line">x = f[x][i],y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">s = <span class="string">&quot; &quot;</span> + s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">dis[<span class="number">1</span>] = (s[<span class="number">1</span>] == <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">f[i][j] = f[f[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; c;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">LCA</span>(u,v),num = dis[u] + dis[v] - <span class="number">2</span> * dis[tmp] + (s[tmp] == <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;H&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)res += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>res += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num &lt; d[u] + d[v] - <span class="number">2</span> * d[tmp] + <span class="number">1</span>)res += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span>res += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;USACO19DEC-Milk-Visits-S&quot;&gt;&lt;a href=&quot;#USACO19DEC-Milk-Visits-S&quot; class=&quot;headerlink&quot; title=&quot;[USACO19DEC]Milk Vi</summary>
      
    
    
    
    
    <category term="LCA" scheme="http://wangxu1905.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>P3379 【模板】最近公共祖先（LCA）</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P3379%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P3379%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/</id>
    <published>2022-06-03T13:44:40.663Z</published>
    <updated>2022-06-03T13:57:14.198Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="【模板】最近公共祖先（LCA）"><a href="#【模板】最近公共祖先（LCA）" class="headerlink" title="【模板】最近公共祖先（LCA）"></a>【模板】最近公共祖先（LCA）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，给定一棵有根多叉树，请求出指定两个点直接最近的公共祖先。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个正整数 $N,M,S$，分别表示树的结点个数、询问的个数和树根结点的序号。</p><p>接下来 $N-1$ 行每行包含两个正整数 $x, y$，表示 $x$ 结点和 $y$ 结点之间有一条直接连接的边（数据保证可以构成树）。</p><p>接下来 $M$ 行每行包含两个正整数 $a, b$，表示询问 $a$ 结点和 $b$ 结点的最近公共祖先。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含 $M$ 行，每行包含一个正整数，依次为每一个询问的结果。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5 5 4</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">5 1</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">3 5</span><br><span class="line">1 2</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据，$N\leq 10$，$M\leq 10$。</p><p>对于 $70%$ 的数据，$N\leq 10000$，$M\leq 10000$。</p><p>对于 $100%$ 的数据，$N\leq 500000$，$M\leq 500000$。</p><p>样例说明：</p><p>该树结构如下：</p><p> <img src="https://cdn.luogu.com.cn/upload/pic/2282.png"> </p><p>第一次询问：$2, 4$ 的最近公共祖先，故为 $4$。</p><p>第二次询问：$3, 2$ 的最近公共祖先，故为 $4$。</p><p>第三次询问：$3, 5$ 的最近公共祖先，故为 $1$。</p><p>第四次询问：$1, 2$ 的最近公共祖先，故为 $4$。</p><p>第五次询问：$4, 5$ 的最近公共祖先，故为 $4$。</p><p>故输出依次为 $4, 4, 1, 4, 4$。</p><p>2021/10/4 数据更新 @fstqwq：应要求加了两组数据卡掉了暴力跳。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    首先LCA可以求解树上任意两点的距离。求u和v的距离时，若u和v的最近公共祖先为lca,则u和v之间的距离为dis[u] + dis[v] - 2 * dis[lca]，即u到树根的距离加上v到树根的距离减去2倍的lca到树根的距离</p><p>​    求解LCA的方法有很多，包括暴力搜索、树上倍增法、在线RMQ算法、离线Tarjan算法和树链剖分。</p><p>​    这里介绍一下树上倍增法：</p><p>​    和暴力搜索的同步前进法一样，先让深度大的结点y向上走到与x同一深度，然后x、y一起向上走。和暴力搜索不同的是，向上走是按照倍增思想走的，不是一步一步向上走的，因此速度很快。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,len,head[N],d[N],f[N][(<span class="keyword">int</span>)<span class="built_in">log2</span>(N) + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,fail;</span><br><span class="line"><span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">v = _v,fail = _fail;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">e[++len] = <span class="built_in">edge</span>(v,head[u]);</span><br><span class="line">head[u] = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">d[u] = dep;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i ;i = e[i].fail)&#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(!d[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v,dep + <span class="number">1</span>);</span><br><span class="line">f[v][<span class="number">0</span>] = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保证x的深度小于等于y</span></span><br><span class="line"><span class="keyword">if</span>(d[x] &gt; d[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log2</span>(n);</span><br><span class="line">    <span class="comment">//y向上走到与x同一深度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[f[y][i]] &gt;= d[x])</span><br><span class="line">y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x == y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="comment">//x,y一起向上走</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][i] != f[y][i])</span><br><span class="line">x = f[x][i],y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//返回x的父亲</span></span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">f[s][<span class="number">0</span>] = s;</span><br><span class="line"><span class="built_in">dfs</span>(s,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="comment">//i先走2^(j-1)步到达f[i][j - 1]，再走2^(j-1)步</span></span><br><span class="line">f[i][j] = f[f[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LCA</span>(a,b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="各种方法时间复杂度分析"><a href="#各种方法时间复杂度分析" class="headerlink" title="各种方法时间复杂度分析"></a>各种方法时间复杂度分析</h4><ol><li>暴力搜索法：    1次查询O(n)</li><li>树上倍增法：    预处理O(nlogn),1次查询O(logn)</li><li>在线RMQ算法： 预处理O(nlogn),1次查询O(1)</li><li>离线Tarjan算法：m次查询O(n + m)</li><li>树链剖分：           预处理O(n),1次查询O(logn)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;【模板】最近公共祖先（LCA）&quot;&gt;&lt;a href=&quot;#【模板】最近公共祖先（LCA）&quot; class=&quot;headerlink&quot; title=&quot;【模板】最近公共祖先（LCA）&quot;&gt;&lt;/a&gt;【模板】最近公共祖先（LCA）&lt;</summary>
      
    
    
    
    
    <category term="LCA" scheme="http://wangxu1905.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>P2251 质量检测</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P2251%20%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P2251%20%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B/</id>
    <published>2022-06-03T13:43:19.056Z</published>
    <updated>2022-06-03T13:44:21.214Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="质量检测"><a href="#质量检测" class="headerlink" title="质量检测"></a>质量检测</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>为了检测生产流水线上总共 $N$ 件产品的质量，我们首先给每一件产品打一个分数 $A$ 表示其品质，然后统计前 $M$ 件产品中质量最差的产品的分值 $Q[m] = min{A_1, A_2, … A_m}$，以及第 2 至第 $M + 1$ 件的 $Q[m + 1], Q[m + 2] $… 最后统计第 $N - M + 1$ 至第 $N$ 件的 $Q[n]$。根据 $Q$ 再做进一步评估。</p><p>请你尽快求出 $Q$ 序列。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共两行。</p><p>第一行共两个数 $N$、$M$，由空格隔开。含义如前述。</p><p>第二行共 $N$ 个数，表示 $N$ 件产品的质量。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $N - M + 1$ 行。</p><p>第 1 至 $N - M + 1$ 行每行一个数，第 $i$ 行的数 $Q[i + M - 1]$。含义如前述。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 4</span><br><span class="line">16 5 6 9 5 13 14 20 8 12</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>[数据范围]</p><p>30%的数据，$N \le 1000$</p><p>100%的数据，$N \le 100000$</p><p>100%的数据，$M \le N, A \le 1 000 000$</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    ST表板子题</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,arr[N],dp[N][(<span class="keyword">int</span>)<span class="built_in">log2</span>(N) + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(dp[l][j],dp[r - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;arr[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log2</span>(n) ; ++j)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j - <span class="number">1</span>],dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + m - <span class="number">1</span> &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l = i,r = i + m - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Query</span>(l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用ST表处理其他问题"><a href="#使用ST表处理其他问题" class="headerlink" title="使用ST表处理其他问题"></a>使用ST表处理其他问题</h3><h4 id="1-区间按位与"><a href="#1-区间按位与" class="headerlink" title="1.区间按位与"></a>1.区间按位与</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i][j]=f[i][j<span class="number">-1</span>]&amp;f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];<span class="comment">//倍增的处理</span></span><br><span class="line">ans=f[l][lg]&amp;f[r-(<span class="number">1</span>&lt;&lt;lg)+<span class="number">1</span>][lg];<span class="comment">//区间重叠运算</span></span><br></pre></td></tr></table></figure><h4 id="2-区间GCD"><a href="#2-区间GCD" class="headerlink" title="2.区间GCD"></a>2.区间GCD</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i][j]=<span class="built_in">gcd</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);<span class="comment">//倍增的处理</span></span><br><span class="line">ans=<span class="built_in">gcd</span>(f[l][lg],f[r-(<span class="number">1</span>&lt;&lt;lg)+<span class="number">1</span>][lg]);<span class="comment">//区间重叠运算</span></span><br></pre></td></tr></table></figure><p>值得一提的是，处理区间GCD时，ST表与线段树的时间复杂度基本相近，但前者却显然要好写得多。</p><p>ST表的缺点在于其只能处理可重复贡献问题，以及其不支持区间修改罢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;质量检测&quot;&gt;&lt;a href=&quot;#质量检测&quot; class=&quot;headerlink&quot; title=&quot;质量检测&quot;&gt;&lt;/a&gt;质量检测&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="ST表" scheme="http://wangxu1905.github.io/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>P3865 【模板】ST 表</title>
    <link href="http://wangxu1905.github.io/2022/06/03/P3865%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91ST%20%E8%A1%A8/"/>
    <id>http://wangxu1905.github.io/2022/06/03/P3865%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91ST%20%E8%A1%A8/</id>
    <published>2022-06-03T09:55:01.951Z</published>
    <updated>2022-06-03T13:42:43.782Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="【模板】ST-表"><a href="#【模板】ST-表" class="headerlink" title="【模板】ST 表"></a>【模板】ST 表</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>这是一道 ST 表经典题——静态区间最大值</p><p><strong>请注意最大数据时限只有 0.8s，数据强度不低，请务必保证你的每次查询复杂度为 $O(1)$。若使用更高时间复杂度算法不保证能通过。</strong></p><p>如果您认为您的代码时间复杂度正确但是 TLE，可以尝试使用快速读入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数返回值为读入的第一个整数。</p><p><strong>快速读入作用仅为加快读入，并非强制使用。</strong></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 $N$ 的数列，和 $ M $ 次询问，求出每一次询问的区间内数字的最大值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个整数 $N,M$，分别表示数列的长度和询问的个数。</p><p>第二行包含 $N$ 个整数（记为 $a_i$），依次表示数列的第 $i$ 项。</p><p>接下来 $M$ 行，每行包含两个整数 $l_i,r_i$，表示查询的区间为 $[l_i,r_i]$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含 $M$ 行，每行一个整数，依次表示每一次询问的结果。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8 8</span><br><span class="line">9 3 1 7 5 6 0 8</span><br><span class="line">1 6</span><br><span class="line">1 5</span><br><span class="line">2 7</span><br><span class="line">2 6</span><br><span class="line">1 8</span><br><span class="line">4 8</span><br><span class="line">3 7</span><br><span class="line">1 8</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">9</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据，满足 $1\le N,M\le 10$。</p><p>对于 $70%$ 的数据，满足 $1\le N,M\le {10}^5$。</p><p>对于 $100%$ 的数据，满足 $1\le N\le {10}^5$，$1\le M\le 2\times{10}^6$，$a_i\in[0,{10}^9]$，$1\le l_i\le r_i\le N$。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    ST表是基于倍增算法的，以2的幂的长度进行打表</p><p>1.对于构建</p><p>我们设 <img src="https://www.zhihu.com/equation?tex=f%5Bi%5D%5Bj%5D" alt="[公式]"> 表示区间 <img src="https://www.zhihu.com/equation?tex=%5Bi,i+2%5Ej-1%5D" alt="[公式]"> 内的最值，显然 <img src="https://www.zhihu.com/equation?tex=f%5Bi%5D%5B0%5D=max%5Bi,i%5D=num_i" alt="[公式]"> 。</p><p>由倍增思想可得，跳 <img src="https://www.zhihu.com/equation?tex=2%5Ei" alt="[公式]"> 步相当于先跳 <img src="https://www.zhihu.com/equation?tex=2%5E%7Bi-1%7D" alt="[公式]"> 步再跳 <img src="https://www.zhihu.com/equation?tex=2%5E%7Bi-1%7D" alt="[公式]"> 步；同理区间 <img src="https://www.zhihu.com/equation?tex=%5Bi,i+2%5Ej-1%5D" alt="[公式]"> 内的最值相当于是区间 <img src="https://www.zhihu.com/equation?tex=%5Bi,i+2%5E%7Bj-1%7D-1%5D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=%5Bi+2%5E%7Bj-1%7D,i+2%5Ej-1%5D" alt="[公式]"> 内的最值。</p><p>所以可得式子 <img src="https://www.zhihu.com/equation?tex=f%5Bi%5D%5Bj%5D=max(f%5Bi%5D%5Bj-1%5D,f%5Bi+2%5E%7Bj-1%7D%5D%5Bj-1%5D)" alt="[公式]"> 。</p><p>则只需要枚举起点（也就是枚举 <img src="https://www.zhihu.com/equation?tex=i" alt="[公式]"> ），接着枚举区间长度（也就是枚举 <img src="https://www.zhihu.com/equation?tex=j" alt="[公式]"> )，使得整个区间被包进去，就可以构建出ST表了。</p><p>2.询问</p><p>当询问区间 <img src="https://www.zhihu.com/equation?tex=%5Bl,r%5D" alt="[公式]"> 内的最值时，我们当然希望直接输出 <img src="https://www.zhihu.com/equation?tex=f%5Bl%5D%5Bx%5D,(l+2%5Ex-1=r)" alt="[公式]"> 。</p><p>由上式子可以得到 <img src="https://www.zhihu.com/equation?tex=x=log_2(r-l+1)" alt="[公式]"> 。</p><p>但问题来了，我们要求 <img src="https://www.zhihu.com/equation?tex=j" alt="[公式]"> 得是个整数，但经过对数运算后出的 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 可能是个非整数，若是对其进行取整，向下取整可能使区间变小，向上取整又可能使区间变长，显然怎么都不太合适。</p><p><img src="https://pic4.zhimg.com/80/v2-eb7ae69415dd1fea441a765c461bee33_720w.jpg" alt="img">对区间[1,9]来说，向下取整变成[1,7]，向上取整变成[1,15]</p><p>所以这里有一个办法，那就是把区间 <img src="https://www.zhihu.com/equation?tex=%5Bl,r%5D" alt="[公式]"> 分为两个子区间。</p><p>一部分是向下取整得到的 <img src="https://www.zhihu.com/equation?tex=%5Bl,l+2%5E%7B%5Blog_2(r-l+1)%5D%7D-1%5D" alt="[公式]"> 也就是 <img src="https://www.zhihu.com/equation?tex=f%5Bl%5D%5B%5C+%5Bx%5D%5C+%5D" alt="[公式]"> 。</p><p>为了防止向下取整使得区间可能变小带来的影响，我们再塞一个新区间 <img src="https://www.zhihu.com/equation?tex=%5Br-2%5Ex+1,r%5D" alt="[公式]"> 。</p><p><img src="https://pic3.zhimg.com/80/v2-d48868ec65e6db7ea29715d013131706_720w.jpg" alt="img">由左右两个重叠的相同长度区间完成覆盖</p><p>由于是可重复贡献问题，虽然两区间有所重叠，但不会造成影响。</p><p>ST表预处理的时间复杂度为 <img src="https://www.zhihu.com/equation?tex=O(nlog_2n)" alt="[公式]"> ，查询的时间复杂度则为 <img src="https://www.zhihu.com/equation?tex=O(1)" alt="[公式]"> 。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,arr[N],dp[N][(<span class="keyword">int</span>)<span class="built_in">log2</span>(N) + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp[l][j],dp[r - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;arr[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">    <span class="keyword">int</span> LC = <span class="built_in">log2</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log2</span>(n) ; ++j)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>],dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Query</span>(l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用ST表处理其他问题"><a href="#使用ST表处理其他问题" class="headerlink" title="使用ST表处理其他问题"></a>使用ST表处理其他问题</h3><h4 id="1-区间按位与"><a href="#1-区间按位与" class="headerlink" title="1.区间按位与"></a>1.区间按位与</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i][j]=f[i][j<span class="number">-1</span>]&amp;f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];<span class="comment">//倍增的处理</span></span><br><span class="line">ans=f[l][lg]&amp;f[r-(<span class="number">1</span>&lt;&lt;lg)+<span class="number">1</span>][lg];<span class="comment">//区间重叠运算</span></span><br></pre></td></tr></table></figure><h4 id="2-区间GCD"><a href="#2-区间GCD" class="headerlink" title="2.区间GCD"></a>2.区间GCD</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f[i][j]=<span class="built_in">gcd</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);<span class="comment">//倍增的处理</span></span><br><span class="line">ans=<span class="built_in">gcd</span>(f[l][lg],f[r-(<span class="number">1</span>&lt;&lt;lg)+<span class="number">1</span>][lg]);<span class="comment">//区间重叠运算</span></span><br></pre></td></tr></table></figure><p>值得一提的是，处理区间GCD时，ST表与线段树的时间复杂度基本相近，但前者却显然要好写得多。</p><p>ST表的缺点在于其只能处理可重复贡献问题，以及其不支持区间修改罢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;【模板】ST-表&quot;&gt;&lt;a href=&quot;#【模板】ST-表&quot; class=&quot;headerlink&quot; title=&quot;【模板】ST 表&quot;&gt;&lt;/a&gt;【模板】ST 表&lt;/h1&gt;&lt;h2 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="ST表" scheme="http://wangxu1905.github.io/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>A. Beat The Odds</title>
    <link href="http://wangxu1905.github.io/2022/06/01/A.%20Beat%20The%20Odds/"/>
    <id>http://wangxu1905.github.io/2022/06/01/A.%20Beat%20The%20Odds/</id>
    <published>2022-06-01T02:03:04.854Z</published>
    <updated>2022-06-01T02:14:03.063Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目链接：<a href="https://codeforces.com/contest/1691/problem/A">Problem - A - Codeforces</a></p><p>题目大意：给定m,为m个测试样例，然后给定n,然后是给定n个值，要删除多少个数，保证所有相邻两个数之和是偶数</p><p>数据范围：n &lt;= 10^5,ai &lt;= 10^9</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    奇 + 奇 = 偶，偶 + 偶 = 偶，奇 + 偶 = 奇，所以一定是数组全是奇偶性相同的话，才能出现题目情况，所以只需要找数组里面奇数和偶数数量的最小值就好</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1ll</span>) a++;</span><br><span class="line">            <span class="keyword">else</span>    b++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">min</span>(a,b) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/contest/1691/problem/A&quot;&gt;Problem - A - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意：给定m,为m个测试样</summary>
      
    
    
    
    
    <category term="签到题" scheme="http://wangxu1905.github.io/tags/%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>C. Sum of Substrings</title>
    <link href="http://wangxu1905.github.io/2022/06/01/C.%20Sum%20of%20Substrings/"/>
    <id>http://wangxu1905.github.io/2022/06/01/C.%20Sum%20of%20Substrings/</id>
    <published>2022-06-01T01:38:01.557Z</published>
    <updated>2022-06-01T02:02:36.401Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目链接：<a href="https://codeforces.com/contest/1691/problem/C">Problem - C - Codeforces</a></p><p>题目大意：给定一个二进制字符串，只包含0和1,di = s_i * (s_i + 1),f(s) = di的累加和，给定m，表示有m个测试样例，然后给定n，k,代表字符串的长度，交换相邻的字符的次数，求出f(s)的最小值</p><p>数据范围：t &lt;= 10^5,n &lt;= 10^5,k &lt;= 10^9</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    除了第一个和最后一次，其他数字都是乘11,1 * 11 = 11,0 * 11 = 0，所以对于结果只用数字1是有效的，s[0] * 10,s[n - 1] * 1，只能把1尽可能的移动到s[0]或者s[n - 1],才能使f(s)减小，为了保证f(s)最小，那么先尽可能把1移动到s[n - 1]，然后再尽可能移动到s[0]</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="comment">//记录第一个1的位置和最后一个1的位置</span></span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>,p1_first = n,p1_last = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//记录1的个数</span></span><br><span class="line">            ones++;</span><br><span class="line">            <span class="keyword">if</span>(p1_first == n)   p1_first = i;</span><br><span class="line">            p1_last = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ones &gt; <span class="number">0</span> &amp;&amp; (n - <span class="number">1</span> - p1_last) &lt;= k)&#123;</span><br><span class="line">            ones--;</span><br><span class="line">            k -= n - <span class="number">1</span> - p1_last;</span><br><span class="line">            res += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ones &gt; <span class="number">0</span> &amp;&amp; p1_first &lt;= k)&#123;</span><br><span class="line">            ones--;</span><br><span class="line">            k -= p1_first;</span><br><span class="line">            res += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ones * <span class="number">11</span> + res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/contest/1691/problem/C&quot;&gt;Problem - C - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意：给定一个二进制字符串</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://wangxu1905.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>B. Shoe Shuffling</title>
    <link href="http://wangxu1905.github.io/2022/06/01/B.%20Shoe%20Shuffling/"/>
    <id>http://wangxu1905.github.io/2022/06/01/B.%20Shoe%20Shuffling/</id>
    <published>2022-06-01T01:20:22.381Z</published>
    <updated>2022-06-01T01:28:36.588Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目链接：<a href="https://codeforces.com/contest/1691/problem/B">Problem - B - Codeforces</a></p><p>题目大意：给定m,为m个测试样例，然后给定n,代表为n个人，接下来n个数代表每个人的鞋码（题目给的一定是非递减顺序）</p><p>每个人不能洗自己的鞋子，而且只能洗比自己鞋码大于或者等于的鞋码，如果有解的话，那么输出按顺序输出洗别人的鞋子的序号，否则输出-1.</p><p>数据范围：t &lt;= 1000,n &lt;= 10^5,si &lt;= 10^9</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    第一次做codeforces还挺有意思</p><p>​    原本打算开个1e9 + 5数组，结果数组太大开不出来，就想到用离散化，主要因为数字是多大其实我们并不在意，只要相对大小不变就好。</p><p>​    同时由于每个人不能洗自己的鞋子，所以我们从前向后遍历，但我们找鞋子是从后向前查找。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ve[N];</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; book;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span>,<span class="title">brr</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  cin &gt;&gt; brr[i];</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        ve[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        book[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(brr[i] != brr[i - <span class="number">1</span>]) now++;</span><br><span class="line">            arr[i] = now;</span><br><span class="line">            book[now]++;</span><br><span class="line">            ve[now].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = arr[i]; j &lt;= N; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(book.<span class="built_in">count</span>(j) &amp;&amp; book[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = (<span class="keyword">int</span>)ve[j].<span class="built_in">size</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!vis[ve[j][k]] &amp;&amp; ve[j][k] != i)&#123;</span><br><span class="line">                            vis[ve[j][k]] = <span class="number">1</span>;</span><br><span class="line">                            book[j]--;</span><br><span class="line">                            res.<span class="built_in">push_back</span>(ve[j][k]);</span><br><span class="line">                            f = <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(f)   <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!f)&#123;</span><br><span class="line">                flag = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i)   cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; res[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/contest/1691/problem/B&quot;&gt;Problem - B - Codeforces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意：给定m,为m个测试样</summary>
      
    
    
    
    
    <category term="离散化" scheme="http://wangxu1905.github.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>啵啵小狗自动机(hard version)</title>
    <link href="http://wangxu1905.github.io/2022/05/31/%E5%95%B5%E5%95%B5%E5%B0%8F%E7%8B%97%E8%87%AA%E5%8A%A8%E6%9C%BA(hard%20version)/"/>
    <id>http://wangxu1905.github.io/2022/05/31/%E5%95%B5%E5%95%B5%E5%B0%8F%E7%8B%97%E8%87%AA%E5%8A%A8%E6%9C%BA(hard%20version)/</id>
    <published>2022-05-31T01:31:19.131Z</published>
    <updated>2022-05-31T10:00:23.953Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：<a href="https://ac.nowcoder.com/acm/contest/35624/L">https://ac.nowcoder.com/acm/contest/35624/L</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>与啵啵小狗自动机(easy version)不同的是该题为多组样例，数据范围扩大。</strong></p><p> 啵啵小狗ww曾经是一个非常可爱的皮套人。lsw\textbf{lsw}lsw是它的粉丝，为了她lsw\textbf{lsw}lsw整夜研究算法与数据结构，在5月20日的晚上（只有没对象的人520才打acm\textbf{acm}acm），lsw\textbf{lsw}lsw终于研究出了一个伟大的数据结构，lsw\textbf{lsw}lsw将其称为<strong>啵啵小狗自动机</strong>。</p><p> 现在自动机还差最后一个步骤，他现在需要判断一个数是不是<strong>啵啵数</strong>。lsw\textbf{lsw}lsw如果不能完成这个自动机，将会口吐白沫不省人事，好心的cjw\textbf{cjw}cjw现在请求你解决这个问题。</p><p> 啵啵数指的是一个<strong>可以表示为两个平方数的差</strong>的数，例如：333可以表示为22−122^2-1^222−12。给出若干整数，请你判断它们是不是啵啵数。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个整数T(1≤T≤106)T(1 \leq T \leq 10^6)T(1≤T≤106)，代表有TTT组样例。</span><br><span class="line">接下来TTT行，每行输入一个整数n(1≤n≤105)n(1 \leq n \leq 10^5)n(1≤n≤105)，代表询问nnn能否被表示成平方差的形式。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组样例输出一行，如果是啵啵数，输出YES\textbf&#123;YES&#125;YES，否则输出NO\textbf&#123;NO&#125;NO。</span><br></pre></td></tr></table></figure><p>​                            示例1                        </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入规模较大，C++使用cin/cout可能会超时，推荐使用scanf/printf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">切割声明：idea贡献者：cjw </span><br><span class="line">题面撰写：lsw</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    首先由于平方差，所以A = (a + b)(a - b)</p><p>​    显而易见，(a + b)和(a - b)奇偶性相同，因为两者作差为2b(偶数)，只有两个奇数或者两个偶数才能相差为偶数</p><p>​    探讨奇数：</p><ul><li>首先数字1直接排除</li><li>对于奇质数，显然可以分解成1和它本身，符合</li><li>对于奇合数，可以分解成两个奇因子相乘</li></ul><p>​    谈论偶数：</p><ul><li>对于4k类型的，4k = 2 * 2k一定可以分解成2 * (2的倍数),符合</li><li>对于4k - 2类型的，4k - 2 = 2 * (2*k - 1)，只能分解成偶数和奇数相乘，不符合</li><li>由于题目没限制a，b一定是正整数，所以4k(k = 1)时也可以，此时b=0</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,arr[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1ll</span>)   <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">4ll</span> == <span class="number">0ll</span>)    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/35624/L&quot;&gt;https://ac.nowcoder.com/acm/contest/35624/L&lt;/a&gt;&lt;br&gt;来源：牛</summary>
      
    
    
    
    
    <category term="数论" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>花海</title>
    <link href="http://wangxu1905.github.io/2022/05/31/%E8%8A%B1%E6%B5%B7/"/>
    <id>http://wangxu1905.github.io/2022/05/31/%E8%8A%B1%E6%B5%B7/</id>
    <published>2022-05-31T01:16:18.377Z</published>
    <updated>2022-05-31T01:31:38.790Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：<a href="https://ac.nowcoder.com/acm/contest/35624/I">https://ac.nowcoder.com/acm/contest/35624/I</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>   <em>前有珍神种西瓜，后有小罗种神花。</em>   </p><p>   由于疫情被关在校园内，珍神某天发现了一个好地方——南山花海，便叫上她的好兄弟小罗跟她一起开发新地图，实验室的人都知道，珍神是我们实验室的交际花，所以她很快结识了南山花海的地主。通过地主的召集，珍神跟小罗很快认识了南山花海的成员们：地主、豹纹龙、丐帮帮主、虚哥、莎莎公主、钱boss……  </p><p>   某天，珍神自告奋勇要种西瓜，因为她发现9栋大爷种西瓜了，同时为了她暑假能够吃上瓜（很可惜，这些西瓜在还没发芽的时候就被zzh盯上了），小罗为了追上珍神的脚步，于是向钱boss求助，钱boss告诉他，他这里有一种神奇的花种子，这些花种子十分神奇，它们种下一天后就可以全部开花，知道的人都不禁赞叹：“这也开得太快了吧！  </p><p>   钱boss给了小罗很多颗花种子，小罗胜负心来了，她为了花海的美观，决定把花种子铺满一个nnn边形的图形。不久，花开了，小罗所属实验室的学长，连队，带着他npy来花海散步，连队看到小罗美丽的nnn边形花海，便好奇地问小罗，“你这个花海的面积占地多大呀？”  </p><p>   可以将花海看作一个二维坐标系，给出每个点的坐标。对于连队的问题，小罗想偷懒，<strong>想让你帮她算一算nnn边形的面积。</strong>   </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个整数n，(3≤n≤1000)n ， (3\leq n \leq1000)n，(3≤n≤1000)，表示输入的图形为nnn边形。</span><br><span class="line"></span><br><span class="line">接下来nnn行，每行输入两个整数xi,yi(−104x_i , y_i(-10^4xi,yi(−104≤\leq≤ xi,yix_i,y_ixi,yi≤\leq≤104)10^4)104)，表示第iii个点的坐标。</span><br><span class="line"></span><br><span class="line">数据保证输入的nnn边形一定是凸多边形，坐标按照顺时针或逆时针的顺序给出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">且任意两点不会重合。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出小罗的花海的占地面积，结果保留至小数点后三位。</span><br></pre></td></tr></table></figure><p>​                            示例1                        </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">1 -1</span><br><span class="line">-1 -1</span><br><span class="line">-1 0</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.000</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    第一次写计算几何题</p><p>​    根据高中向量知识，</p><p><img src="https://pic4.zhimg.com/80/v2-022ea1ec591ef62dd6a1a0cd32aaa5ab_1440w.jpg" alt="img"></p><p>由三角形面积公式可知： <img src="https://www.zhihu.com/equation?tex=S_%7B%E2%96%B3OAB%7D=%5Cfrac%7B1%7D%7B2%7D%7C%5Coverrightarrow%7Ba%7D%7C%5Ccdot%7C%5Coverrightarrow%7Bb%7D%7Csin%5Cangle+AOB" alt="[公式]"></p><p>由平行四边形的性质： <img src="https://www.zhihu.com/equation?tex=S_%7B%E2%96%B3OAB%7D=S_%7B%E2%96%B3CAB%7D" alt="[公式]"></p><p>所以 <img src="https://www.zhihu.com/equation?tex=S_%7B%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2OACB%7D=2S_%7B%E2%96%B3OAB%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex==%7C%5Coverrightarrow%7Ba%7D%7C%5Ccdot%7C%5Coverrightarrow%7Bb%7D%7Csin%5Cangle+AOB=%7C%5Coverrightarrow%7Ba%7D%5Ctimes%5Coverrightarrow%7Bb%7D%7C" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Coverrightarrow%7Ba%7D%5Ctimes+%5Coverrightarrow%7Bb%7D=x_1y_2-x_2y_1" alt="[公式]"></p><p>然后保持第一个点不懂，改变第二个点，读入第三个点，根据公式取出面积的累加和</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> x1,x2,x3,y1,y2,y3,res = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; x3 &gt;&gt; y3;</span><br><span class="line">        res += <span class="number">0.5</span>*<span class="built_in">abs</span>(x1*y2-x1*y3-x2*y1+x2*y3+x3*y1-x3*y2);</span><br><span class="line">        x2 = x3,y2 = y3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/35624/I&quot;&gt;https://ac.nowcoder.com/acm/contest/35624/I&lt;/a&gt;&lt;br&gt;来源：牛</summary>
      
    
    
    
    
    <category term="计算几何" scheme="http://wangxu1905.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>南湖的瓜-续</title>
    <link href="http://wangxu1905.github.io/2022/05/30/%E5%8D%97%E6%B9%96%E7%9A%84%E7%93%9C-%E7%BB%AD/"/>
    <id>http://wangxu1905.github.io/2022/05/30/%E5%8D%97%E6%B9%96%E7%9A%84%E7%93%9C-%E7%BB%AD/</id>
    <published>2022-05-30T14:14:35.350Z</published>
    <updated>2022-05-30T14:15:36.889Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：<a href="https://ac.nowcoder.com/acm/contest/35624/M">https://ac.nowcoder.com/acm/contest/35624/M</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>zzh\textbf{zzh}zzh最近由于伙食太好了导致体重不断上升，但导致体重增加的根本原因是他没有使用<br> lose weight的超能力，他的超能力需要不断的进行计算。因为他是一个究极懒狗，所以他没有使用超能力来lose weight</p><p> 有一天zzh\textbf{zzh}zzh知道了cz\textbf{cz}cz在南湖种了许多西瓜，他想尽方法偷了一些，但是他不想因为偷吃西瓜而增加体重，所以现在趁着中南民族大学第四届校赛之日寻求聪明的校友们的帮助，让他可以随心所欲(不用计算)的使用超能力来吃偷来的西瓜。</p><p> 给出nnn个西瓜，每个西瓜都有自己的重量aia_iai​，同时肚子容量也设定为nnn。(超能力内容)<strong>如果<strong><strong>所吃的西瓜的重量正好为他肚子容量的整数倍，zzh就会得到吃西瓜的快乐并且不会增加体</strong></strong>重</strong>。zzh\text{zzh}zzh想要一种可以让他吃到西瓜并且不会增加体重的方案(任意一种方案即可)。你可以设计一个程序帮助他解决这个问题么？</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行，一个整数n(1≤n≤106)n(1 \leq n \leq 10^6)n(1≤n≤106)表示西瓜个数和肚子容量。</span><br><span class="line">第二行，nnn个整数每个数表示第iii个西瓜重量ai(1≤ai≤109)a_i(1 \leq a_i \leq 10^9)ai(1≤ai≤109)。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行，你所设计的体重不会增加的方案里西瓜的数量。</span><br><span class="line">第二行，输出方案中所有西瓜的编号。(任何顺序输出均可)</span><br></pre></td></tr></table></figure><p>​                            示例1                        </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 5 7 3 2 4</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 5</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">样例一表示吃第111、444、555个西瓜时，1+3+2=61+3+2 = 61+3+2=6满足条件，zzh\text&#123;zzh&#125;zzh体重不会增加。</span><br></pre></td></tr></table></figure><p>​                            示例2                        </p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 354 3 36 4 56 145 3</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    太强了，是我脑子锈了，指向求出最大值，直接输出0也是一种解</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/35624/M&quot;&gt;https://ac.nowcoder.com/acm/contest/35624/M&lt;/a&gt;&lt;br&gt;来源：牛</summary>
      
    
    
    
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>南湖的瓜</title>
    <link href="http://wangxu1905.github.io/2022/05/30/%E5%8D%97%E6%B9%96%E7%9A%84%E7%93%9C/"/>
    <id>http://wangxu1905.github.io/2022/05/30/%E5%8D%97%E6%B9%96%E7%9A%84%E7%93%9C/</id>
    <published>2022-05-30T14:12:35.437Z</published>
    <updated>2022-05-30T14:13:35.462Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：<a href="https://ac.nowcoder.com/acm/contest/35624/C">https://ac.nowcoder.com/acm/contest/35624/C</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>   某次偶然的机会，小c在南湖边发现了一块宝地，想实现西瓜自由的小c决定在这里种一片西瓜。西瓜长势喜人，瓜地一片丰收，但是好景不长，恶人zzh不知道从哪得到了这个消息，并决定找个夜黑风高的夜晚去偷小c的瓜，但是瓜不是这么好偷的，聪明的小c在瓜地埋了很多地雷。恶人zzh也很狡猾，他贿赂小c的友人小罗，得到了小c瓜地的地图，并且苦练了一项技能，能从某个位置直接跳到另一个位置。但是由于zzh是懒狗，所以他的技能只能使用一次。  </p><p>   现给出一个n×mn \times mn×m的地图，代表小c的瓜地，‘#’代表地雷，‘*’代表西瓜，‘.’代表空地，恶人zzh不能踩到地雷，不然他就被炸死了，恶人zzh能从任意位置开始偷瓜，他也能从任意位置选择离开，但是除了使用技能的时候，他只能上下左右走动。请聪明的你算一算小c最多能被恶人zzh偷多少个西瓜。  </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行给出两个正整数n,m(0&lt;n,m≤500)n,m(0&lt;n,m\leq500)n,m(0&lt;n,m≤500)，其中nnn是地图的行数，mmm是地图的列数。</span><br><span class="line"></span><br><span class="line">接下来nnn行长度为mmm的字符串，表示由‘#’、‘*’和‘.’组成的地图。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数，表示恶人zzh能偷到的西瓜的最大数量。</span><br></pre></td></tr></table></figure><p>​                            示例1                        </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">*#*.</span><br><span class="line">.*#.</span><br><span class="line">##**</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>​                            示例2                        </p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">#*.*#</span><br><span class="line">**.#*</span><br><span class="line">#*.#*</span><br><span class="line">*.#*#</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    和计算水坑的最大面积差不多</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,mar[N][N],vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,dy[] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dx[i],yy = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[xx][yy] &amp;&amp; mar[xx][yy] != <span class="number">0</span>)&#123;</span><br><span class="line">            res += <span class="built_in">dfs</span>(xx,yy);</span><br><span class="line">            <span class="keyword">if</span>(mar[xx][yy] == <span class="number">1</span>)    res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            cin &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;#&#x27;</span>)    mar[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>)    mar[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>    mar[i][j] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j] &amp;&amp; mar[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                ve.<span class="built_in">push_back</span>(<span class="built_in">dfs</span>(i,j) + (mar[i][j] == <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(ve.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; ve[ve.<span class="built_in">size</span>() - <span class="number">1</span>] + ve[ve.<span class="built_in">size</span>() - <span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; ve[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/35624/C&quot;&gt;https://ac.nowcoder.com/acm/contest/35624/C&lt;/a&gt;&lt;br&gt;来源：牛</summary>
      
    
    
    
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Funny哥卖锅盔</title>
    <link href="http://wangxu1905.github.io/2022/05/30/Funny%E5%93%A5%E5%8D%96%E9%94%85%E7%9B%94/"/>
    <id>http://wangxu1905.github.io/2022/05/30/Funny%E5%93%A5%E5%8D%96%E9%94%85%E7%9B%94/</id>
    <published>2022-05-30T14:10:05.184Z</published>
    <updated>2022-05-30T14:11:47.950Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：<a href="https://ac.nowcoder.com/acm/contest/35624/A">https://ac.nowcoder.com/acm/contest/35624/A</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>​    为了响应国家鼓励青年创业的号召，大学生创业先锋Funny哥在开满美丽石楠花的民大开了一家锅盔店。为了让同学们吃到热乎的锅盔，好朋友创锐给了Funny哥一个神奇的保温盒： 保温盒的容量为m{m}m，而且后<strong>放入的锅盔会叠放在先放入的锅盔之上。</strong>  </p><p>   每天下课后购买锅盔的同学很多，所以Funny哥提前准备好了一些锅盔。但是同学们喜欢的锅盔口味并不相同，所以在售卖锅盔时：  </p><ul><li>​     Funny哥会先看看保温盒是否有锅盔，且最上面的锅盔是不是当前同学想要的，如果是就拿出来出售。        </li><li>​     否则Funny哥会先拿取下一个准备好的锅盔。       </li></ul><p>​       – 如果拿到的锅盔是当前同学喜欢的口味，他会直接卖出这个锅盔；  </p><p>​       – 如果不是，他会将拿到的这个锅盔放入保温盒中。 </p><p>​     如此重复直到所有同学都买到锅盔或者出现问题（Funny哥不希望看到的情况）。 </p><p>​     但是，作为勤俭节约的新时代青年的Funny哥<strong>不希望烤好的锅盔有剩余。</strong> 另外，<strong>由于保温盒的容量是有限的，保温盒离放入的锅盔超过容量也是他不希望看到的。</strong>现在Funny哥告诉你了他将要拿取提前准备好的锅盔的顺序，请你编写程序告诉他今天的锅盔是否能够满足所有人的要求。  </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行包括两个整数n (1≤n≤104,n∈N+)n~(1\leq n\leq 10^4, n\in N_&#123;+&#125; )n (1≤n≤104,n∈N+)和m (1≤m≤n,m∈N+)m~(1\leq m\leq n, m\in N_&#123;+&#125; )m (1≤m≤n,m∈N+)，分别表示提前准备好的锅盔的数量和保温盒的容量；</span><br><span class="line">第二行为一个仅包含小写字母的字符串s1&#123;s1&#125;s1，表示Funny哥拿取提前准备好的锅盔的顺序，长度为n；</span><br><span class="line">第三行为一个仅包含小写字母的字符串s2&#123;s2&#125;s2，表示同学们的需求顺序。1≤∣s2∣≤1041 \leq |s_2| \leq 10^41≤∣s2∣≤104，</span><br><span class="line">∣s2∣&#123;|s2|&#125;∣s2∣表示s2&#123;s2&#125;s2的长度(注意m&#123;m&#125;m不是是是s2&#123;s2&#125;s2字符串长度)。</span><br><span class="line">注意：两个字符串的不同元素代表着不同的锅盔口味。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果今天Funny哥的锅盔可以满足要求，则输出一行：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        第一行输出字符串 &quot;Don&#x27;t you think that&#x27;s Funny?&quot; （不包括引号）；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果今天Funny哥的锅盔不能满足要求，则输出一行：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        第一行输出字符串 &quot;That&#x27;s not Funny at all!&quot; （不包括引号）。</span><br></pre></td></tr></table></figure><p>​                            示例1                        </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 1</span><br><span class="line">asdfg</span><br><span class="line">asdfg</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Don&#x27;t you think that&#x27;s Funny?</span><br></pre></td></tr></table></figure><p>​                            示例2                        </p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">qwerty</span><br><span class="line">rtyqwe</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That&#x27;s not Funny at all!</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>​    单纯模拟，没啥技术含量</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,arr[N],brr[N];</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    stack&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">    <span class="keyword">if</span>(s1.<span class="built_in">size</span>() != s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;That&#x27;s not Funny at all!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)    arr[s1[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)    brr[s2[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26ll</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != brr[i])&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;That&#x27;s not Funny at all!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st.<span class="built_in">empty</span>() &amp;&amp; st.<span class="built_in">top</span>() == s2[i])&#123;</span><br><span class="line">            st.<span class="built_in">pop</span>();<span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(s1[j] != s2[i])&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(s1[j]);</span><br><span class="line">            ++j;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">size</span>() &gt; m)&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;That&#x27;s not Funny at all!&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st.<span class="built_in">size</span>() &gt; <span class="number">0</span>)    cout &lt;&lt; <span class="string">&quot;That&#x27;s not Funny at all!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span>    cout &lt;&lt; <span class="string">&quot;Don&#x27;t you think that&#x27;s Funny?&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/35624/A&quot;&gt;https://ac.nowcoder.com/acm/contest/35624/A&lt;/a&gt;&lt;br&gt;来源：牛</summary>
      
    
    
    
    
    <category term="模拟" scheme="http://wangxu1905.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
</feed>
