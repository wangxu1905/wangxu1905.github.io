<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moon</title>
  
  
  <link href="http://wangxu1905.github.io/atom.xml" rel="self"/>
  
  <link href="http://wangxu1905.github.io/"/>
  <updated>2022-05-31T10:00:23.953Z</updated>
  <id>http://wangxu1905.github.io/</id>
  
  <author>
    <name>Moon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>啵啵小狗自动机(hard version)</title>
    <link href="http://wangxu1905.github.io/2023/04/08/%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B70/"/>
    <id>http://wangxu1905.github.io/2023/04/08/%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B70/</id>
    <published>2023-04-08T03:17:42.285Z</published>
    <updated>2022-05-31T10:00:23.953Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>链接：https://ac.nowcoder.com/acm/contest/35624/L 来源：牛客网</p><h2 id="题目描述">题目描述</h2><p><strong>与啵啵小狗自动机(easy version)不同的是该题为多组样例，数据范围扩大。</strong></p><p>啵啵小狗ww曾经是一个非常可爱的皮套人。lswlsw是它的粉丝，为了她lswlsw整夜研究算法与数据结构，在5月20日的晚上（只有没对象的人520才打acmacm），lswlsw终于研究出了一个伟大的数据结构，lswlsw将其称为<strong>啵啵小狗自动机</strong>。</p><p>现在自动机还差最后一个步骤，他现在需要判断一个数是不是<strong>啵啵数</strong>。lswlsw如果不能完成这个自动机，将会口吐白沫不省人事，好心的cjwcjw现在请求你解决这个问题。</p><p>啵啵数指的是一个<strong>可以表示为两个平方数的差</strong>的数，例如：333可以表示为22−122<sup>2-1</sup>222−12。给出若干整数，请你判断它们是不是啵啵数。</p><h2 id="输入描述">输入描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个整数T(1≤T≤106)T(1 \leq T \leq 10^6)T(1≤T≤106)，代表有TTT组样例。</span><br><span class="line">接下来TTT行，每行输入一个整数n(1≤n≤105)n(1 \leq n \leq 10^5)n(1≤n≤105)，代表询问nnn能否被表示成平方差的形式。</span><br></pre></td></tr></table></figure><h2 id="输出描述">输出描述:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组样例输出一行，如果是啵啵数，输出YES\textbf&#123;YES&#125;YES，否则输出NO\textbf&#123;NO&#125;NO。</span><br></pre></td></tr></table></figure><p>​ 示例1</p><h2 id="输入">输入</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="输出">输出</h2><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><h2 id="备注">备注:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入规模较大，C++使用cin/cout可能会超时，推荐使用scanf/printf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">切割声明：idea贡献者：cjw </span><br><span class="line">题面撰写：lsw</span><br></pre></td></tr></table></figure><h2 id="算法思路">算法思路</h2><p>​ 首先由于平方差，所以A = (a + b)(a - b)</p><p>​ 显而易见，(a + b)和(a - b)奇偶性相同，因为两者作差为2b(偶数)，只有两个奇数或者两个偶数才能相差为偶数</p><p>​ 探讨奇数：</p><ul><li>首先数字1直接排除</li><li>对于奇质数，显然可以分解成1和它本身，符合</li><li>对于奇合数，可以分解成两个奇因子相乘</li></ul><p>​ 谈论偶数：</p><ul><li>对于4k类型的，4k = 2 * 2k一定可以分解成2 * (2的倍数),符合</li><li>对于4k - 2类型的，4k - 2 = 2 * (2*k - 1)，只能分解成偶数和奇数相乘，不符合</li><li>由于题目没限制a，b一定是正整数，所以4k(k = 1)时也可以，此时b=0</li></ul><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,arr[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1ll</span>)   <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">4ll</span> == <span class="number">0ll</span>)    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;链接：https://ac.nowcoder.com/acm/contest/35624/L 来源：牛客网&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;与啵啵小狗自动机(easy ver</summary>
      
    
    
    
    
    <category term="数论" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 291</title>
    <link href="http://wangxu1905.github.io/2023/04/07/AtCoder%20Beginner%20Contest%20290/"/>
    <id>http://wangxu1905.github.io/2023/04/07/AtCoder%20Beginner%20Contest%20290/</id>
    <published>2023-04-07T02:28:13.028Z</published>
    <updated>2023-04-07T03:11:31.218Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="d---marking"><strong>D - Marking</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc290/tasks/abc290_d">D - Marking (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>n个箱子。从 0开始涂色。每涂一个箱子i后，下一个涂的箱子编号是 i+D 。如果该箱子已经被涂色了，则涂编号为i+D+1的箱子，如果还被涂过则再 +1，直到没涂过为止。</p><p>问第 k次涂的箱子编号。</p><h2 id="算法思路">算法思路</h2><p>​ 如果不考虑已经涂色的情况，那么第k次涂色的就是kD % n。</p><p>​ 由数论知识可知，当D和n互质时，当k取遍[0,n-1]时，kD % n也恰好去遍了[0,n-1]，因此此时答案就是kD%n。</p><p>​ 当D和n不互质时，设D,n的gcd为a，则KD %n取到的数是a的倍数</p><p>​ 实际上，设<span class="math inline">\(D^{&#39;}=D/a,n^{&#39;}=n/a\)</span>,此时<span class="math inline">\(D^{&#39;},n^{&#39;}\)</span>互质，则第k次取到的数就是<span class="math inline">\(kD^{&#39;}\)</span>，而在模n的视角里就是<span class="math inline">\(kD^{&#39;}*a\)</span>，因为循环节大小只有<span class="math inline">\(n^{&#39;}\)</span>，因此当<span class="math inline">\(k&gt;n^{&#39;}\)</span>时，由题意的偏移操作，下一个的循环节就是原来的循环节整体加1。</p><p>​ 因此最终的答案就是<span class="math inline">\(kD^{&#39;}*a+k/n^{&#39;}\)</span></p><h2 id="证明">证明</h2><p>​ 由数论知识可知，当D和n互质时，当k取遍[0,n-1]时，kD % n也恰好取遍了[0,n-1]，因此此时答案就是kD%n。</p><p>命题：当a和b互质时，当k取遍[0,b-1]，ka % b也恰好取遍[0,b-1]</p><p>证明：</p><p>当a和b互质时，则有扩展欧几里得可知ax+by=1有解</p><p><span class="math inline">\(k_{1}*a = r1 \% b,k_{2} * a = r2 \% b,(k_{1} \ne k_{2})\)</span></p><ul><li><p>假设<span class="math inline">\(r_{1} \% b = r_{2}\%b\)</span></p></li><li>那么<span class="math inline">\((k_{1}-k_{2}) * a = (r1 - r2) \% b = 0\)</span>,由于<span class="math inline">\((k_{1} \ne k_{2}),a \ne 0\)</span>,所以等式不成立，因为矛盾</li><li><p>所以<span class="math inline">\(r_{1} \% b \ne r_{2}\%b\)</span></p></li></ul><p>所以当k取[0,b-1]会产生b个不同的余数，为[0,b-1]</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">int</span> gcd = __gcd(d,n);</span><br><span class="line">    n /= gcd,d /= gcd;</span><br><span class="line">    cout &lt;&lt; (k * d % n) * gcd + k / n &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;d---marking&quot;&gt;&lt;strong&gt;D - Marking&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/con</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC290" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC290/"/>
    
    
    <category term="数论" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 293</title>
    <link href="http://wangxu1905.github.io/2023/04/01/AtCoder%20Beginner%20Contest%20293/"/>
    <id>http://wangxu1905.github.io/2023/04/01/AtCoder%20Beginner%20Contest%20293/</id>
    <published>2023-04-01T03:17:13.793Z</published>
    <updated>2023-04-01T03:29:20.628Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="e---geometric-progression"><strong>E - Geometric Progression</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc293/tasks/abc293_e">E - Geometric Progression (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>给定A,X和M计算<span class="math inline">\(\sum_{i=0}^{X-1}A^{i} mod M\)</span></p><h2 id="算法思路">算法思路</h2><p>​ 原本以为M不一定是素数，所以采用扩欧，结果才知道M不为素数的话，逆元可能不唯一。</p><p>​ 然后采用分治求解，sum(n,m)为n的前m - 1次方值相加</p><ul><li>m为奇数，那么sum(n,m) = 1 + n *sum(n,m-1)</li><li>m为偶数，sum(n,m) = sum(n,m / 2) + qmi(n,m/2) <em>sum(n,m/2)=sum(n,m/2) </em> (1 + qmi(n,m/2))</li></ul><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m &amp; <span class="number">1</span>)   <span class="keyword">return</span> (<span class="number">1</span> + n * <span class="built_in">sum</span>(n,m - <span class="number">1</span>) % p) % p;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in"><span class="keyword">return</span></span> (<span class="number">1</span> + <span class="built_in">qmi</span>(n,m / <span class="number">2</span>)) * <span class="built_in">sum</span>(n,m / <span class="number">2</span>) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(n,m) % p &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;e---geometric-progression&quot;&gt;&lt;strong&gt;E - Geometric Progression&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a </summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC293" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC293/"/>
    
    
    <category term="数学" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 291</title>
    <link href="http://wangxu1905.github.io/2023/04/01/AtCoder%20Beginner%20Contest%20291/"/>
    <id>http://wangxu1905.github.io/2023/04/01/AtCoder%20Beginner%20Contest%20291/</id>
    <published>2023-04-01T03:03:37.646Z</published>
    <updated>2023-04-01T03:12:05.343Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="e---find-permutation"><strong>E - Find Permutation</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc291/tasks/abc291_e">E - Find Permutation (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>有一个长度为n的全排列，给定m个限制条件对&lt;i,j&gt;，要求<span class="math inline">\(A_{i} &lt; A_{j}\)</span>，问是否存在唯一解</p><h2 id="算法思路">算法思路</h2><p>​ 原本一看就是差分约束的板子，结果跑超时了，竟然还RE了（算了）</p><p>​ 然后正解是拓扑排序，只要队列同时存在两个及以上的元素，说明这两个元素可以同一个值</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">   <span class="keyword">int</span> v,fail;</span><br><span class="line">   <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">   <span class="built_in">edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">       v = _v,fail = _fail;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">   e[++len] = <span class="built_in">edge</span>(v,head[u]);</span><br><span class="line">   head[u] = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tupo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(in[i] == <span class="number">0</span>) qu.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(qu.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u = qu.<span class="built_in">front</span>();</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">        dis[u] = now++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i ; i = e[i].fail)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(--in[v] == <span class="number">0</span>)    qu.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> u,v,w;</span><br><span class="line">   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">   <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">       cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">       <span class="built_in">add</span>(u,v);</span><br><span class="line">       in[v]++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">tupo</span>();</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;e---find-permutation&quot;&gt;&lt;strong&gt;E - Find Permutation&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC291" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC291/"/>
    
    
    <category term="拓扑排序" scheme="http://wangxu1905.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 295</title>
    <link href="http://wangxu1905.github.io/2023/03/26/AtCoder%20Beginner%20Contest%20295/"/>
    <id>http://wangxu1905.github.io/2023/03/26/AtCoder%20Beginner%20Contest%20295/</id>
    <published>2023-03-26T02:46:55.034Z</published>
    <updated>2023-03-26T03:50:34.173Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="d---three-days-ago"><strong>D - Three Days Ago</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc295/tasks/abc295_d">D - Three Days Ago (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>给定一个字符串S(S&lt;=5e5)，然后满足[l,r]区间的每个数字都为偶数（0也为偶数）的序列对有多少个</p><h2 id="算法思路">算法思路</h2><p>​ 由题意可得，我们只关注奇偶性，所以每个字符出现奇偶可以用0,1表示，由于n&lt;=5e5，暴力枚举区间肯定不够。</p><p>​ 我们发现若[l,r]符合题意，那么r和l-1的奇偶状态肯定是相同的，所以我们只需要把0-9的奇偶状态组成类似于0100100100这种二进制并压缩到一个数中，那么只要出现相同的状态，就是符合题意的状态。</p><p>​ 具体代码实现上，我们可以用一个map进行实现，初始状态为空，那么mp[0]=1,然后进行前缀和求各个字符的奇偶性，对于每个位置，计算奇偶状态x，如果出现相同的状态，则res + mp[x],然后更新mp[x]++。</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,k,s,x,y,sum[N][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    n = s.<span class="built_in">size</span>();</span><br><span class="line">    s = <span class="string">&#x27; &#x27;</span> + s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">//复制前一个位置的所有状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) </span><br><span class="line">            sum[i][j] = sum[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="comment">//由于只有0和1状态的相互转化，所以可以这么写</span></span><br><span class="line">        sum[i][pos] = <span class="number">1</span> - sum[i - <span class="number">1</span>][pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将奇偶状态二进制串压到一个数中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j)&#123;</span><br><span class="line">            x += (<span class="number">1</span> &lt;&lt; j) * sum[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        res += mp[x];</span><br><span class="line">        mp[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;d---three-days-ago&quot;&gt;&lt;strong&gt;D - Three Days Ago&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC295" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC295/"/>
    
    
    <category term="前缀和" scheme="http://wangxu1905.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 285</title>
    <link href="http://wangxu1905.github.io/2023/01/20/AtCoder%20Beginner%20Contest%20285/"/>
    <id>http://wangxu1905.github.io/2023/01/20/AtCoder%20Beginner%20Contest%20285/</id>
    <published>2023-01-20T07:41:36.653Z</published>
    <updated>2023-01-20T08:47:12.328Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="d---change-usernames"><strong>D - Change Usernames</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc285/tasks/abc285_d">D - Change Usernames (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>某网站上有 N<span class="math inline">\((1 \leq N \leq 10^{5})\)</span>名用户，他们想把自己现有的名字<span class="math inline">\(S_{i}\)</span> 更换为 <span class="math inline">\(T_{i}\)</span>。题目保证 <span class="math inline">\(S_{i} \neq T_{i},S_{i} \neq S_{j},T_{i} \neq T_{j}\)</span> 。网站每次只能改一个名字，而且需要保证每两个用户之间名字不能相同，问能不能改名成功。</p><h2 id="算法思路">算法思路</h2><p>​ 连接所有的<span class="math inline">\(S_{i} \rightarrow T_{i}\)</span>,发现得到的图上每个点的出入度&lt;=1,因此这张图只可能有若干个环和若干条链，注意到环一定不行，而链一定可行，因此对原图做拓扑排序判环即可。</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,q,k,b,len;</span><br><span class="line"><span class="keyword">int</span> a[N],head[N],in[N];</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">unordered_map&lt;string,<span class="keyword">int</span>&gt; book;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, fail;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="keyword">int</span> _v, <span class="keyword">int</span> _fail) &#123;</span><br><span class="line">        v = _v,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[len] = <span class="built_in">edge</span>(v,head[u]);</span><br><span class="line">    head[u] = len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">tupo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == <span class="number">0</span>)  qu.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = qu.<span class="built_in">front</span>();</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i ; i = e[i].fail)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(--in[v] == <span class="number">0</span>)&#123;</span><br><span class="line">                qu.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num == m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        string s,t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span>(!book.<span class="built_in">count</span>(s)) book[s] = ++m;</span><br><span class="line">        <span class="keyword">if</span>(!book.<span class="built_in">count</span>(t)) book[t] = ++m;</span><br><span class="line">        in[book[t]]++;</span><br><span class="line">        <span class="built_in">add</span>(book[s],book[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">tupo</span>())  cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span>    cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="built_in">freopen</span>(<span class="string">&quot;output.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---work-or-rest"><strong>E - Work or Rest</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc285/tasks/abc285_e">E - Work or Rest (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>在某个星球上，一周有 N<span class="math inline">\((1 \le N \le 5000)\)</span>天，你作为这个星球的国王，需要给一周的每一天都定为休息日或者工作日，至少要有一天被定为休息日。</p><ul><li>当某一天为休息日时，人们的工作效率为 0 ；</li><li>当某一天为工作日时，人们的工作效率为 <span class="math inline">\(A_{min(x,y)}\)</span> ， x 为这一天距离上一个休息日的天数， y 为这一天距离下一个休息日的天数；</li></ul><p>请问人们每周工作效率的最大值为多少。</p><h2 id="算法思路-1">算法思路</h2><p>​ 如果工人连续工作一天，效率为<span class="math inline">\(A_{1}\)</span>；连续工作两天，效率为<span class="math inline">\(A_{1}+A_{2}\)</span>;</p><p>​ 如果工人连续工作三天，效率为<span class="math inline">\(A_{1}+A_{2}+A_{1}\)</span>;连续工作四天，效率为<span class="math inline">\(A_{1}+A_{2}+A_{2}+A_{1}\)</span>;</p><p>考虑dp，用dp[i]表示前i天在第i天休息时的最大价值，状态转移方程如下：</p><p>$dp[i]=_{j=1}^{i} {dp[j]+cost(j,i)} $</p><p>其中cost(l,r)表示在l,r两天休息，中间不休息的情况下<span class="math inline">\(l+1 \sim r-1\)</span>获得的最大价值，通过前缀和优化可以在O(1)的时间内算出。</p><p>注意到第n天可能和下周的第一天结合产生贡献，为了解决这个问题，我们不妨把有休假的日子设为第一天，这样答案就是dp[n+1]了。</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,x,y,s,q,k,a[N],sum[N],dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = r - l - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum[len / <span class="number">2</span>] + sum[(len + <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[j] + <span class="built_in">cost</span>(j,i),dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n + <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="built_in">freopen</span>(<span class="string">&quot;output.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---substring-of-sorted-string"><strong>F - Substring of Sorted String</strong></h1><h2 id="题目链接-2">题目链接</h2><p><a href="https://atcoder.jp/contests/abc285/tasks/abc285_f">F - Substring of Sorted String (atcoder.jp)</a></p><h2 id="题目描述-2">题目描述</h2><p>给定一个长为 N的，只由小写字母组宠的字符串 S，接下来有 Q次操作：</p><ul><li>1 x c ，将 <span class="math inline">\(S_{x}\)</span> 变为小写字母 c；</li><li>2 l r ，如果将 S中的字符按字典序排序，<span class="math inline">\(S_{l} \sim S_{r}\)</span> 是否为排序后的 S 的子串。</li></ul><p><span class="math inline">\(1 \le N,Q \le 10^{5}\)</span></p><h2 id="算法思路-2">算法思路</h2><p>​ 可以用26棵树状数组分别统计每个字母在特定区间中出现的次数</p><p>​ 每次回答询问时先得到区间中的最小字母low和最大字母high，先判断<span class="math inline">\(low+1 \sim high-1\)</span>中的每个字母是不是都全部在[l,r]中，然后简单模拟得到每个字母对应的区间再判断这个区间是否全是该字母即可。</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,s,q,k,a[N],sum[N],dp[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[N];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;  <span class="keyword">return</span> k &amp; -k;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))  tr[i] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= <span class="number">1</span>; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s &gt;&gt; m;</span><br><span class="line">    s = <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) tree[s[i] - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">modify</span>(i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,x,l,r;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">            tree[s[x] - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">modify</span>(x,<span class="number">-1</span>);</span><br><span class="line">            tree[c - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">modify</span>(x,<span class="number">1</span>);</span><br><span class="line">            s[x] = c;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="keyword">int</span> low = <span class="number">26</span>,high = <span class="number">0</span>,flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tree[i].<span class="built_in">query</span>(l,r) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    low = <span class="built_in">min</span>(low,i),high = <span class="built_in">max</span>(high,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> pos = l;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = low; i &lt;= high; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> num = tree[i].<span class="built_in">query</span>(l,r);</span><br><span class="line">                <span class="keyword">if</span>(i &gt; low &amp;&amp; i &lt; high &amp;&amp; num != tree[i].<span class="built_in">query</span>(<span class="number">1</span>,n))&#123;</span><br><span class="line">                    flag = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//保证字符不仅数量正确而且整体有序</span></span><br><span class="line">                <span class="keyword">if</span>(tree[i].<span class="built_in">query</span>(pos,pos + num - <span class="number">1</span>) != num)&#123;</span><br><span class="line">                    flag = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pos += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)    <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);<span class="built_in">freopen</span>(<span class="string">&quot;output.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;d---change-usernames&quot;&gt;&lt;strong&gt;D - Change Usernames&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC285" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC285/"/>
    
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
    <category term="滑动窗口" scheme="http://wangxu1905.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>HBCPC2021-河北省大学生程序设计竞赛重现赛</title>
    <link href="http://wangxu1905.github.io/2022/10/21/HBCPC2021-%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://wangxu1905.github.io/2022/10/21/HBCPC2021-%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2022-10-21T12:01:54.895Z</published>
    <updated>2022-10-21T12:51:00.137Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="理财"><strong>7-1 理财</strong></h1><p>小 P 最近开始了理财。</p><p>他一共花了 <em>n</em> 元买基金，买入时基金的单位净值（即每单位份额的价格）为 <em>x</em>，卖出时单位净值为 <em>y</em>。请你帮助他计算一下他赚了多少钱。</p><h2 id="输入格式">输入格式:</h2><p>一行，三个实数 <em>n</em>,<em>x</em>,<em>y</em> ，保证 <span class="math inline">\(1≤n≤10^5\)</span> ，<span class="math inline">\(0&lt;x,y≤10^3\)</span>. 输入保证 <em>n</em> 小数点后最多两位，<em>x</em>,<em>y</em> 小数点后最多四位。</p><h2 id="输出格式">输出格式:</h2><p>一行一个实数，表示小 P 赚了多少钱，要求和答案的绝对或相对精度误差不超过 <span class="math inline">\(10^{−2}\)</span>，若小 P 亏了钱，则输出负值。</p><h2 id="输入样例">输入样例:</h2><p>样例输入1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1256.80 2.1606 2.4451</span><br></pre></td></tr></table></figure><p>样例输入2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20.00 2.9872 2.8662</span><br></pre></td></tr></table></figure><h2 id="输出样例">输出样例:</h2><p>样例输出1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">165.4909</span><br></pre></td></tr></table></figure><p>样例输出2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-0.8101</span><br></pre></td></tr></table></figure><h2 id="算法思路">算法思路</h2><p>​ 签到</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,x,y,s,q,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> n,x,y;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    cout &lt;&lt; (n / x * y - n) &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="连杀"><strong>7-2 连杀</strong></h1><p>Bob有一个 <em>n</em>×<em>m</em> 的棋盘，但是由于年代久远，这个棋盘左上角 (1,1) 的格子和右下角 (<em>n</em>,<em>m</em>) 的格子已经破损了。</p><p>现在Bob想知道是否存在一条路径，使得从起点走到终点能经过所有 <em>n</em>×<em>m</em>−2 个格子<code>恰好一次</code>。如果一个格子可以走到另一个格子，当且仅当两个格子至少有一条公共边。如果存在，请输出方案（如果有多种合法方案，输出任意一种即可），或者判断不存在。</p><h2 id="输入格式-1">输入格式:</h2><p>输入仅一行，包含两个整数 <em>n</em>,<em>m</em>(2≤<em>n</em>,<em>m</em>≤1000)，表示棋盘的大小。</p><h2 id="输出格式-1">输出格式:</h2><p>输出一个整数，表示需要的最少的子弹数目.</p><h2 id="输入样例-1">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">0 0</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line">4 4</span><br><span class="line">5 5</span><br><span class="line">6 6</span><br><span class="line">7 7</span><br><span class="line">8 8</span><br><span class="line">9 9</span><br></pre></td></tr></table></figure><h2 id="输出样例-1">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="算法思路-1">算法思路</h2><p>​ 看起来很计算几何，不做了。</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">int</span> h[maxn], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PII st, ed; <span class="comment">// 存起点和终点</span></span><br><span class="line">&#125;lines[maxn * maxn];</span><br><span class="line">PII a[maxn];</span><br><span class="line"><span class="keyword">bool</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">1</span> &lt;&lt; maxn];  <span class="comment">// 考虑前i个点，覆盖了j所需要的最少直线</span></span><br><span class="line"><span class="keyword">int</span> num[maxn * maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span>  <span class="comment">// 判断正负</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span>  <span class="comment">// 浮点数比较大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>-(PII a, PII b)  <span class="comment">// 实现减法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)  <span class="comment">// 实现加法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> t)  <span class="comment">// 向量乘系数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x * t, a.y * t&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>*(PII a, PII b)  <span class="comment">// 点积</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x * b.y - a.y * b.x&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)  <span class="comment">// 实现除法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">on_line</span><span class="params">(PII p, PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> !<span class="built_in">sign</span>((p - a) * (p - b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        a[i] = &#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            lines[k ++] = &#123;a[i], a[j]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">on_line</span>(a[j], lines[i].st, lines[i].ed)) &#123;</span><br><span class="line">                v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">                t |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = k;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; j ++) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i - <span class="number">1</span>].<span class="built_in">size</span>(); k ++) &#123;  <span class="comment">// 枚举直线</span></span><br><span class="line">                <span class="keyword">int</span> t = v[i - <span class="number">1</span>][k];</span><br><span class="line">                t = num[t];  <span class="comment">// 经过哪些点</span></span><br><span class="line">                <span class="comment">// if(j == 0) cout &lt;&lt; f[i][j | t] &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; &#x27; &#x27; &lt;&lt; (j | t) &lt;&lt; endl;</span></span><br><span class="line">                f[i][j | t] = <span class="built_in">min</span>(f[i][j | t], f[i][j] + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// if((j | t) == (1 &lt;&lt; n) - 1) res = min(res, f[i][j | t]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = n * n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res = <span class="built_in">min</span>(res, f[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ending"><strong>7-4 Ending</strong></h1><p>Rilly is playing an interesting game during COVID-19 quarantine. The game has <em>n</em> different events, and players start from event 1.</p><p>Except the ending event (numbered <em>n</em>), each event has several follow-up events. While being in a specific event, you can advance to one of its follow-up events with a given probability. If you successfully advance to one of the follow-up events, you can never go backward. Or, if you have unluckily failed to advance, you can try to move to other follow-up events. If you have tried all follow-ups and still failed, your game is over.</p><p>Rilly asked Northy, the game developer, to tell him all events and their follow-ups, along with probability to successfully advance, so that you can help him decide his best chance of getting to the ending event.</p><h2 id="输入格式-2">输入格式:</h2><p>First line contains two integers<span class="math inline">\(n,m(2≤n≤5×10^4,1≤m≤10^5)\)</span>, the number of events and the number of follow up relations.</p><p>Then <em>m</em> lines follow, each of which consists of three numbers <em>x</em>,<em>y</em>,<em>p</em>(1≤<em>x</em>,<em>y</em>≤<em>n</em>,0≤<em>p</em>≤100), denoting that you may advance from event <em>x</em> to event <em>y</em> with probability <em>p</em>%.</p><p>It is guaranteed that you can not return to a passed event through the follow-up relations.</p><h2 id="输出格式-2">输出格式:</h2><p>Print a single decimal number, the maximum probability of reaching the ending event. You answer is considered correct if the absolute or relative error doesn't exceed <span class="math inline">\(10^{−6}\)</span>.</p><h2 id="输入样例-2">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 50</span><br><span class="line">1 3 50</span><br><span class="line">2 4 30</span><br><span class="line">3 4 70</span><br></pre></td></tr></table></figure><h2 id="输出样例-2">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.425000</span><br></pre></td></tr></table></figure><h2 id="算法思路-2">算法思路</h2><p>​ 看起来很概率dp，不做。</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(a, s, t) for(int a = (s); a &lt;= (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(a, t, s) for(int a = (t); a &gt;= (s); a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(a, s, t) for(int a = (s); a &lt; (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIO cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">&quot; is &quot;</span> &lt;&lt; x &lt;&lt; <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(...) 111</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, M = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">double</span> p;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; p;</span><br><span class="line">        p /= <span class="number">100.0</span>;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(&#123;v, p&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[n] = <span class="number">1</span>;</span><br><span class="line">    function&lt;<span class="built_in"><span class="keyword">double</span></span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[u] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[u];</span><br><span class="line">        dp[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> ex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[v, p] : g[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="built_in">sort</span>(g[u].<span class="built_in">begin</span>(), g[u].<span class="built_in">end</span>(), [&amp;](pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; o1, pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; o2)&#123;</span><br><span class="line">            <span class="comment">//return o1.second * dp[o1.first] &gt; o2.second * dp[o2.first];</span></span><br><span class="line">            <span class="keyword">double</span> pi = o1.second, pi1 = o2.second;</span><br><span class="line">            <span class="keyword">int</span> i = o1.first, i1 = o2.first;</span><br><span class="line">            <span class="keyword">return</span> pi * dp[i] + (<span class="number">1</span> - pi) * pi1 * dp[i1] &gt; pi1 * dp[i1] + (<span class="number">1</span> - pi1) * pi * dp[i];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[v, p] : g[u])&#123;</span><br><span class="line">            dp[u] += ex * p * dp[v];</span><br><span class="line">            ex *= <span class="number">1</span> - p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; u &lt;&lt; &#x27; &#x27; &lt;&lt; dp[u] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        <span class="keyword">return</span> dp[u];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin); <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删点"><strong>7-5 删点</strong></h1><p>小河得到了一个包含<em>n</em>个点的无向图。他要选取一个点的集合（可以为空），将其中的点依次删掉。对于选出的这个集合，他还需要选取一个合适的删点顺序，使得删的过程中，任何点在被删掉的时刻依然与至少一个未被删掉的点相连（请参考样例）。</p><p>删着删着，他发现，不是所有的集合都能找到一个满足条件的删点顺序。比如，对于下图：</p><figure><img src="https://images.ptausercontent.com/d60085f4-b645-4753-8a00-4f3fd786713d.jpg" alt="g1.jpg"><figcaption>g1.jpg</figcaption></figure><p>对于集合{4},{1,4},{2,4},{3,4}都不能找出满足条件的方案，因为无论如何，在删除4的时候，它都不与任何点相连——事实上，4在任何时刻都不与其它点相连。</p><p>他希望知道，有多少个不同的集合可以找到一种满足条件的删点顺序。由于方案数可能很大，请输出答案对998244353取模后的结果。</p><p>题目保证不会出现自环。</p><h2 id="输入格式-3">输入格式:</h2><p>第一行两个数字<em>n</em>,<em>m</em>(1≤<em>n</em>,<em>m</em>≤10^6)，表示有<em>n</em>个点和<em>m</em>条边。</p><p>接下来<em>m</em>行，每行两个数字<em>x</em>,<em>y</em>(1≤<em>x</em>,<em>y</em>≤<em>n</em>,<em>x</em>\=<em>y</em>)，表示<em>x</em>和<em>y</em>之间有一条边相连。</p><h2 id="输出格式-3">输出格式:</h2><p>输出存在符合条件删点顺序的集合个数</p><h2 id="输入样例-3">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h2 id="输出样例-3">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure><h2 id="样例解释">样例解释</h2><p>下面是满足条件的31种方案：</p><p>∅,{1},{2},{3},{4},{5},{1,2},{1,3},{1,4},{1,5},{2,3},{2,4},{2,5},{3,4},{3,5},{4,5},{1,2,3},{1,2,4},{1,2,5},{1,3,4},{1,3,5},{1,4,5},{2,3,4},{2,3,5},{2,4,5},{3,4,5},{1,2,3,4}{1,2,3,5}{1,2,4,5}{1,3,4,5}{2,3,4,5}</p><p>以{1,2,5}为例，按照1−2−5的顺序删除即可满足要求，如下图所示：</p><figure><img src="https://images.ptausercontent.com/d62b5946-3068-438f-8c1f-13d70ea9f2b9.jpg" alt="g2.jpg"><figcaption>g2.jpg</figcaption></figure><p>唯一一个找不到满足条件删除顺序的集合是{1,2,3,4,5}，因为不管怎么删，最后一个点在删除的时候一定不与任何点相邻</p><h2 id="算法思路-3">算法思路</h2><p>​ 我们发现只要一个连通分量的点集合，其所有真子集都是符合情况的。所以只需要通过dfs求所有连通分量的点的个数，若某个连通分量有n个点，则方案数为<span class="math inline">\(2^n-1\)</span>,而且各个连通分量的方案数是累乘的。</p><h2 id="ac代码-3">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],vis[N],num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; mar[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mar[u].<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = mar[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            res += <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) num[i] = num[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        mar[u].<span class="built_in">push_back</span>(v),mar[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            res = (res * (num[<span class="built_in">dfs</span>(i)] - <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="划分"><strong>7-7 划分</strong></h1><p>小河认为一个数组是强大的，当且仅当其中所有数字的和不小于 <em>l</em> 且不大于 <em>r</em>。</p><p>他得到了一个长度为 <em>n</em> 的数组，希望从中划分出若干个强大的连续子数组。比如，对于数组 [1,−2,−3,4] 以及 <em>l</em>=<em>r</em>=1，可以划分出 [1],[−3,4] 两个满足条件的强大的连续子数组。</p><p>小河是贪心的。他希望知道，对于给定的数组，最多能够划分出多少个强大的连续子数组。注意，并不一定要用到数组中的每一个数。</p><h2 id="输入格式-4">输入格式:</h2><p>本题包含多组数据。</p><p>第一行一个整数 <span class="math inline">\(T(1≤T≤5×10^3)\)</span> 表示数据组数。</p><p>对于每组数据，第一行三个数字<span class="math inline">\(n,l,r(1≤n≤5×10^3,−10^9≤l≤r≤10^9)\)</span>，表示数组长度和强大的数组所要求的和的最小值及最大值。</p><p>接下来一行包含数组中的<em>n</em>个数字<span class="math inline">\(a_{1},a_2,...,a_n(∣a_i∣≤10^9)\)</span>。</p><p>题目保证$ ∑n≤5×10^3$。</p><h2 id="输出格式-4">输出格式:</h2><p>对于每组数据，输出一行一个整数，即最多能分割出的强大子数组的个数</p><h2 id="输入样例-4">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 2 10</span><br><span class="line">-1 2 -3 4 -5 6 -7 8 -9 10</span><br></pre></td></tr></table></figure><h2 id="输出样例-4">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="算法思路-4">算法思路</h2><p>​ dp[i]表示以i为结尾的最多分割出的个数，然后从i到1遍历，假设下标j满足情况，<span class="math inline">\(dp[i] = max(dp[j - 1] + 1,dp[i])\)</span></p><h2 id="ac代码-4">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],dp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,res = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span>; --j)&#123;</span><br><span class="line">            now += a[j];</span><br><span class="line">            <span class="keyword">if</span>(now &gt;= l &amp;&amp; now &lt;= r)</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[j - <span class="number">1</span>] + <span class="number">1</span>,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)  <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="not-and"><strong>7-8 Not-And</strong></h1><p>NAND(Not-And) is a bitwise operation defined as follows: <em>a</em> NAND <em>b</em>:=NOT (<em>a</em> AND <em>b</em>) .</p><p>Rilly is given an array <em>a</em> which consists of <em>n</em> 32-bit unsigned integers. He asks you to perform two types of operations for him, which are described below in detail.</p><h2 id="输入格式-5">输入格式:</h2><p>The first line contains two integers <span class="math inline">\(n,q(1≤n,q≤10^5)\)</span>, length of the array and number of requests.</p><p>The second line contains <em>n</em> integers <span class="math inline">\(a_i(0≤a_i&lt;2^{32})\)</span> .</p><p>Then <em>q</em> lines follow, each of which contains a request of one of the two types:</p><ol type="1"><li><code>1 l r x</code> <span class="math inline">\((1≤l≤r≤n,0≤x&lt;2^{32})\)</span>, denoting that you need to calculate and output the answer of x NAND <span class="math inline">\(a_l\)</span> NAND <span class="math inline">\(a_{l+1}\)</span> NAND ⋯ NAND <span class="math inline">\(a_r\)</span>.</li><li><code>2 p x</code> <span class="math inline">\((1≤p≤n,0≤x&lt;2^{32})\)</span>, denoting that you need to replace the number at position <em>p</em> with the given <em>x</em>.</li></ol><h2 id="输出格式-5">输出格式:</h2><p>For every request of the first type, output a line containing the answer.</p><h2 id="输入样例-5">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">571 342 228 152 192</span><br><span class="line">1 1 5 409</span><br><span class="line">2 1 414</span><br><span class="line">1 1 2 100</span><br><span class="line">2 4 341</span><br><span class="line">1 2 5 315</span><br></pre></td></tr></table></figure><h2 id="输出样例-5">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4294967103</span><br><span class="line">4294966957</span><br><span class="line">4294967103</span><br></pre></td></tr></table></figure><h2 id="算法思路-5">算法思路</h2><p>​ 首先维护区间NAND的值的话，不太行，NAND并不符合结合律，所以要采取其他办法。</p><p>​ 我们发现可以维护二进制每位的结果，<span class="math inline">\(v[i][0]\)</span>表示第i个二进制位上0与区间[l,r]结果NAND的值，<span class="math inline">\(v[i][1]\)</span>表示第i个二进制位上1与区间[l,r]结果NAND的值，那么我们可以得到<span class="math inline">\(u.v[i][0] = r.v[i][l.v[i][0]],u.v[i][1] = r.v[i][l.v[i][1]]\)</span></p><h2 id="ac代码-5">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> v[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u,Node &amp;l,Node &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">            u.v[i][j] = r.v[i][l.v[i][j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u],tr[u &lt;&lt; <span class="number">1</span>],tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u] = &#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                tr[u].v[i][j] = !(j &amp; (a[l] &gt;&gt; i &amp; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                tr[u].v[i][j] = !(j &amp; (c &gt;&gt; i &amp; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,x,c);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,c);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= x &amp;&amp; tr[u].r &lt;= y)    <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//分成三种</span></span><br><span class="line">    <span class="keyword">if</span>(y &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,x,y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; mid)    <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y);</span><br><span class="line">        Node res;</span><br><span class="line">        <span class="built_in">pushup</span>(res,l,r);</span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> op,l,r,x,p;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            <span class="keyword">auto</span> t = <span class="built_in">query</span>(<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//根据x的每位，确定是0还是1NAND区间[1,n]的值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">                res += t.v[i][x &gt;&gt; i &amp; <span class="number">1</span>] &lt;&lt; i;</span><br><span class="line">            cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; p &gt;&gt; x;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,p,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tang-hulu"><strong>7-9 Tang Hulu</strong></h1><p>Rilly wants to give Northy some <em>Tang Hulu</em> as his birthday gift, and he bought <em>n</em> <strong>different</strong> <em>Shan Zha Guo</em>s and <em>m</em> <strong>different</strong> sticks to make some.</p><figure><img src="https://images.ptausercontent.com/04905b6e-c635-4edf-bf0f-efdaa27fb37b.png" alt="pick-c.png"><figcaption>pick-c.png</figcaption></figure><p>First, Rilly numbered the <em>Shan Zha Guo</em>s from 1 to <em>n</em>. He has a strange taste for <em>Tang Hulu</em>: for two <em>Shan Zha Guo</em>s numbered <em>i</em>,<em>j</em> that are adjacent on a <em>Tang Hulu</em>, each <em>Shan Zha Guo</em> with its index between <em>i</em> and <em>j</em> must be on the same <em>Tang Hulu</em> as them and be placed above them.</p><p>For example, <a href="enumerated%20from%20top%20to%20bottom">2,3,1,4</a> is a valid enumeration of <em>Shan Zha Guo</em>s for a <em>Tang Hulu</em>, because what's between 3,1 is {2}, and 2 is above 3 and 1, and numbers between 1,4 are {2,3}, and obviously they are above 1 and 4.</p><p>[1,4] is not valid, since {2,3} is not on it.</p><p>[1,4,2,3] is also not, since 3 is between 4,2, and it is placed below them.</p><p>Assume that all <em>n</em> <em>Shan Zha Guo</em>s and <em>m</em> sticks must be used, and each <em>Tang Hulu</em> mustn't be empty. Find out how many valid ways there are to make the <em>Tang Hulu</em>s. Two ways differ iff there is some stick which is equipped with different enumeration of <em>Shan Zha Guo</em>s.</p><p>As the number might be large, you only need to print the answer modulo 998244353.</p><h2 id="输入格式-6">输入格式:</h2><p>The first line contains an integer <em>T</em>(1≤<em>T</em>≤106), the number of test cases.</p><p>Then <em>T</em> lines follow, each line contains two integers <em>n</em>,<em>m</em>(1≤<em>n</em>≤109,1≤<em>m</em>≤106), respectively denoting the number of <em>Shan Zha Guo</em>s and sticks.</p><p>It's guaranteed that ∑<em>m</em>≤106.</p><h2 id="输出格式-6">输出格式:</h2><p>Print a single integer, the answer mod 998244353.</p><h2 id="输入样例-6">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4 2</span><br></pre></td></tr></table></figure><h2 id="输出样例-6">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="note">Note</h2><p>The valid ways are:</p><p><span class="math inline">\([1],[2,3,4][1],[3,4,2][1,2],[3,4][2,1],[3,4][1,2,3], \\ [4] [2,3,1],[4][2,3,4],[1][3,4,2],[1][3,4],[1,2][3,4], \\ [2,1][4], [1,2,3][4],[2,3,1][1],[3,2,4][1],[4,3,2][1,2], \\ [4,3][2,1],[4,3][2,1,3],[4][3,2,1],[4][3,2,4],[1][4,3,2],\\ [1][4,3],[1,2][4,3],[2,1][4],[2,1,3][4],[3,2,1]\)</span></p><h2 id="算法思路-6">算法思路</h2><p>​ 不懂，先放着</p><h2 id="ac代码-6">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(a, s, t) for(int a = (s); a &lt;= (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(a, t, s) for(int a = (t); a &gt;= (s); a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(a, s, t) for(int a = (s); a &lt; (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIO cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">&quot; is &quot;</span> &lt;&lt; x &lt;&lt; <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(...) 111</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, M = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">// tourist&#x27;s template</span></span><br><span class="line"><span class="function">T <span class="title">inverse</span><span class="params">(T a, T m)</span> </span>&#123;</span><br><span class="line">  T u = <span class="number">0</span>, v = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">    T t = m / a;</span><br><span class="line">    m -= t * a; <span class="built_in">swap</span>(a, m);</span><br><span class="line">    u -= t * v; <span class="built_in">swap</span>(u, v);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">assert</span>(m == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modular</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> Type = <span class="keyword">typename</span> decay&lt;<span class="keyword">decltype</span>(T::value)&gt;::type;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="title">Modular</span><span class="params">()</span> : value() &#123;</span>&#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="built_in">Modular</span>(<span class="keyword">const</span> U&amp; x) &#123;</span><br><span class="line">    value = <span class="built_in">normalize</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Type <span class="title">normalize</span><span class="params">(<span class="keyword">const</span> U&amp; x)</span> </span>&#123;</span><br><span class="line">    Type v;</span><br><span class="line">    <span class="keyword">if</span> (-<span class="built_in">mod</span>() &lt;= x &amp;&amp; x &lt; <span class="built_in">mod</span>()) v = <span class="keyword">static_cast</span>&lt;Type&gt;(x);</span><br><span class="line">    <span class="keyword">else</span> v = <span class="keyword">static_cast</span>&lt;Type&gt;(x % <span class="built_in">mod</span>());</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v += <span class="built_in">mod</span>();</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">const</span> Type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">U</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;U&gt;(value); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="keyword">static</span> Type <span class="title">mod</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> T::value; &#125;</span><br><span class="line"> </span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">if</span> ((value += other.value) &gt;= <span class="built_in">mod</span>()) value -= <span class="built_in">mod</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">if</span> ((value -= other.value) &lt; <span class="number">0</span>) value += <span class="built_in">mod</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; Modular&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> U&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="built_in">Modular</span>(other); &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; Modular&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> U&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="built_in">Modular</span>(other); &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>++() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="number">1</span>; &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>--() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="number">1</span>; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>++(<span class="keyword">signed</span>) &#123; <span class="function">Modular <span class="title">result</span><span class="params">(*<span class="keyword">this</span>)</span></span>; *<span class="keyword">this</span> += <span class="number">1</span>; <span class="keyword">return</span> result; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>--(<span class="keyword">signed</span>) &#123; <span class="function">Modular <span class="title">result</span><span class="params">(*<span class="keyword">this</span>)</span></span>; *<span class="keyword">this</span> -= <span class="number">1</span>; <span class="keyword">return</span> result; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Modular</span>(-value); &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;is_same&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type, <span class="keyword">signed</span>&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">    <span class="keyword">uint64_t</span> x = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(value) * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(rhs.value);</span><br><span class="line">    <span class="keyword">uint32_t</span> xh = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(x &gt;&gt; <span class="number">32</span>), xl = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(x), d, m;</span><br><span class="line">    <span class="built_in"><span class="keyword">asm</span></span>(</span><br><span class="line">      <span class="string">&quot;divl %4; \n\t&quot;</span></span><br><span class="line">      : <span class="string">&quot;=a&quot;</span> (d), <span class="string">&quot;=d&quot;</span> (m)</span><br><span class="line">      : <span class="string">&quot;d&quot;</span> (xh), <span class="string">&quot;a&quot;</span> (xl), <span class="string">&quot;r&quot;</span> (<span class="built_in">mod</span>())</span><br><span class="line">    );</span><br><span class="line">    value = m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    value = <span class="built_in">normalize</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(value) * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(rhs.value));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;is_same&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type, <span class="keyword">long</span> <span class="keyword">long</span>&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> q = <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;(value) * rhs.value / <span class="built_in">mod</span>());</span><br><span class="line">    value = <span class="built_in">normalize</span>(value * rhs.value - q * <span class="built_in">mod</span>());</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;!is_integral&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line">    value = <span class="built_in">normalize</span>(value * rhs.value);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>/=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> *= <span class="built_in">Modular</span>(<span class="built_in">inverse</span>(other.value, <span class="built_in">mod</span>())); &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">const</span> Type&amp; <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Modular&amp; x)</span> </span>&#123; <span class="keyword">return</span> x.value; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;U&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;U&gt;&amp; rhs);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modular&lt;U&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;U&gt;&amp; rhs);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> V, <span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> V&amp; <span class="keyword">operator</span>&gt;&gt;(V&amp; stream, Modular&lt;U&gt;&amp; number);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Type value;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> lhs.value == rhs.value; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> lhs == Modular&lt;T&gt;(rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) == rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> lhs.value &lt; rhs.value; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">Modular&lt;T&gt; <span class="title">power</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; a, <span class="keyword">const</span> U&amp; b)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(b &gt;= <span class="number">0</span>);</span><br><span class="line">  Modular&lt;T&gt; x = a, res = <span class="number">1</span>;</span><br><span class="line">  U p = b;</span><br><span class="line">  <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">    x *= x;</span><br><span class="line">    p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsZero</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; number)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span>() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; number)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">to_string</span>(<span class="built_in">number</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> T&gt;</span><br><span class="line">U&amp; <span class="keyword">operator</span>&lt;&lt;(U&amp; stream, <span class="keyword">const</span> Modular&lt;T&gt;&amp; number) &#123;</span><br><span class="line">  <span class="keyword">return</span> stream &lt;&lt; <span class="built_in">number</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> T&gt;</span><br><span class="line">U&amp; <span class="keyword">operator</span>&gt;&gt;(U&amp; stream, Modular&lt;T&gt;&amp; number) &#123;</span><br><span class="line">  <span class="keyword">typename</span> common_type&lt;<span class="keyword">typename</span> Modular&lt;T&gt;::Type, <span class="keyword">long</span> <span class="keyword">long</span>&gt;::type x;</span><br><span class="line">  stream &gt;&gt; x;</span><br><span class="line">  number.value = Modular&lt;T&gt;::<span class="built_in">normalize</span>(x);</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> md = <span class="number">998244353</span>, md2 = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">using</span> Mint = Modular&lt;std::integral_constant&lt;decay&lt;<span class="keyword">decltype</span>(md)&gt;::type, md&gt;&gt;;    </span><br><span class="line">map&lt;<span class="keyword">int</span>, Mint&gt; g[<span class="number">1000005</span>];</span><br><span class="line"><span class="function">Mint <span class="title">qmi</span><span class="params">(Mint a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    Mint res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mint <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    Mint t = <span class="built_in">qmi</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qmi</span>(t, md - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mint <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> md2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == m) <span class="keyword">return</span> <span class="built_in">calc</span>(<span class="number">2</span>, n);</span><br><span class="line">    <span class="keyword">if</span>(g[m].<span class="built_in">count</span>(n)) <span class="keyword">return</span> g[m][n];</span><br><span class="line">    Mint &amp;res = g[m][n];</span><br><span class="line">    g[m][n] = <span class="built_in">dfs</span>(m, n - <span class="number">1</span>) + md2 * <span class="built_in">dfs</span>(m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> g[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n == m)&#123;</span><br><span class="line">        Mint ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans *= i;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n--, m--;</span><br><span class="line">    Mint ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n - m + <span class="number">1</span>, n) ans *= i;</span><br><span class="line">    cout &lt;&lt; <span class="function">ans * <span class="title">qmi</span><span class="params">(<span class="number">2</span>, n - m)</span> * <span class="params">(m + <span class="number">1</span>)</span> &lt;&lt; &#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FIO;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin); <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="奖牌"><strong>7-10 奖牌</strong></h1><p>小河发现竞赛圈有个奇怪的现象，人们称呼奖牌的时候，喜欢使用化学符号<code>Au</code>、<code>Ag</code>和<code>Cu</code>来表示金、银、铜奖，而不是官方的<code>gold</code>、<code>silver</code>和<code>bronze</code>。</p><p>他非常无聊，于是就问你，奖牌官方称呼的单词对应的惯用符号是什么。如果他对你说<code>gold</code>，你就要回答他<code>Au</code>，以此类推</p><h2 id="输入格式-7">输入格式:</h2><p>输入一行包含一个字符串，<code>gold</code>、<code>silver</code>或者<code>bronze</code></p><h2 id="输出格式-7">输出格式:</h2><p>输出对应的惯用符号。</p><h2 id="输入样例-7">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gold</span><br></pre></td></tr></table></figure><h2 id="输出样例-7">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Au</span><br></pre></td></tr></table></figure><h2 id="算法思路-7">算法思路</h2><p>​ 签到</p><h2 id="ac代码-7">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">int</span> h[maxn], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">&quot;gold&quot;</span>) cout &lt;&lt; <span class="string">&quot;Au&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;silver&quot;</span>) cout &lt;&lt; <span class="string">&quot;Ag&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Cu&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="挤牙膏"><strong>7-12 挤牙膏</strong></h1><p>小河和小北比赛挤牙膏。</p><p>如果用力度<em>f</em>去挤余量为<em>c</em>的牙膏管，会挤出<span class="math inline">\(min \{ c,⌊\frac {c*f} {10^{9}}⌋\}\)</span>个单位的牙膏（其中符号 ⌊<em>x</em>⌋表示对 <em>x</em> 向下取整）。</p><p>小河和小北共比了<em>m</em>轮，给出小河和小北初始的牙膏管余量<em>c</em>1,<em>c</em>2，每轮的力度<span class="math inline">\(f_{i1},f_{i2}\)</span>，计算最后谁挤出的牙膏多。如果小河挤出的多，则小河胜利，输出<code>Rilly</code>，否则输出<code>Northy</code>。</p><h2 id="输入格式-8">输入格式:</h2><p>本题包含多组数据。</p><p>第一行包含一个数字<em>T</em>(1≤<em>T</em>≤10^6)，表示数据组数。</p><p>对于每组数据，第一行包含三个数字<em>m</em>,<em>c</em>1,<em>c</em>2(1≤<em>m</em>≤10^6,0≤<em>c</em>1,<em>c</em>2≤ 10^9)。</p><p>接下来<em>m</em>行，第<em>i</em>行包含两个数字<span class="math inline">\(f_{i1},f_{i2}\)</span>(0≤<span class="math inline">\(f_{i1},f_{i2}\)</span>≤10^9)，表示第<em>i</em>轮小河和小北挤牙膏的力度。</p><p>题目保证 ∑<em>m</em>≤10^6。</p><h2 id="输出格式-8">输出格式:</h2><p>对于每组数据，输出一行<code>Rilly</code>或<code>Northy</code>，分别表示小河和小北胜利。</p><h2 id="输入样例1">输入样例1:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 1000000000 100000000</span><br><span class="line">1 100000000</span><br></pre></td></tr></table></figure><h2 id="输出样例1">输出样例1:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Northy</span><br></pre></td></tr></table></figure><h2 id="算法思路-8">算法思路</h2><p>​ 数据量很小，直接模拟即可</p><h2 id="ac代码-8">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3005</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,s,q,k,a[N],b[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1,c2;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>,sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> f1,f2;</span><br><span class="line">        cin &gt;&gt; f1 &gt;&gt; f2;</span><br><span class="line">        sum1 += <span class="built_in">min</span>(c1,c1 * f1 / M);</span><br><span class="line">        sum2 += <span class="built_in">min</span>(c2,c2 * f2 / M);</span><br><span class="line">        c1 -= <span class="built_in">min</span>(c1,c1 * f1 / M);</span><br><span class="line">        c2 -= <span class="built_in">min</span>(c2,c2 * f2 / M);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum1 &gt; sum2) <span class="built_in">puts</span>(<span class="string">&quot;Rilly&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;Northy&quot;</span>);</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="游戏"><strong>7-6 游戏</strong></h1><p>前不久小河和小北沉迷上了一个游戏《少年三国志2》，一段时间之后小河就玩腻了，于是他自己仿照《少年三国志2》编了一个新的简单小游戏，并邀请小北一起来玩这个新游戏。这个游戏规则如下：一共有4种英雄，他们都有奇怪的名字，分别叫做：Gigi，Nick，Thai，May。在游戏一开始的时候，小河和小北分别会有<em>n</em>个英雄，这些英雄必定都是上面4种中的一个。这2<em>n</em>个英雄里面的每一个都有一个攻击序列{<em>a<strong>i<em>}，这个序列是1,2,3,…,</em>n<em>的一个排列，这个英雄会先攻击对方编号为</em>a<em>1的英雄，直到将其淘汰（生命值小于等于0），然后再攻击对方编号为</em>a<em>2的英雄直到将其淘汰，然后攻击</em>a<em>3，以此类推。也就是说</em>a<em>1,</em>a<em>2,…,</em>a</strong>n</em>中第一个没有被淘汰的敌方英雄为他的<strong>当前攻击对象</strong>。每个英雄都有生命值、攻击力、法力上限这三个基本属性，如下表所示：</p><table><thead><tr class="header"><th>英雄名</th><th>生命值</th><th>攻击力</th><th>法力上限</th></tr></thead><tbody><tr class="odd"><td>Gigi</td><td>900</td><td>65</td><td>100</td></tr><tr class="even"><td>Nick</td><td>1000</td><td>52</td><td>80</td></tr><tr class="odd"><td>Thai</td><td>1500</td><td>41</td><td>120</td></tr><tr class="even"><td>May</td><td>750</td><td>77</td><td>50</td></tr></tbody></table><p>在游戏开始后小河和小北轮流进行操作，小河先操作，直到有一方所有的英雄都被淘汰为止。在每一轮中，每一方的操作都是按照下面的流程进行的：按照编号从小到大依次处理每一个没有被淘汰的我方英雄，这个英雄会先恢复10点法力值（初始值为0），如果法力值达到了上限则这个英雄的这次攻击会<strong>强化</strong>为一次大招（并将法力值清零），否则进行一次普通攻击，作用对象都为他的当前攻击对象。普通攻击会对当前攻击对象造成英雄攻击力点伤害（在没有护盾的情况下，效果为敌方英雄扣除我方攻击英雄的攻击力点生命值）。每个英雄的大招如下：</p><ol type="1"><li>Gigi：先对当前攻击对象进行一次普通攻击，然后对所有没有被淘汰的己方英雄恢复10点生命值。</li><li>Nick：立即获得120点护盾，<strong>护盾值的上限为200点</strong>。当Nick受到伤害时，会先用护盾值抵扣等额生命值的伤害。比如说当前Nick有100点护盾，此时受到120点伤害，会扣除他全部100点护盾和20点生命。</li><li>Thai：立即获得两次伤害减免效果，也就是说接下来Thai受到的两次伤害（不管伤害量是多少）都会被抵消。这个效果可以叠加，也就是说如果Thai在使用完大招之后没有受到伤害，再次使用大招会累计获得4次伤害减免效果！</li><li>May：对当前攻击对象进行一次普通攻击，<strong>然后</strong>标记当前攻击对象。May对他标记的对象的每次攻击伤害都会提升50点（多次标记效果不叠加）。</li></ol><p>如果当前操作方的某个英雄攻击之后，对方的所有英雄都被淘汰掉了，则当前操作方胜利，并且剩余的英雄不再进行操作。</p><h2 id="输入格式-9">输入格式:</h2><p>输入数据的第一行仅有一个整数<em>T</em>(1≤<em>T</em>≤300)表示测试数据组数。</p><p>对于每组测试数据，第一行一个整数<em>n</em>(1≤<em>n</em>≤10)，表示双方的英雄数目。</p><p>接下来2<em>n</em>行，每行表示一个英雄，其中前<em>n</em>行按照编号从1到<em>n</em>的顺序给出小河的英雄，接下来<em>n</em>行按照同样的顺序给出小北的英雄。对于这2<em>n</em>行，每一行都有如下格式：Type <span class="math inline">\(a_1,a_2,⋯,a_n\)</span></p><p>其中<code>Type</code>为<code>Gigi</code>、<code>Nick</code>、<code>Thai</code>、<code>May</code>中的一个，表示英雄的类型。<span class="math inline">\(a_1,a_2,⋯,a_n\)</span>为这个英雄的攻击序列</p><h2 id="输出格式-9">输出格式:</h2><p>如果<strong>小河</strong>获胜（最终小北的英雄全部被淘汰），输出一行<strong>YES</strong>，接下来一行依次输出小河的<em>n</em>个英雄的生命值（被淘汰的英雄输出0）。如果<strong>小北</strong>获胜，输出一行<strong>NO</strong>，接下来一行依次输出小北的<em>n</em>个英雄的生命值（被淘汰的英雄输出0）。</p><h2 id="输入样例-8">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">Gigi 1</span><br><span class="line">Nick 1</span><br><span class="line">1</span><br><span class="line">Thai 1</span><br><span class="line">May 1</span><br></pre></td></tr></table></figure><h2 id="输出样例-8">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">36</span><br><span class="line">NO</span><br><span class="line">135</span><br></pre></td></tr></table></figure><h2 id="算法思路-9">算法思路</h2><p>​ 没过，暂时没改好bug</p><h2 id="ac代码-9">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> st; <span class="comment">// 判断是否死亡</span></span><br><span class="line">    <span class="keyword">int</span> hp, max_hp, pro, cnt; <span class="comment">// 血量，最大血量，护盾值，免伤次数</span></span><br><span class="line">    <span class="keyword">int</span> attack, blue, max_blue; <span class="comment">// 伤害，当前法力值, 最大法力值</span></span><br><span class="line">    <span class="keyword">int</span> type; <span class="comment">// 记录类别</span></span><br><span class="line">    <span class="keyword">int</span> series[maxn]; <span class="comment">// 攻击序列</span></span><br><span class="line">    <span class="keyword">int</span> label[maxn]; <span class="comment">// 记录标记</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">int</span> status[<span class="number">4</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">900</span>, <span class="number">65</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="number">52</span>, <span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1500</span>, <span class="number">41</span>, <span class="number">120</span>&#125;,</span><br><span class="line">    &#123;<span class="number">750</span>, <span class="number">77</span>, <span class="number">50</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;string, <span class="keyword">int</span>&gt; mp &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Gigi&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Nick&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Thai&quot;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;May&quot;</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Node a[maxn], b[maxn]; <span class="comment">// 两个人的英雄</span></span><br><span class="line"><span class="keyword">int</span> lasta, lastb;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_ --) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        lasta = n, lastb = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            string type; cin &gt;&gt; type;</span><br><span class="line">            <span class="keyword">int</span> d = mp[type];</span><br><span class="line">            a[i].st = <span class="literal">false</span>; a[i].type = d;</span><br><span class="line">            a[i].max_hp = status[d][<span class="number">0</span>];</span><br><span class="line">            a[i].hp = status[d][<span class="number">0</span>], a[i].attack = status[d][<span class="number">1</span>], a[i].max_blue = status[d][<span class="number">2</span>];</span><br><span class="line">            a[i].blue = <span class="number">0</span>; a[i].pro = <span class="number">0</span>;</span><br><span class="line">            a[i].cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) cin &gt;&gt; a[i].series[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) a[i].label[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            string type; cin &gt;&gt; type;</span><br><span class="line">            <span class="keyword">int</span> d = mp[type];</span><br><span class="line">            b[i].st = <span class="literal">false</span>; b[i].type = d;</span><br><span class="line">            b[i].max_hp = status[d][<span class="number">0</span>];</span><br><span class="line">            b[i].cnt = <span class="number">0</span>;</span><br><span class="line">            b[i].hp = status[d][<span class="number">0</span>], b[i].attack = status[d][<span class="number">1</span>], b[i].max_blue = status[d][<span class="number">2</span>];</span><br><span class="line">            b[i].blue = <span class="number">0</span>; b[i].pro = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) cin &gt;&gt; b[i].series[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) b[i].label[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lastb == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!a[i].st) &#123;</span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                    a[i].blue += <span class="number">10</span>;</span><br><span class="line">                    a[i].blue = <span class="built_in">min</span>(a[i].blue, a[i].max_blue);</span><br><span class="line">                    <span class="keyword">if</span>(a[i].blue == a[i].max_blue) flag = <span class="literal">true</span>; <span class="comment">// 如果达到法力值上限，强化大招</span></span><br><span class="line">                    <span class="keyword">if</span>(flag) &#123; <span class="comment">// 释放大招</span></span><br><span class="line">                        a[i].blue = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span>(a[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); <span class="comment">// 先用护盾值抵挡伤害</span></span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; <span class="comment">// 标记为死亡</span></span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(!a[j].st) &#123;  <span class="comment">// 如果没死亡，就加10滴血</span></span><br><span class="line">                                    a[j].hp += <span class="number">10</span>;</span><br><span class="line">                                    a[j].hp = <span class="built_in">min</span>(a[j].hp, a[j].max_hp);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a[i].pro += <span class="number">120</span>;</span><br><span class="line">                            a[i].pro = <span class="built_in">min</span>(a[i].pro, <span class="number">200ll</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a[i].cnt += <span class="number">2</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(a[k].label[target])&#123;</span><br><span class="line">                                                atk = a[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    a[i].label[target] ++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> d = a[i].type;</span><br><span class="line">                        <span class="keyword">if</span>(d == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(a[k].label[target])&#123;</span><br><span class="line">                                                atk = a[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>;</span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lastb == <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lasta == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!b[i].st) &#123;</span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                    b[i].blue += <span class="number">10</span>;</span><br><span class="line">                    b[i].blue = <span class="built_in">min</span>(b[i].blue, b[i].max_blue);</span><br><span class="line">                    <span class="keyword">if</span>(b[i].blue == b[i].max_blue) flag = <span class="literal">true</span>; </span><br><span class="line">                    <span class="keyword">if</span>(flag) &#123; </span><br><span class="line">                        b[i].blue = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span>(b[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro);</span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(!b[j].st) &#123;  </span><br><span class="line">                                    b[j].hp += <span class="number">10</span>;</span><br><span class="line">                                    b[j].hp = <span class="built_in">min</span>(b[j].hp, b[j].max_hp);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123; </span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            b[i].pro += <span class="number">120</span>;</span><br><span class="line">                            b[i].pro = <span class="built_in">min</span>(b[i].pro, <span class="number">200ll</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;  </span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            b[i].cnt += <span class="number">2</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">3</span>)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[k].label[target])&#123;</span><br><span class="line">                                                atk = b[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro);</span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    b[i].label[target] ++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> d = b[i].type;</span><br><span class="line">                        <span class="keyword">if</span>(d == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[k].label[target])&#123;</span><br><span class="line">                                                atk = b[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro); </span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro); <span class="comment">// 先用护盾值抵挡伤害</span></span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; <span class="comment">// 标记为死亡</span></span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lasta == <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].st) a[i].hp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">1</span>) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>; </span><br><span class="line">                cout &lt;&lt; a[i].hp;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i].st) b[i].hp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">1</span>) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout &lt;&lt; b[i].hp;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;理财&quot;&gt;&lt;strong&gt;7-1 理财&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;小 P 最近开始了理财。&lt;/p&gt;
&lt;p&gt;他一共花了 &lt;em&gt;n&lt;/em&gt; 元买基金，买入时基金的单位净值（即每单位份额的价格）为 &lt;em&gt;</summary>
      
    
    
    
    <category term="pta" scheme="http://wangxu1905.github.io/categories/pta/"/>
    
    <category term="省赛训练" scheme="http://wangxu1905.github.io/categories/pta/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
    <category term="线段树" scheme="http://wangxu1905.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 267</title>
    <link href="http://wangxu1905.github.io/2022/10/13/AtCoder%20Beginner%20Contest%20267/"/>
    <id>http://wangxu1905.github.io/2022/10/13/AtCoder%20Beginner%20Contest%20267/</id>
    <published>2022-10-13T06:14:27.752Z</published>
    <updated>2022-10-13T07:25:32.811Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="c---index-acontinuous-ver."><strong>C - Index × A(Continuous ver.)</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc267/tasks/abc267_c">C - Index × A(Continuous ver.) (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 给定一个长度为n的数组，求一个长度为m的连续的数组b，使得<span class="math inline">\(\sum_{i = 1}^{m}b[i] *i\)</span>最大</p><h2 id="算法思路">算法思路</h2><p>​ 感觉更像是个前缀和+滑动窗口，由于N&lt;=2e5，所以暴力肯定不行</p><p>​ 我们记<span class="math inline">\(A[l,r] = 1*b[l] + 2 *b[l+1]+···+m*b[r]\)</span></p><p>​ 如果我们要向前移动一位，<span class="math inline">\(A[l+1,r+1] = 1*b[l+1] + 2 *b[l+2]+···+m*b[r+1] \\=A[l,r] + m *b[r+ 1]-(b[l]+b[l+1]+···+b[r])\\=A[l,r] + m *b[r+ 1]-(b[1]+b[2]+···+b[r]) + (b[1]+b[2]+···+b[l - 1])\\=A[l,r]+m*b[r+1]-(sum[r] - sum[l-1])\)</span></p><p>所以我们初始化一遍前缀和，然后根据这个进行滑动即可</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">int</span> n,m,t,a[N],s[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先初始化一个大小为m的窗口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) res += a[i] * i;</span><br><span class="line">    <span class="keyword">int</span> ans = res;</span><br><span class="line">    <span class="comment">//进行滑动</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="comment">//计算新的左右边界</span></span><br><span class="line">        <span class="keyword">int</span> l = i - m + <span class="number">1</span>,r = i;</span><br><span class="line">        <span class="comment">//进行滑动，l是当前的左边界，上一个左边界为l-1,所以应为l-2</span></span><br><span class="line">        res = res + m * a[i] - (s[r - <span class="number">1</span>] - s[l - <span class="number">2</span>]);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,res);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---index-anot-continuous-ver."><strong>D - Index × A(Not Continuous ver.)</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc267/tasks/abc267_d">D - Index × A(Not Continuous ver.) (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 给定一个长度为n的数组，求一个长度为m的不连续的数组b，使得<span class="math inline">\(\sum_{i = 1}^{m}b[i] *i\)</span>最大</p><h2 id="算法思路-1">算法思路</h2><p>​ n的范围变成了2000，因此可以考虑n方暴力dp，<span class="math inline">\(dp[i][j]\)</span>表示前i个数选择j个数的最大价值，我们直接暴力转移选还是不选这个元素即可。</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">int</span> n,m,t,a[N],dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + j * a[i],dp[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;c---index-acontinuous-ver.&quot;&gt;&lt;strong&gt;C - Index × A(Continuous ver.)&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC267" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC267/"/>
    
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
    <category term="滑动窗口" scheme="http://wangxu1905.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 268</title>
    <link href="http://wangxu1905.github.io/2022/10/10/AtCoder%20Beginner%20Contest%20268/"/>
    <id>http://wangxu1905.github.io/2022/10/10/AtCoder%20Beginner%20Contest%20268/</id>
    <published>2022-10-10T09:15:56.649Z</published>
    <updated>2022-10-11T01:42:02.984Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="c---chinese-restaurant"><strong>C - Chinese Restaurant</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc268/tasks/abc268_c">C - Chinese Restaurant (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 有n个人做成一桌，每个人前面都有一盘菜，人和菜都是1~n的排列，如果序号和自己下标相同的菜距离自己小于等于1，那么这个人就会很高兴。你作为服务员可以任意旋转桌子，使得高兴的人最多。</p><h2 id="算法思路">算法思路</h2><p>​ 下标i的人，想要的菜在j，则需要转动<span class="math inline">\((j - i),(j - i - 1),(j - i + 1)\)</span>次能使i满意，那么我们记录转动cnt次，能使多少人满意，之后遍历次数，取最大即可</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; book;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        <span class="comment">//i面前的菜为j,那么a[j] = i,那么下标为j的菜在i这里</span></span><br><span class="line">        a[b[i]] = i;</span><br><span class="line">        <span class="comment">//cin &gt;&gt; a[i]，或者不转菜，直接转人也可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        book[((a[i] - (i - <span class="number">1</span>)) % n + n) % n]++;</span><br><span class="line">        book[((a[i] - (i)) % n + n) % n]++;</span><br><span class="line">        book[((a[i] - (i + <span class="number">1</span>)) % n + n) % n]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it : book)</span><br><span class="line">        res = <span class="built_in">max</span>(res,it.second);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---unique-username"><strong>D - Unique Username</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc268/tasks/abc268_d">D - Unique Username (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 给定n种字符串，请用'_'字符串串联起来，类似于a_b_c__d的形式，其中每个字符串之间间隔的'_'的数量自定（最小是1）,再给定m个T字符，要求你构造的字符和所有的T不同</p><h2 id="算法思路-1">算法思路</h2><p>​ 读假题了，卡了4小时，以为是m个T字符不能是构造的字符串的子串，dfs爆搜</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">unordered_map&lt;string,<span class="keyword">int</span>&gt; book;</span><br><span class="line">vector&lt;string&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> cnt,string s)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果剩下的_不够剩下的字符串使用，直接return</span></span><br><span class="line">    <span class="keyword">if</span>(n - (u + <span class="number">1</span>) &gt; cnt)   <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        <span class="comment">//是否满足长度条件，或者是否和T相同</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() &lt; <span class="number">3</span> || s.<span class="built_in">size</span>() &gt; <span class="number">16</span> || book.<span class="built_in">count</span>(s))   <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; endl;<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            string tmp = s + ve[i];</span><br><span class="line">            <span class="keyword">if</span>(u == n - <span class="number">1</span>)  <span class="built_in">dfs</span>(u + <span class="number">1</span>,cnt,tmp);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//把所有的_情况都要考虑</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j)&#123;</span><br><span class="line">                    tmp += <span class="string">&quot;_&quot;</span>;</span><br><span class="line">                    <span class="built_in">dfs</span>(u + <span class="number">1</span>,cnt - j,tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    ve.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  &#123;</span><br><span class="line">        cin &gt;&gt; ve[i];</span><br><span class="line">        cnt += ve[i].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        book[s]++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//16-cnt为还剩下多少个_可以用</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">16</span> - cnt,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---do-use-hexagon-grid"><strong>D - Do use hexagon grid</strong></h1><h2 id="题目链接-2">题目链接</h2><p><a href="https://atcoder.jp/contests/abc269/tasks/abc269_d">D - Do use hexagon grid (atcoder.jp)</a></p><h2 id="题目描述-2">题目描述</h2><p>​ 给定一个蜂巢图，给定若干个目标点，求连通块的数量</p><h2 id="算法思路-2">算法思路</h2><p>​ 无脑dfs</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,mar[N][N],vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,dy[] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dx[i],yy = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(mar[xx][yy] &amp;&amp; !vis[xx][yy])    <span class="built_in">dfs</span>(xx,yy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="comment">//原坐标为[-1000,1000],偏移到[1,2001]上，这样就是正下标了</span></span><br><span class="line">        x += <span class="number">1001</span>,y += <span class="number">1001</span>;</span><br><span class="line">        n = <span class="built_in">max</span>(n,x),m = <span class="built_in">max</span>(m,y);</span><br><span class="line">        mar[x][y] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mar[i][j] &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">                res++,<span class="built_in">dfs</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---last-rook"><strong>E - Last Rook</strong></h1><h2 id="题目链接-3">题目链接</h2><p><a href="https://atcoder.jp/contests/abc269/tasks/abc269_e">E - Last Rook (atcoder.jp)</a></p><h2 id="题目描述-3">题目描述</h2><p>​ 交互题，给定n*n的矩阵，要求每一行和每一列都有一个棋子，目前已经放了n-1个棋子，请询问一个矩阵内的棋子数量，询问次数不超过1000,最后找到最后一个棋子应该存放的位置。</p><h2 id="算法思路-3">算法思路</h2><p>​ 假设最后一个棋子坐标为（x，y）,只需要两次二分，第一次二分确定x，第二次确定y。</p><p>​ 如果(1,1)到(mid,n)围成的矩阵里棋子个数为mid，则x的坐标在[mid+1,r]，否则就是在[1,mid]。我们对x，y分别进行二分就可以得到最终坐标点。</p><h2 id="ac代码-3">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %lld %lld %lld %lld\n&quot;</span>,a,b,c,d);</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>,r = n,x,y;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        <span class="comment">//一直计算[l,mid]，要是计算[l,mid]还需要转换</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,mid,<span class="number">1</span>,n) &lt; mid) r = mid;</span><br><span class="line">        <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = l;</span><br><span class="line">    l = <span class="number">1</span>,r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,n,<span class="number">1</span>,mid) &lt; mid) r = mid;</span><br><span class="line">        <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = l;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;! %lld %lld\n&quot;</span>,x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---transportation"><strong>F - Transportation</strong></h1><h2 id="题目链接-4">题目链接</h2><p><a href="https://atcoder.jp/contests/abc270/tasks/abc270_f">F - Transportation (atcoder.jp)</a></p><h2 id="题目描述-4">题目描述</h2><p>​ 有n个岛屿，每次可以建三种道路，第一种：在两个岛屿之间建桥，第二种：在某一个岛屿上建立港口，所有建立港口的岛屿之间可以互相连接，第三种：在某一个岛屿上建立飞机场，所以建立飞机场的岛屿之间可以互相连接，求n个岛屿的最小生成树</p><h2 id="算法思路-4">算法思路</h2><p>​ 如果只考虑道路，那么就是个普通的最小生成树。但是考虑港口和飞机场的话，我们可以建立虚拟源点，作为港口的中转站或者飞机场的中转站，然后由此进行求解最小生成树，然后我们枚举是否建立港口或者飞机场即可</p><p>​ 注意每次Kruskal排序，都会打乱顺序，所以要重新添加道路信息</p><p>​ 虽说一共有七种组合：陆、海、空、陆海、路空、海空、陆海空</p><p>​ 但是单独的海、空很好计算，直接相加即可，也可以归到陆海和路空里，因为把道路考虑进去，只能使答案更小或者不变，不可能变大；同理海空可以归到陆海空里。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">港口的集合结点为<span class="number">1</span>，新要添加的结点为<span class="number">2</span></span><br><span class="line">    如果在<span class="number">2</span>建立港口代价为x，<span class="number">2</span>与港口集合中某一座岛屿建立道路代价为y</span><br><span class="line">    <span class="number">1.</span>x &gt; y，选择建立道路，对于后序结点选择是否建立港口没有影响，因为建立港口的代价只与自身有关</span><br><span class="line">    <span class="number">2.</span>x &lt; y，选择建立港口，对于后序答案无影响</span><br><span class="line">    <span class="number">3.</span>x == y,建什么都行，理由同上</span><br><span class="line">    </span><br><span class="line">主要是因为建立港口和飞机场的代价只与自身有关，道路的建立不影响是否建立港口和飞机场</span><br></pre></td></tr></table></figure><h2 id="ac代码-4">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _u,<span class="keyword">int</span> _v,<span class="keyword">int</span> _w)&#123;</span><br><span class="line">        u = _u,v = _v,w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;a,<span class="keyword">const</span> Edge &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M],e1[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,len,a[N],b[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x] == <span class="number">-1</span>)   <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u,v = e[i].v,w = e[i].w;</span><br><span class="line">        <span class="keyword">int</span> fa = <span class="built_in">find</span>(u),fb = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)&#123;</span><br><span class="line">            f[fb] = fa;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt++; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == n - <span class="number">1</span>)    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e1[i] = <span class="built_in">Edge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建道路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n,m));</span><br><span class="line">    <span class="comment">//建道路、机场</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,b[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、机场和港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        e[i + m + n] = <span class="built_in">Edge</span>(i,n + <span class="number">2</span>,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">2</span>,<span class="number">2</span> * n + m));</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;c---chinese-restaurant&quot;&gt;&lt;strong&gt;C - Chinese Restaurant&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC268" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC268/"/>
    
    
    <category term="二分" scheme="http://wangxu1905.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 272</title>
    <link href="http://wangxu1905.github.io/2022/10/09/AtCoder%20Beginner%20Contest%20272/"/>
    <id>http://wangxu1905.github.io/2022/10/09/AtCoder%20Beginner%20Contest%20272/</id>
    <published>2022-10-09T12:05:13.217Z</published>
    <updated>2022-10-09T13:22:29.479Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="d---root-m-leaper"><strong>D - Root M Leaper</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc272/tasks/abc272_d">D - Root M Leaper (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 给定一个n*n棋盘，要求每次走的步数横纵坐标之差的平方和为m，求到达棋盘的每一个点的最小步数，如果不可达则为-1</p><h2 id="算法思路">算法思路</h2><p>​ 首先每次平方和为m能走的策略是固定的，可以先初始化出来，然后进行bfs即可，bfs时候每个格子最多只走一次，时间复杂度为O（n^2），对于n&lt;=400，足够</p><p>​ 如何判定一个数是否为整数：ceil(x) == floor(x)</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],mar[N][N],res[N][N],vis[N][N];</span><br><span class="line">vector&lt;PII&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> deep = <span class="number">-1</span>;</span><br><span class="line">    queue&lt;PII&gt; qu;</span><br><span class="line">    qu.<span class="built_in">push</span>(&#123;x1,y1&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = qu.<span class="built_in">size</span>();</span><br><span class="line">        deep++;</span><br><span class="line">        <span class="keyword">while</span>(sz--)&#123;</span><br><span class="line">            <span class="keyword">auto</span> t = qu.<span class="built_in">front</span>();</span><br><span class="line">            qu.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">int</span> x = t.first,y = t.second;</span><br><span class="line">            <span class="keyword">if</span>(vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[x][y] = <span class="number">1</span>;</span><br><span class="line">            res[x][y] = deep;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ve.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> xx = x + ve[i].first,yy = y + ve[i].second;</span><br><span class="line">                <span class="keyword">if</span>(xx &lt; <span class="number">1</span> || xx &gt; n || yy &lt; <span class="number">1</span> || yy &gt; n || vis[xx][yy])    <span class="keyword">continue</span>;</span><br><span class="line">                qu.<span class="built_in">push</span>(&#123;xx,yy&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">//初始化走的策略</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(n,m); ++i)&#123;</span><br><span class="line">        <span class="keyword">double</span> t = <span class="built_in">sqrtl</span>(m - i * i);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ceil</span>(t) == <span class="built_in">floor</span>(t))&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="built_in">ceil</span>(t);</span><br><span class="line">            ve.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">            ve.<span class="built_in">push_back</span>(&#123;-i,-j&#125;);</span><br><span class="line">            ve.<span class="built_in">push_back</span>(&#123;-i,j&#125;);</span><br><span class="line">            ve.<span class="built_in">push_back</span>(&#123;i,-j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i][j] || (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>))   cout &lt;&lt; res[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---add-and-mex"><strong>E - Add and Mex</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc272/tasks/abc272_e">E - Add and Mex (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 给定长度为n的数组，进行m次操作，每次使整个区间加上对应下标的值，对于每次操作后的数组，求mex的函数为多少<span class="math inline">\((n,m &lt;= 2*10^{5})\)</span></p><h2 id="算法思路-1">算法思路</h2><p>​ 显然只有数组中的数为非负数时，才对求mex有影响</p><p>​ 同时mex值最大为n,因为数组长度为n，即使数组是[0,n-1]的全映射，mex最大也才为n</p><p>​ 我们枚举数组中的数在[0,n]所有可能的情况，把值相应放入对应的set中即可</p><p>​ 然后，就是计算次数的上下界l,r的问题,l为第一个能使a[i]&gt;0的，r为第一个能使a[i]&gt;n的,</p><ol type="1"><li>若<span class="math inline">\(p = nq+r,(0&lt;r&lt;q)\)</span>,则<span class="math inline">\(p+q-1=(n-1)q+r&#39;,(0&lt;=r&#39;&lt;q)\)</span>,此时<span class="math inline">\((p+q-1)/q=[(n+1)q+r&#39;]/q=n+1\)</span></li><li>若<span class="math inline">\(p = nq\)</span>,则<span class="math inline">\(p+q-1=nq+r&#39;,(0&lt;r&lt;q)\)</span>,此时<span class="math inline">\((p+q-1)/q=(nq+r&#39;)/q=n\)</span></li></ol><p>​ 综上可以得到，<span class="math inline">\((p+q-1)/q\)</span>的q的最少几倍才能超过p</p><p>​ 所以，若<span class="math inline">\(a[i] &lt; 0\)</span>,要使<span class="math inline">\(a[i]&gt;0\)</span>，则最少需要<span class="math inline">\((-a[i] + i - 1) / i\)</span>个i，要使<span class="math inline">\(a[i]&gt;n\)</span>，则至少需要<span class="math inline">\((n - a[i] + i - 1)/i\)</span>个i</p><p>最后来分析一下时间复杂度：</p><ul><li>数组第一项最多有：<span class="math inline">\(\frac{n}{1}\)</span></li><li>数组第二项最多有：<span class="math inline">\(\frac{n}{2}\)</span></li><li>数组第三项最多有：<span class="math inline">\(\frac{n}{1}\)</span></li><li>'''</li><li>数组第n项最多有：<span class="math inline">\(\frac{n}{n}\)</span></li></ul><figure><img src="https://iknow-pic.cdn.bcebos.com/d439b6003af33a87a5413165cb5c10385343b5a4?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_600%2Ch_800%2Climit_1%2Fquality%2Cq_85%2Fformat%2Cf_auto" alt="img"><figcaption>img</figcaption></figure><p>​ 求和为<span class="math inline">\(O(n \lim_{n \to \infty}(\frac{1}{1}+\frac{1}{2}+\frac{1}{3}+···+\frac{1}{n})) = O(nlogn)\)</span>，能过</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">int</span> n,m,t,a[N];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; se[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="comment">//计算上下界</span></span><br><span class="line">        <span class="keyword">int</span> l = (a[i] &gt;= <span class="number">0</span>) ? <span class="number">1</span> : (-a[i] + i - <span class="number">1</span>) / i;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="built_in">min</span>(m,(n - a[i] + i - <span class="number">1</span>) / i);</span><br><span class="line">        a[i] += l * i;</span><br><span class="line">        <span class="comment">//插入到对应位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt;= r; ++j)&#123;</span><br><span class="line">            se[j].<span class="built_in">insert</span>(a[i]);</span><br><span class="line">            a[i] += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算mex</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!se[i].<span class="built_in">count</span>(j))&#123;</span><br><span class="line">                cout &lt;&lt; j &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;d---root-m-leaper&quot;&gt;&lt;strong&gt;D - Root M Leaper&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://at</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC272" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC272/"/>
    
    
    <category term="二分" scheme="http://wangxu1905.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>HBCPC2020-河北省大学生程序设计竞赛重现赛</title>
    <link href="http://wangxu1905.github.io/2022/10/08/HBCPC2020-%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B/"/>
    <id>http://wangxu1905.github.io/2022/10/08/HBCPC2020-%E6%B2%B3%E5%8C%97%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B/</id>
    <published>2022-10-08T12:08:27.304Z</published>
    <updated>2022-10-09T03:20:41.936Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="须知"><strong>7-1 须知</strong></h1><p>小河来参加第四届河北省大学生程序设计竞赛。由于这场比赛在线上举行，有很多需要遵守的规则。</p><p>有一条规则是，为了避免对题目内容相关的提问被无关的提问淹没，所有和题目内容无关的询问主题都需要将关联题目设置为<code>7-1</code>。</p><p>比如，如果选手需要去洗手间，则需要发表新主题进行报备并且设置关联题目为<code>7-1</code>。在去洗手间回来之后，需要在这个主题上发表回复报备。监考人员会记录每次使用洗手间开始时间和结束时间，并且删掉这个主题。</p><p>假设小河所在的考场往返洗手间需要5分钟，给出小河发出新主题进行报备的时间和对应主题所设置的关联题目，请计算在符合比赛规则的条件下，他会在什么时候用完洗手间回来。</p><h2 id="输入格式">输入格式:</h2><p>第一行包含一个字符串<em>T</em>(1≤<em>T</em>≤103)，表示数据组数。</p><p>接下来<em>T</em>行，每行包含两个字符串，第一个字符串为<code>HH:MM</code>的形式，表示发表报备主题的时间（从<code>00:00</code>到<code>04:59</code>），第二个字符串为<code>7-X</code>的形式，表示报备主题的关联题目。</p><h2 id="输出格式">输出格式:</h2><p>对于每组数据，输出一行形如<code>HH:MM</code>的字符串，表示小河用完洗手间回来的时间。</p><h2 id="输入样例">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">00:10 7-1</span><br><span class="line">04:30 7-10</span><br><span class="line">03:29 7-2</span><br></pre></td></tr></table></figure><h2 id="输出样例">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00:15</span><br><span class="line">05:05</span><br><span class="line">05:05</span><br></pre></td></tr></table></figure><h2 id="note">Note</h2><p>第一组数据，在提交报备之后小河就可以走了。</p><p>后两组数据，由于关联题目设置有误，此时直接去卫生间违反了比赛规则。因此需要等到<code>05:00</code>比赛结束之后再去，5分钟后也就是<code>05:05</code>回来。</p><h2 id="算法思路">算法思路</h2><p>​ 签到</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3005</span>,mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,s,q,k,a[N],b[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h,m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld:%lld&quot;</span>,&amp;h,&amp;m);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span>(s != <span class="string">&quot;7-1&quot;</span>)  <span class="built_in">puts</span>(<span class="string">&quot;05:05&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mm = h * <span class="number">60</span> + m + <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02lld:%02lld\n&quot;</span>,mm / <span class="number">60</span>,mm % <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="连杀"><strong>7-2 连杀</strong></h1><p>小河和小北组队打PUBG(PLAYERUNKNOWN'S BATTLEGROUNDS)，已经成功挺进了决赛圈。此时战场上还有<em>n</em>个敌人，每个敌人的位置可以用直角坐标系上的坐标来表示。</p><p>小河和小北有着很好的枪法，但是他们急缺子弹。假设他们无法捡到子弹，但是移动速度足够快以至于在最后的绝杀过程中<em>n</em>个敌人的位置不会发生移动。</p><p>假设子弹的轨迹是一条平直的直线，并且他们的枪很强，发出的子弹能够消灭掉任何处在子弹的路径上的敌人。请问他们至少需要多少子弹，才能消灭所有的敌人，获得最终的胜利？</p><h2 id="输入格式-1">输入格式:</h2><p>第一行包含一个数字<em>n</em>(1≤<em>n</em>≤15)，表示有<em>n</em>个敌人。</p><p>接下来<em>n</em>行，每行两个数字<span class="math inline">\(x,y(−10^9≤x,y≤10^9)\)</span>，表示一个敌人的坐标。</p><h2 id="输出格式-1">输出格式:</h2><p>输出一个整数，表示需要的最少的子弹数目.</p><h2 id="输入样例-1">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">0 0</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line">4 4</span><br><span class="line">5 5</span><br><span class="line">6 6</span><br><span class="line">7 7</span><br><span class="line">8 8</span><br><span class="line">9 9</span><br></pre></td></tr></table></figure><h2 id="输出样例-1">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="算法思路-1">算法思路</h2><p>​ 看起来很计算几何，不做了。</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">int</span> h[maxn], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PII st, ed; <span class="comment">// 存起点和终点</span></span><br><span class="line">&#125;lines[maxn * maxn];</span><br><span class="line">PII a[maxn];</span><br><span class="line"><span class="keyword">bool</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">1</span> &lt;&lt; maxn];  <span class="comment">// 考虑前i个点，覆盖了j所需要的最少直线</span></span><br><span class="line"><span class="keyword">int</span> num[maxn * maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span>  <span class="comment">// 判断正负</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span>  <span class="comment">// 浮点数比较大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>-(PII a, PII b)  <span class="comment">// 实现减法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)  <span class="comment">// 实现加法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> t)  <span class="comment">// 向量乘系数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x * t, a.y * t&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>*(PII a, PII b)  <span class="comment">// 点积</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x * b.y - a.y * b.x&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)  <span class="comment">// 实现除法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">on_line</span><span class="params">(PII p, PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> !<span class="built_in">sign</span>((p - a) * (p - b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        a[i] = &#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            lines[k ++] = &#123;a[i], a[j]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">on_line</span>(a[j], lines[i].st, lines[i].ed)) &#123;</span><br><span class="line">                v[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">                t |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = k;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; j ++) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i - <span class="number">1</span>].<span class="built_in">size</span>(); k ++) &#123;  <span class="comment">// 枚举直线</span></span><br><span class="line">                <span class="keyword">int</span> t = v[i - <span class="number">1</span>][k];</span><br><span class="line">                t = num[t];  <span class="comment">// 经过哪些点</span></span><br><span class="line">                <span class="comment">// if(j == 0) cout &lt;&lt; f[i][j | t] &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; &#x27; &#x27; &lt;&lt; (j | t) &lt;&lt; endl;</span></span><br><span class="line">                f[i][j | t] = <span class="built_in">min</span>(f[i][j | t], f[i][j] + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// if((j | t) == (1 &lt;&lt; n) - 1) res = min(res, f[i][j | t]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = n * n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res = <span class="built_in">min</span>(res, f[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ending"><strong>7-4 Ending</strong></h1><p>Rilly is playing an interesting game during COVID-19 quarantine. The game has <em>n</em> different events, and players start from event 1.</p><p>Except the ending event (numbered <em>n</em>), each event has several follow-up events. While being in a specific event, you can advance to one of its follow-up events with a given probability. If you successfully advance to one of the follow-up events, you can never go backward. Or, if you have unluckily failed to advance, you can try to move to other follow-up events. If you have tried all follow-ups and still failed, your game is over.</p><p>Rilly asked Northy, the game developer, to tell him all events and their follow-ups, along with probability to successfully advance, so that you can help him decide his best chance of getting to the ending event.</p><h2 id="输入格式-2">输入格式:</h2><p>First line contains two integers<span class="math inline">\(n,m(2≤n≤5×10^4,1≤m≤10^5)\)</span>, the number of events and the number of follow up relations.</p><p>Then <em>m</em> lines follow, each of which consists of three numbers <em>x</em>,<em>y</em>,<em>p</em>(1≤<em>x</em>,<em>y</em>≤<em>n</em>,0≤<em>p</em>≤100), denoting that you may advance from event <em>x</em> to event <em>y</em> with probability <em>p</em>%.</p><p>It is guaranteed that you can not return to a passed event through the follow-up relations.</p><h2 id="输出格式-2">输出格式:</h2><p>Print a single decimal number, the maximum probability of reaching the ending event. You answer is considered correct if the absolute or relative error doesn't exceed <span class="math inline">\(10^{−6}\)</span>.</p><h2 id="输入样例-2">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 50</span><br><span class="line">1 3 50</span><br><span class="line">2 4 30</span><br><span class="line">3 4 70</span><br></pre></td></tr></table></figure><h2 id="输出样例-2">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.425000</span><br></pre></td></tr></table></figure><h2 id="算法思路-2">算法思路</h2><p>​ 看起来很概率dp，不做。</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(a, s, t) for(int a = (s); a &lt;= (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(a, t, s) for(int a = (t); a &gt;= (s); a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(a, s, t) for(int a = (s); a &lt; (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIO cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">&quot; is &quot;</span> &lt;&lt; x &lt;&lt; <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(...) 111</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, M = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">double</span> p;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; p;</span><br><span class="line">        p /= <span class="number">100.0</span>;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(&#123;v, p&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[n] = <span class="number">1</span>;</span><br><span class="line">    function&lt;<span class="built_in"><span class="keyword">double</span></span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[u] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[u];</span><br><span class="line">        dp[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> ex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[v, p] : g[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="built_in">sort</span>(g[u].<span class="built_in">begin</span>(), g[u].<span class="built_in">end</span>(), [&amp;](pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; o1, pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; o2)&#123;</span><br><span class="line">            <span class="comment">//return o1.second * dp[o1.first] &gt; o2.second * dp[o2.first];</span></span><br><span class="line">            <span class="keyword">double</span> pi = o1.second, pi1 = o2.second;</span><br><span class="line">            <span class="keyword">int</span> i = o1.first, i1 = o2.first;</span><br><span class="line">            <span class="keyword">return</span> pi * dp[i] + (<span class="number">1</span> - pi) * pi1 * dp[i1] &gt; pi1 * dp[i1] + (<span class="number">1</span> - pi1) * pi * dp[i];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[v, p] : g[u])&#123;</span><br><span class="line">            dp[u] += ex * p * dp[v];</span><br><span class="line">            ex *= <span class="number">1</span> - p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; u &lt;&lt; &#x27; &#x27; &lt;&lt; dp[u] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        <span class="keyword">return</span> dp[u];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin); <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (_--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删点"><strong>7-5 删点</strong></h1><p>小河得到了一个包含<em>n</em>个点的无向图。他要选取一个点的集合（可以为空），将其中的点依次删掉。对于选出的这个集合，他还需要选取一个合适的删点顺序，使得删的过程中，任何点在被删掉的时刻依然与至少一个未被删掉的点相连（请参考样例）。</p><p>删着删着，他发现，不是所有的集合都能找到一个满足条件的删点顺序。比如，对于下图：</p><figure><img src="https://images.ptausercontent.com/d60085f4-b645-4753-8a00-4f3fd786713d.jpg" alt="g1.jpg"><figcaption>g1.jpg</figcaption></figure><p>对于集合{4},{1,4},{2,4},{3,4}都不能找出满足条件的方案，因为无论如何，在删除4的时候，它都不与任何点相连——事实上，4在任何时刻都不与其它点相连。</p><p>他希望知道，有多少个不同的集合可以找到一种满足条件的删点顺序。由于方案数可能很大，请输出答案对998244353取模后的结果。</p><p>题目保证不会出现自环。</p><h2 id="输入格式-3">输入格式:</h2><p>第一行两个数字<em>n</em>,<em>m</em>(1≤<em>n</em>,<em>m</em>≤10^6)，表示有<em>n</em>个点和<em>m</em>条边。</p><p>接下来<em>m</em>行，每行两个数字<em>x</em>,<em>y</em>(1≤<em>x</em>,<em>y</em>≤<em>n</em>,<em>x</em>\=<em>y</em>)，表示<em>x</em>和<em>y</em>之间有一条边相连。</p><h2 id="输出格式-3">输出格式:</h2><p>输出存在符合条件删点顺序的集合个数</p><h2 id="输入样例-3">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h2 id="输出样例-3">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure><h2 id="样例解释">样例解释</h2><p>下面是满足条件的31种方案：</p><p>∅,{1},{2},{3},{4},{5},{1,2},{1,3},{1,4},{1,5},{2,3},{2,4},{2,5},{3,4},{3,5},{4,5},{1,2,3},{1,2,4},{1,2,5},{1,3,4},{1,3,5},{1,4,5},{2,3,4},{2,3,5},{2,4,5},{3,4,5},{1,2,3,4}{1,2,3,5}{1,2,4,5}{1,3,4,5}{2,3,4,5}</p><p>以{1,2,5}为例，按照1−2−5的顺序删除即可满足要求，如下图所示：</p><figure><img src="https://images.ptausercontent.com/d62b5946-3068-438f-8c1f-13d70ea9f2b9.jpg" alt="g2.jpg"><figcaption>g2.jpg</figcaption></figure><p>唯一一个找不到满足条件删除顺序的集合是{1,2,3,4,5}，因为不管怎么删，最后一个点在删除的时候一定不与任何点相邻</p><h2 id="算法思路-3">算法思路</h2><p>​ 我们发现只要一个连通分量的点集合，其所有真子集都是符合情况的。所以只需要通过dfs求所有连通分量的点的个数，若某个连通分量有n个点，则方案数为<span class="math inline">\(2^n-1\)</span>,而且各个连通分量的方案数是累乘的。</p><h2 id="ac代码-3">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],vis[N],num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; mar[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mar[u].<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = mar[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            res += <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) num[i] = num[i - <span class="number">1</span>] * <span class="number">2</span> % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        mar[u].<span class="built_in">push_back</span>(v),mar[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            res = (res * (num[<span class="built_in">dfs</span>(i)] - <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="划分"><strong>7-7 划分</strong></h1><p>小河认为一个数组是强大的，当且仅当其中所有数字的和不小于 <em>l</em> 且不大于 <em>r</em>。</p><p>他得到了一个长度为 <em>n</em> 的数组，希望从中划分出若干个强大的连续子数组。比如，对于数组 [1,−2,−3,4] 以及 <em>l</em>=<em>r</em>=1，可以划分出 [1],[−3,4] 两个满足条件的强大的连续子数组。</p><p>小河是贪心的。他希望知道，对于给定的数组，最多能够划分出多少个强大的连续子数组。注意，并不一定要用到数组中的每一个数。</p><h2 id="输入格式-4">输入格式:</h2><p>本题包含多组数据。</p><p>第一行一个整数 <span class="math inline">\(T(1≤T≤5×10^3)\)</span> 表示数据组数。</p><p>对于每组数据，第一行三个数字<span class="math inline">\(n,l,r(1≤n≤5×10^3,−10^9≤l≤r≤10^9)\)</span>，表示数组长度和强大的数组所要求的和的最小值及最大值。</p><p>接下来一行包含数组中的<em>n</em>个数字<span class="math inline">\(a_{1},a_2,...,a_n(∣a_i∣≤10^9)\)</span>。</p><p>题目保证$ ∑n≤5×10^3$。</p><h2 id="输出格式-4">输出格式:</h2><p>对于每组数据，输出一行一个整数，即最多能分割出的强大子数组的个数</p><h2 id="输入样例-4">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 2 10</span><br><span class="line">-1 2 -3 4 -5 6 -7 8 -9 10</span><br></pre></td></tr></table></figure><h2 id="输出样例-4">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="算法思路-4">算法思路</h2><p>​ dp[i]表示以i为结尾的最多分割出的个数，然后从i到1遍历，假设下标j满足情况，<span class="math inline">\(dp[i] = max(dp[j - 1] + 1,dp[i])\)</span></p><h2 id="ac代码-4">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>,mod = <span class="number">998244353</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],dp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,res = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span>; --j)&#123;</span><br><span class="line">            now += a[j];</span><br><span class="line">            <span class="keyword">if</span>(now &gt;= l &amp;&amp; now &lt;= r)</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[j - <span class="number">1</span>] + <span class="number">1</span>,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)  <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="not-and"><strong>7-8 Not-And</strong></h1><p>NAND(Not-And) is a bitwise operation defined as follows: <em>a</em> NAND <em>b</em>:=NOT (<em>a</em> AND <em>b</em>) .</p><p>Rilly is given an array <em>a</em> which consists of <em>n</em> 32-bit unsigned integers. He asks you to perform two types of operations for him, which are described below in detail.</p><h2 id="输入格式-5">输入格式:</h2><p>The first line contains two integers <span class="math inline">\(n,q(1≤n,q≤10^5)\)</span>, length of the array and number of requests.</p><p>The second line contains <em>n</em> integers <span class="math inline">\(a_i(0≤a_i&lt;2^{32})\)</span> .</p><p>Then <em>q</em> lines follow, each of which contains a request of one of the two types:</p><ol type="1"><li><code>1 l r x</code> <span class="math inline">\((1≤l≤r≤n,0≤x&lt;2^{32})\)</span>, denoting that you need to calculate and output the answer of x NAND <span class="math inline">\(a_l\)</span> NAND <span class="math inline">\(a_{l+1}\)</span> NAND ⋯ NAND <span class="math inline">\(a_r\)</span>.</li><li><code>2 p x</code> <span class="math inline">\((1≤p≤n,0≤x&lt;2^{32})\)</span>, denoting that you need to replace the number at position <em>p</em> with the given <em>x</em>.</li></ol><h2 id="输出格式-5">输出格式:</h2><p>For every request of the first type, output a line containing the answer.</p><h2 id="输入样例-5">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">571 342 228 152 192</span><br><span class="line">1 1 5 409</span><br><span class="line">2 1 414</span><br><span class="line">1 1 2 100</span><br><span class="line">2 4 341</span><br><span class="line">1 2 5 315</span><br></pre></td></tr></table></figure><h2 id="输出样例-5">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4294967103</span><br><span class="line">4294966957</span><br><span class="line">4294967103</span><br></pre></td></tr></table></figure><h2 id="算法思路-5">算法思路</h2><p>​ 首先维护区间NAND的值的话，不太行，NAND并不符合结合律，所以要采取其他办法。</p><p>​ 我们发现可以维护二进制每位的结果，<span class="math inline">\(v[i][0]\)</span>表示第i个二进制位上0与区间[l,r]结果NAND的值，<span class="math inline">\(v[i][1]\)</span>表示第i个二进制位上1与区间[l,r]结果NAND的值，那么我们可以得到<span class="math inline">\(u.v[i][0] = r.v[i][l.v[i][0]],u.v[i][1] = r.v[i][l.v[i][1]]\)</span></p><h2 id="ac代码-5">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> v[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u,Node &amp;l,Node &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">            u.v[i][j] = r.v[i][l.v[i][j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u],tr[u &lt;&lt; <span class="number">1</span>],tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u] = &#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                tr[u].v[i][j] = !(j &amp; (a[l] &gt;&gt; i &amp; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                tr[u].v[i][j] = !(j &amp; (c &gt;&gt; i &amp; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,x,c);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,c);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= x &amp;&amp; tr[u].r &lt;= y)    <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//分成三种</span></span><br><span class="line">    <span class="keyword">if</span>(y &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,x,y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; mid)    <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y);</span><br><span class="line">        Node res;</span><br><span class="line">        <span class="built_in">pushup</span>(res,l,r);</span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> op,l,r,x,p;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            <span class="keyword">auto</span> t = <span class="built_in">query</span>(<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//根据x的每位，确定是0还是1NAND区间[1,n]的值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">                res += t.v[i][x &gt;&gt; i &amp; <span class="number">1</span>] &lt;&lt; i;</span><br><span class="line">            cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; p &gt;&gt; x;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,p,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tang-hulu"><strong>7-9 Tang Hulu</strong></h1><p>Rilly wants to give Northy some <em>Tang Hulu</em> as his birthday gift, and he bought <em>n</em> <strong>different</strong> <em>Shan Zha Guo</em>s and <em>m</em> <strong>different</strong> sticks to make some.</p><figure><img src="https://images.ptausercontent.com/04905b6e-c635-4edf-bf0f-efdaa27fb37b.png" alt="pick-c.png"><figcaption>pick-c.png</figcaption></figure><p>First, Rilly numbered the <em>Shan Zha Guo</em>s from 1 to <em>n</em>. He has a strange taste for <em>Tang Hulu</em>: for two <em>Shan Zha Guo</em>s numbered <em>i</em>,<em>j</em> that are adjacent on a <em>Tang Hulu</em>, each <em>Shan Zha Guo</em> with its index between <em>i</em> and <em>j</em> must be on the same <em>Tang Hulu</em> as them and be placed above them.</p><p>For example, <a href="enumerated%20from%20top%20to%20bottom">2,3,1,4</a> is a valid enumeration of <em>Shan Zha Guo</em>s for a <em>Tang Hulu</em>, because what's between 3,1 is {2}, and 2 is above 3 and 1, and numbers between 1,4 are {2,3}, and obviously they are above 1 and 4.</p><p>[1,4] is not valid, since {2,3} is not on it.</p><p>[1,4,2,3] is also not, since 3 is between 4,2, and it is placed below them.</p><p>Assume that all <em>n</em> <em>Shan Zha Guo</em>s and <em>m</em> sticks must be used, and each <em>Tang Hulu</em> mustn't be empty. Find out how many valid ways there are to make the <em>Tang Hulu</em>s. Two ways differ iff there is some stick which is equipped with different enumeration of <em>Shan Zha Guo</em>s.</p><p>As the number might be large, you only need to print the answer modulo 998244353.</p><h2 id="输入格式-6">输入格式:</h2><p>The first line contains an integer <em>T</em>(1≤<em>T</em>≤106), the number of test cases.</p><p>Then <em>T</em> lines follow, each line contains two integers <em>n</em>,<em>m</em>(1≤<em>n</em>≤109,1≤<em>m</em>≤106), respectively denoting the number of <em>Shan Zha Guo</em>s and sticks.</p><p>It's guaranteed that ∑<em>m</em>≤106.</p><h2 id="输出格式-6">输出格式:</h2><p>Print a single integer, the answer mod 998244353.</p><h2 id="输入样例-6">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4 2</span><br></pre></td></tr></table></figure><h2 id="输出样例-6">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="note-1">Note</h2><p>The valid ways are:</p><p><span class="math inline">\([1],[2,3,4][1],[3,4,2][1,2],[3,4][2,1],[3,4][1,2,3], \\ [4] [2,3,1],[4][2,3,4],[1][3,4,2],[1][3,4],[1,2][3,4], \\ [2,1][4], [1,2,3][4],[2,3,1][1],[3,2,4][1],[4,3,2][1,2], \\ [4,3][2,1],[4,3][2,1,3],[4][3,2,1],[4][3,2,4],[1][4,3,2],\\ [1][4,3],[1,2][4,3],[2,1][4],[2,1,3][4],[3,2,1]\)</span></p><h2 id="算法思路-6">算法思路</h2><p>​ 不懂，先放着</p><h2 id="ac代码-6">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(a, s, t) for(int a = (s); a &lt;= (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(a, t, s) for(int a = (t); a &gt;= (s); a--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(a, s, t) for(int a = (s); a &lt; (t); a++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIO cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">&quot; is &quot;</span> &lt;&lt; x &lt;&lt; <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fk(...) 111</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, M = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">// tourist&#x27;s template</span></span><br><span class="line"><span class="function">T <span class="title">inverse</span><span class="params">(T a, T m)</span> </span>&#123;</span><br><span class="line">  T u = <span class="number">0</span>, v = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">    T t = m / a;</span><br><span class="line">    m -= t * a; <span class="built_in">swap</span>(a, m);</span><br><span class="line">    u -= t * v; <span class="built_in">swap</span>(u, v);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">assert</span>(m == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modular</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> Type = <span class="keyword">typename</span> decay&lt;<span class="keyword">decltype</span>(T::value)&gt;::type;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="title">Modular</span><span class="params">()</span> : value() &#123;</span>&#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="built_in">Modular</span>(<span class="keyword">const</span> U&amp; x) &#123;</span><br><span class="line">    value = <span class="built_in">normalize</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Type <span class="title">normalize</span><span class="params">(<span class="keyword">const</span> U&amp; x)</span> </span>&#123;</span><br><span class="line">    Type v;</span><br><span class="line">    <span class="keyword">if</span> (-<span class="built_in">mod</span>() &lt;= x &amp;&amp; x &lt; <span class="built_in">mod</span>()) v = <span class="keyword">static_cast</span>&lt;Type&gt;(x);</span><br><span class="line">    <span class="keyword">else</span> v = <span class="keyword">static_cast</span>&lt;Type&gt;(x % <span class="built_in">mod</span>());</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v += <span class="built_in">mod</span>();</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">const</span> Type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">U</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;U&gt;(value); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="keyword">static</span> Type <span class="title">mod</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> T::value; &#125;</span><br><span class="line"> </span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">if</span> ((value += other.value) &gt;= <span class="built_in">mod</span>()) value -= <span class="built_in">mod</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">if</span> ((value -= other.value) &lt; <span class="number">0</span>) value += <span class="built_in">mod</span>(); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; Modular&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> U&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="built_in">Modular</span>(other); &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; Modular&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> U&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="built_in">Modular</span>(other); &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>++() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="number">1</span>; &#125;</span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>--() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="number">1</span>; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>++(<span class="keyword">signed</span>) &#123; <span class="function">Modular <span class="title">result</span><span class="params">(*<span class="keyword">this</span>)</span></span>; *<span class="keyword">this</span> += <span class="number">1</span>; <span class="keyword">return</span> result; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>--(<span class="keyword">signed</span>) &#123; <span class="function">Modular <span class="title">result</span><span class="params">(*<span class="keyword">this</span>)</span></span>; *<span class="keyword">this</span> -= <span class="number">1</span>; <span class="keyword">return</span> result; &#125;</span><br><span class="line">  Modular <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Modular</span>(-value); &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;is_same&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type, <span class="keyword">signed</span>&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">    <span class="keyword">uint64_t</span> x = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(value) * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(rhs.value);</span><br><span class="line">    <span class="keyword">uint32_t</span> xh = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(x &gt;&gt; <span class="number">32</span>), xl = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(x), d, m;</span><br><span class="line">    <span class="built_in"><span class="keyword">asm</span></span>(</span><br><span class="line">      <span class="string">&quot;divl %4; \n\t&quot;</span></span><br><span class="line">      : <span class="string">&quot;=a&quot;</span> (d), <span class="string">&quot;=d&quot;</span> (m)</span><br><span class="line">      : <span class="string">&quot;d&quot;</span> (xh), <span class="string">&quot;a&quot;</span> (xl), <span class="string">&quot;r&quot;</span> (<span class="built_in">mod</span>())</span><br><span class="line">    );</span><br><span class="line">    value = m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    value = <span class="built_in">normalize</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(value) * <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(rhs.value));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;is_same&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type, <span class="keyword">long</span> <span class="keyword">long</span>&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> q = <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;(value) * rhs.value / <span class="built_in">mod</span>());</span><br><span class="line">    value = <span class="built_in">normalize</span>(value * rhs.value - q * <span class="built_in">mod</span>());</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U = T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;!is_integral&lt;<span class="keyword">typename</span> Modular&lt;U&gt;::Type&gt;::value, Modular&gt;::type&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Modular&amp; rhs) &#123;</span><br><span class="line">    value = <span class="built_in">normalize</span>(value * rhs.value);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  Modular&amp; <span class="keyword">operator</span>/=(<span class="keyword">const</span> Modular&amp; other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> *= <span class="built_in">Modular</span>(<span class="built_in">inverse</span>(other.value, <span class="built_in">mod</span>())); &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">const</span> Type&amp; <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Modular&amp; x)</span> </span>&#123; <span class="keyword">return</span> x.value; &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;U&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;U&gt;&amp; rhs);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modular&lt;U&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;U&gt;&amp; rhs);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> V, <span class="keyword">typename</span> U&gt;</span><br><span class="line">  <span class="keyword">friend</span> V&amp; <span class="keyword">operator</span>&gt;&gt;(V&amp; stream, Modular&lt;U&gt;&amp; number);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Type value;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> lhs.value == rhs.value; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> lhs == Modular&lt;T&gt;(rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>==(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) == rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>!=(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> !(lhs == rhs); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> lhs.value &lt; rhs.value; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>+(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) += rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>-(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) -= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>*(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) *= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(<span class="keyword">const</span> Modular&lt;T&gt;&amp; lhs, U rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; Modular&lt;T&gt; <span class="keyword">operator</span>/(U lhs, <span class="keyword">const</span> Modular&lt;T&gt;&amp; rhs) &#123; <span class="keyword">return</span> Modular&lt;T&gt;(lhs) /= rhs; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">Modular&lt;T&gt; <span class="title">power</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; a, <span class="keyword">const</span> U&amp; b)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(b &gt;= <span class="number">0</span>);</span><br><span class="line">  Modular&lt;T&gt; x = a, res = <span class="number">1</span>;</span><br><span class="line">  U p = b;</span><br><span class="line">  <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">    x *= x;</span><br><span class="line">    p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsZero</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; number)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">number</span>() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> Modular&lt;T&gt;&amp; number)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">to_string</span>(<span class="built_in">number</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> T&gt;</span><br><span class="line">U&amp; <span class="keyword">operator</span>&lt;&lt;(U&amp; stream, <span class="keyword">const</span> Modular&lt;T&gt;&amp; number) &#123;</span><br><span class="line">  <span class="keyword">return</span> stream &lt;&lt; <span class="built_in">number</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> T&gt;</span><br><span class="line">U&amp; <span class="keyword">operator</span>&gt;&gt;(U&amp; stream, Modular&lt;T&gt;&amp; number) &#123;</span><br><span class="line">  <span class="keyword">typename</span> common_type&lt;<span class="keyword">typename</span> Modular&lt;T&gt;::Type, <span class="keyword">long</span> <span class="keyword">long</span>&gt;::type x;</span><br><span class="line">  stream &gt;&gt; x;</span><br><span class="line">  number.value = Modular&lt;T&gt;::<span class="built_in">normalize</span>(x);</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> md = <span class="number">998244353</span>, md2 = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">using</span> Mint = Modular&lt;std::integral_constant&lt;decay&lt;<span class="keyword">decltype</span>(md)&gt;::type, md&gt;&gt;;    </span><br><span class="line">map&lt;<span class="keyword">int</span>, Mint&gt; g[<span class="number">1000005</span>];</span><br><span class="line"><span class="function">Mint <span class="title">qmi</span><span class="params">(Mint a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    Mint res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mint <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    Mint t = <span class="built_in">qmi</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qmi</span>(t, md - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mint <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> md2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == m) <span class="keyword">return</span> <span class="built_in">calc</span>(<span class="number">2</span>, n);</span><br><span class="line">    <span class="keyword">if</span>(g[m].<span class="built_in">count</span>(n)) <span class="keyword">return</span> g[m][n];</span><br><span class="line">    Mint &amp;res = g[m][n];</span><br><span class="line">    g[m][n] = <span class="built_in">dfs</span>(m, n - <span class="number">1</span>) + md2 * <span class="built_in">dfs</span>(m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> g[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n == m)&#123;</span><br><span class="line">        Mint ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, n) ans *= i;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n--, m--;</span><br><span class="line">    Mint ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n - m + <span class="number">1</span>, n) ans *= i;</span><br><span class="line">    cout &lt;&lt; <span class="function">ans * <span class="title">qmi</span><span class="params">(<span class="number">2</span>, n - m)</span> * <span class="params">(m + <span class="number">1</span>)</span> &lt;&lt; &#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FIO;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin); <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> be = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="number">1.0</span> * (<span class="built_in">clock</span>() - be) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="奖牌"><strong>7-10 奖牌</strong></h1><p>小河发现竞赛圈有个奇怪的现象，人们称呼奖牌的时候，喜欢使用化学符号<code>Au</code>、<code>Ag</code>和<code>Cu</code>来表示金、银、铜奖，而不是官方的<code>gold</code>、<code>silver</code>和<code>bronze</code>。</p><p>他非常无聊，于是就问你，奖牌官方称呼的单词对应的惯用符号是什么。如果他对你说<code>gold</code>，你就要回答他<code>Au</code>，以此类推</p><h2 id="输入格式-7">输入格式:</h2><p>输入一行包含一个字符串，<code>gold</code>、<code>silver</code>或者<code>bronze</code></p><h2 id="输出格式-7">输出格式:</h2><p>输出对应的惯用符号。</p><h2 id="输入样例-7">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gold</span><br></pre></td></tr></table></figure><h2 id="输出样例-7">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Au</span><br></pre></td></tr></table></figure><h2 id="算法思路-7">算法思路</h2><p>​ 签到</p><h2 id="ac代码-7">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">int</span> h[maxn], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">&quot;gold&quot;</span>) cout &lt;&lt; <span class="string">&quot;Au&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;silver&quot;</span>) cout &lt;&lt; <span class="string">&quot;Ag&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Cu&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="挤牙膏"><strong>7-12 挤牙膏</strong></h1><p>小河和小北比赛挤牙膏。</p><p>如果用力度<em>f</em>去挤余量为<em>c</em>的牙膏管，会挤出<span class="math inline">\(min \{ c,⌊\frac {c*f} {10^{9}}⌋\}\)</span>个单位的牙膏（其中符号 ⌊<em>x</em>⌋表示对 <em>x</em> 向下取整）。</p><p>小河和小北共比了<em>m</em>轮，给出小河和小北初始的牙膏管余量<em>c</em>1,<em>c</em>2，每轮的力度<span class="math inline">\(f_{i1},f_{i2}\)</span>，计算最后谁挤出的牙膏多。如果小河挤出的多，则小河胜利，输出<code>Rilly</code>，否则输出<code>Northy</code>。</p><h2 id="输入格式-8">输入格式:</h2><p>本题包含多组数据。</p><p>第一行包含一个数字<em>T</em>(1≤<em>T</em>≤10^6)，表示数据组数。</p><p>对于每组数据，第一行包含三个数字<em>m</em>,<em>c</em>1,<em>c</em>2(1≤<em>m</em>≤10^6,0≤<em>c</em>1,<em>c</em>2≤ 10^9)。</p><p>接下来<em>m</em>行，第<em>i</em>行包含两个数字<span class="math inline">\(f_{i1},f_{i2}\)</span>(0≤<span class="math inline">\(f_{i1},f_{i2}\)</span>≤10^9)，表示第<em>i</em>轮小河和小北挤牙膏的力度。</p><p>题目保证 ∑<em>m</em>≤10^6。</p><h2 id="输出格式-8">输出格式:</h2><p>对于每组数据，输出一行<code>Rilly</code>或<code>Northy</code>，分别表示小河和小北胜利。</p><h2 id="输入样例1">输入样例1:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 1000000000 100000000</span><br><span class="line">1 100000000</span><br></pre></td></tr></table></figure><h2 id="输出样例1">输出样例1:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Northy</span><br></pre></td></tr></table></figure><h2 id="算法思路-8">算法思路</h2><p>​ 数据量很小，直接模拟即可</p><h2 id="ac代码-8">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3005</span>,mod = <span class="number">998244353</span>,M = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,s,q,k,a[N],b[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1,c2;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>,sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> f1,f2;</span><br><span class="line">        cin &gt;&gt; f1 &gt;&gt; f2;</span><br><span class="line">        sum1 += <span class="built_in">min</span>(c1,c1 * f1 / M);</span><br><span class="line">        sum2 += <span class="built_in">min</span>(c2,c2 * f2 / M);</span><br><span class="line">        c1 -= <span class="built_in">min</span>(c1,c1 * f1 / M);</span><br><span class="line">        c2 -= <span class="built_in">min</span>(c2,c2 * f2 / M);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum1 &gt; sum2) <span class="built_in">puts</span>(<span class="string">&quot;Rilly&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;Northy&quot;</span>);</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="游戏"><strong>7-6 游戏</strong></h1><p>前不久小河和小北沉迷上了一个游戏《少年三国志2》，一段时间之后小河就玩腻了，于是他自己仿照《少年三国志2》编了一个新的简单小游戏，并邀请小北一起来玩这个新游戏。这个游戏规则如下：一共有4种英雄，他们都有奇怪的名字，分别叫做：Gigi，Nick，Thai，May。在游戏一开始的时候，小河和小北分别会有<em>n</em>个英雄，这些英雄必定都是上面4种中的一个。这2<em>n</em>个英雄里面的每一个都有一个攻击序列{<em>a<strong>i<em>}，这个序列是1,2,3,…,</em>n<em>的一个排列，这个英雄会先攻击对方编号为</em>a<em>1的英雄，直到将其淘汰（生命值小于等于0），然后再攻击对方编号为</em>a<em>2的英雄直到将其淘汰，然后攻击</em>a<em>3，以此类推。也就是说</em>a<em>1,</em>a<em>2,…,</em>a</strong>n</em>中第一个没有被淘汰的敌方英雄为他的<strong>当前攻击对象</strong>。每个英雄都有生命值、攻击力、法力上限这三个基本属性，如下表所示：</p><table><thead><tr class="header"><th>英雄名</th><th>生命值</th><th>攻击力</th><th>法力上限</th></tr></thead><tbody><tr class="odd"><td>Gigi</td><td>900</td><td>65</td><td>100</td></tr><tr class="even"><td>Nick</td><td>1000</td><td>52</td><td>80</td></tr><tr class="odd"><td>Thai</td><td>1500</td><td>41</td><td>120</td></tr><tr class="even"><td>May</td><td>750</td><td>77</td><td>50</td></tr></tbody></table><p>在游戏开始后小河和小北轮流进行操作，小河先操作，直到有一方所有的英雄都被淘汰为止。在每一轮中，每一方的操作都是按照下面的流程进行的：按照编号从小到大依次处理每一个没有被淘汰的我方英雄，这个英雄会先恢复10点法力值（初始值为0），如果法力值达到了上限则这个英雄的这次攻击会<strong>强化</strong>为一次大招（并将法力值清零），否则进行一次普通攻击，作用对象都为他的当前攻击对象。普通攻击会对当前攻击对象造成英雄攻击力点伤害（在没有护盾的情况下，效果为敌方英雄扣除我方攻击英雄的攻击力点生命值）。每个英雄的大招如下：</p><ol type="1"><li>Gigi：先对当前攻击对象进行一次普通攻击，然后对所有没有被淘汰的己方英雄恢复10点生命值。</li><li>Nick：立即获得120点护盾，<strong>护盾值的上限为200点</strong>。当Nick受到伤害时，会先用护盾值抵扣等额生命值的伤害。比如说当前Nick有100点护盾，此时受到120点伤害，会扣除他全部100点护盾和20点生命。</li><li>Thai：立即获得两次伤害减免效果，也就是说接下来Thai受到的两次伤害（不管伤害量是多少）都会被抵消。这个效果可以叠加，也就是说如果Thai在使用完大招之后没有受到伤害，再次使用大招会累计获得4次伤害减免效果！</li><li>May：对当前攻击对象进行一次普通攻击，<strong>然后</strong>标记当前攻击对象。May对他标记的对象的每次攻击伤害都会提升50点（多次标记效果不叠加）。</li></ol><p>如果当前操作方的某个英雄攻击之后，对方的所有英雄都被淘汰掉了，则当前操作方胜利，并且剩余的英雄不再进行操作。</p><h2 id="输入格式-9">输入格式:</h2><p>输入数据的第一行仅有一个整数<em>T</em>(1≤<em>T</em>≤300)表示测试数据组数。</p><p>对于每组测试数据，第一行一个整数<em>n</em>(1≤<em>n</em>≤10)，表示双方的英雄数目。</p><p>接下来2<em>n</em>行，每行表示一个英雄，其中前<em>n</em>行按照编号从1到<em>n</em>的顺序给出小河的英雄，接下来<em>n</em>行按照同样的顺序给出小北的英雄。对于这2<em>n</em>行，每一行都有如下格式：Type <span class="math inline">\(a_1,a_2,⋯,a_n\)</span></p><p>其中<code>Type</code>为<code>Gigi</code>、<code>Nick</code>、<code>Thai</code>、<code>May</code>中的一个，表示英雄的类型。<span class="math inline">\(a_1,a_2,⋯,a_n\)</span>为这个英雄的攻击序列</p><h2 id="输出格式-9">输出格式:</h2><p>如果<strong>小河</strong>获胜（最终小北的英雄全部被淘汰），输出一行<strong>YES</strong>，接下来一行依次输出小河的<em>n</em>个英雄的生命值（被淘汰的英雄输出0）。如果<strong>小北</strong>获胜，输出一行<strong>NO</strong>，接下来一行依次输出小北的<em>n</em>个英雄的生命值（被淘汰的英雄输出0）。</p><h2 id="输入样例-8">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">Gigi 1</span><br><span class="line">Nick 1</span><br><span class="line">1</span><br><span class="line">Thai 1</span><br><span class="line">May 1</span><br></pre></td></tr></table></figure><h2 id="输出样例-8">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">36</span><br><span class="line">NO</span><br><span class="line">135</span><br></pre></td></tr></table></figure><h2 id="算法思路-9">算法思路</h2><p>​ 没过，暂时没改好bug</p><h2 id="ac代码-9">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> st; <span class="comment">// 判断是否死亡</span></span><br><span class="line">    <span class="keyword">int</span> hp, max_hp, pro, cnt; <span class="comment">// 血量，最大血量，护盾值，免伤次数</span></span><br><span class="line">    <span class="keyword">int</span> attack, blue, max_blue; <span class="comment">// 伤害，当前法力值, 最大法力值</span></span><br><span class="line">    <span class="keyword">int</span> type; <span class="comment">// 记录类别</span></span><br><span class="line">    <span class="keyword">int</span> series[maxn]; <span class="comment">// 攻击序列</span></span><br><span class="line">    <span class="keyword">int</span> label[maxn]; <span class="comment">// 记录标记</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">int</span> status[<span class="number">4</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">900</span>, <span class="number">65</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="number">52</span>, <span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1500</span>, <span class="number">41</span>, <span class="number">120</span>&#125;,</span><br><span class="line">    &#123;<span class="number">750</span>, <span class="number">77</span>, <span class="number">50</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;string, <span class="keyword">int</span>&gt; mp &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Gigi&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Nick&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Thai&quot;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;May&quot;</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Node a[maxn], b[maxn]; <span class="comment">// 两个人的英雄</span></span><br><span class="line"><span class="keyword">int</span> lasta, lastb;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_ --) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        lasta = n, lastb = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            string type; cin &gt;&gt; type;</span><br><span class="line">            <span class="keyword">int</span> d = mp[type];</span><br><span class="line">            a[i].st = <span class="literal">false</span>; a[i].type = d;</span><br><span class="line">            a[i].max_hp = status[d][<span class="number">0</span>];</span><br><span class="line">            a[i].hp = status[d][<span class="number">0</span>], a[i].attack = status[d][<span class="number">1</span>], a[i].max_blue = status[d][<span class="number">2</span>];</span><br><span class="line">            a[i].blue = <span class="number">0</span>; a[i].pro = <span class="number">0</span>;</span><br><span class="line">            a[i].cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) cin &gt;&gt; a[i].series[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) a[i].label[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            string type; cin &gt;&gt; type;</span><br><span class="line">            <span class="keyword">int</span> d = mp[type];</span><br><span class="line">            b[i].st = <span class="literal">false</span>; b[i].type = d;</span><br><span class="line">            b[i].max_hp = status[d][<span class="number">0</span>];</span><br><span class="line">            b[i].cnt = <span class="number">0</span>;</span><br><span class="line">            b[i].hp = status[d][<span class="number">0</span>], b[i].attack = status[d][<span class="number">1</span>], b[i].max_blue = status[d][<span class="number">2</span>];</span><br><span class="line">            b[i].blue = <span class="number">0</span>; b[i].pro = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) cin &gt;&gt; b[i].series[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) b[i].label[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lastb == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!a[i].st) &#123;</span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                    a[i].blue += <span class="number">10</span>;</span><br><span class="line">                    a[i].blue = <span class="built_in">min</span>(a[i].blue, a[i].max_blue);</span><br><span class="line">                    <span class="keyword">if</span>(a[i].blue == a[i].max_blue) flag = <span class="literal">true</span>; <span class="comment">// 如果达到法力值上限，强化大招</span></span><br><span class="line">                    <span class="keyword">if</span>(flag) &#123; <span class="comment">// 释放大招</span></span><br><span class="line">                        a[i].blue = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span>(a[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); <span class="comment">// 先用护盾值抵挡伤害</span></span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; <span class="comment">// 标记为死亡</span></span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(!a[j].st) &#123;  <span class="comment">// 如果没死亡，就加10滴血</span></span><br><span class="line">                                    a[j].hp += <span class="number">10</span>;</span><br><span class="line">                                    a[j].hp = <span class="built_in">min</span>(a[j].hp, a[j].max_hp);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a[i].pro += <span class="number">120</span>;</span><br><span class="line">                            a[i].pro = <span class="built_in">min</span>(a[i].pro, <span class="number">200ll</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123; <span class="comment">// 找到第一个没死的</span></span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;  <span class="comment">// 如果有免伤次数</span></span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a[i].cnt += <span class="number">2</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i].type == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(a[k].label[target])&#123;</span><br><span class="line">                                                atk = a[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    a[i].label[target] ++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> d = a[i].type;</span><br><span class="line">                        <span class="keyword">if</span>(d == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(a[k].label[target])&#123;</span><br><span class="line">                                                atk = a[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>;</span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = a[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!b[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b[target].cnt) &#123;</span><br><span class="line">                                        b[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = a[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, b[target].pro); </span><br><span class="line">                                        atk -= minw, b[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) b[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(b[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            b[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lastb --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lastb == <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lasta == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!b[i].st) &#123;</span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                    b[i].blue += <span class="number">10</span>;</span><br><span class="line">                    b[i].blue = <span class="built_in">min</span>(b[i].blue, b[i].max_blue);</span><br><span class="line">                    <span class="keyword">if</span>(b[i].blue == b[i].max_blue) flag = <span class="literal">true</span>; </span><br><span class="line">                    <span class="keyword">if</span>(flag) &#123; </span><br><span class="line">                        b[i].blue = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span>(b[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro);</span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(!b[j].st) &#123;  </span><br><span class="line">                                    b[j].hp += <span class="number">10</span>;</span><br><span class="line">                                    b[j].hp = <span class="built_in">min</span>(b[j].hp, b[j].max_hp);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123; </span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            b[i].pro += <span class="number">120</span>;</span><br><span class="line">                            b[i].pro = <span class="built_in">min</span>(b[i].pro, <span class="number">200ll</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123; </span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;  </span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            b[i].cnt += <span class="number">2</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[i].type == <span class="number">3</span>)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[k].label[target])&#123;</span><br><span class="line">                                                atk = b[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro);</span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    b[i].label[target] ++;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> d = b[i].type;</span><br><span class="line">                        <span class="keyword">if</span>(d == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[k].label[target])&#123;</span><br><span class="line">                                                atk = b[i].attack + <span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro); </span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; </span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                                <span class="keyword">int</span> target = b[i].series[j];</span><br><span class="line">                                <span class="keyword">if</span>(!a[target].st) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(a[target].cnt) &#123;</span><br><span class="line">                                        a[target].cnt --;</span><br><span class="line">                                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="keyword">int</span> atk = b[i].attack;</span><br><span class="line">                                        <span class="keyword">int</span> minw = <span class="built_in">min</span>(atk, a[target].pro); <span class="comment">// 先用护盾值抵挡伤害</span></span><br><span class="line">                                        atk -= minw, a[target].pro -= minw;</span><br><span class="line">                                        <span class="keyword">if</span>(atk) a[target].hp -= atk;</span><br><span class="line">                                        <span class="keyword">if</span>(a[target].hp &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                            a[target].st = <span class="literal">true</span>; <span class="comment">// 标记为死亡</span></span><br><span class="line">                                            lasta --;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lasta == <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].st) a[i].hp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">1</span>) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>; </span><br><span class="line">                cout &lt;&lt; a[i].hp;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i].st) b[i].hp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">1</span>) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                cout &lt;&lt; b[i].hp;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;须知&quot;&gt;&lt;strong&gt;7-1 须知&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;小河来参加第四届河北省大学生程序设计竞赛。由于这场比赛在线上举行，有很多需要遵守的规则。&lt;/p&gt;
&lt;p&gt;有一条规则是，为了避免对题目内容相</summary>
      
    
    
    
    <category term="pta" scheme="http://wangxu1905.github.io/categories/pta/"/>
    
    <category term="省赛训练" scheme="http://wangxu1905.github.io/categories/pta/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
    <category term="线段树" scheme="http://wangxu1905.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 269</title>
    <link href="http://wangxu1905.github.io/2022/10/08/AtCoder%20Beginner%20Contest%20269/"/>
    <id>http://wangxu1905.github.io/2022/10/08/AtCoder%20Beginner%20Contest%20269/</id>
    <published>2022-10-08T10:03:19.742Z</published>
    <updated>2022-10-08T10:47:04.761Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="c---submask"><strong>C - Submask</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc269/tasks/abc269_c">C - Submask (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 给定n，求出二进制数的的所有子项。子项就是对于n的每一个二进制位1的位，可以取0或者1,0的话必须取0。</p><p>​ n最多有15位是1</p><h2 id="算法思路">算法思路</h2><p>​ 无脑dfs，针对每一个二进制位选不选1，进行dfs,O(2^15)时间很够</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">-1</span>)&#123;</span><br><span class="line">        se.<span class="built_in">insert</span>(x);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n &gt;&gt; pos) &amp; <span class="number">1</span>)  <span class="built_in">dfs</span>(x + (<span class="number">1ll</span> &lt;&lt; pos),pos - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(x,pos - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">59</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it : se)  cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---do-use-hexagon-grid"><strong>D - Do use hexagon grid</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc269/tasks/abc269_d">D - Do use hexagon grid (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 给定一个蜂巢图，给定若干个目标点，求连通块的数量</p><h2 id="算法思路-1">算法思路</h2><p>​ 无脑dfs</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,mar[N][N],vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,dy[] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dx[i],yy = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(mar[xx][yy] &amp;&amp; !vis[xx][yy])    <span class="built_in">dfs</span>(xx,yy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="comment">//原坐标为[-1000,1000],偏移到[1,2001]上，这样就是正下标了</span></span><br><span class="line">        x += <span class="number">1001</span>,y += <span class="number">1001</span>;</span><br><span class="line">        n = <span class="built_in">max</span>(n,x),m = <span class="built_in">max</span>(m,y);</span><br><span class="line">        mar[x][y] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mar[i][j] &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">                res++,<span class="built_in">dfs</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---last-rook"><strong>E - Last Rook</strong></h1><h2 id="题目链接-2">题目链接</h2><p><a href="https://atcoder.jp/contests/abc269/tasks/abc269_e">E - Last Rook (atcoder.jp)</a></p><h2 id="题目描述-2">题目描述</h2><p>​ 交互题，给定n*n的矩阵，要求每一行和每一列都有一个棋子，目前已经放了n-1个棋子，请询问一个矩阵内的棋子数量，询问次数不超过1000,最后找到最后一个棋子应该存放的位置。</p><h2 id="算法思路-2">算法思路</h2><p>​ 假设最后一个棋子坐标为（x，y）,只需要两次二分，第一次二分确定x，第二次确定y。</p><p>​ 如果(1,1)到(mid,n)围成的矩阵里棋子个数为mid，则x的坐标在[mid+1,r]，否则就是在[1,mid]。我们对x，y分别进行二分就可以得到最终坐标点。</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %lld %lld %lld %lld\n&quot;</span>,a,b,c,d);</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>,r = n,x,y;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        <span class="comment">//一直计算[l,mid]，要是计算[l,mid]还需要转换</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,mid,<span class="number">1</span>,n) &lt; mid) r = mid;</span><br><span class="line">        <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = l;</span><br><span class="line">    l = <span class="number">1</span>,r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,n,<span class="number">1</span>,mid) &lt; mid) r = mid;</span><br><span class="line">        <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = l;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;! %lld %lld\n&quot;</span>,x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---transportation"><strong>F - Transportation</strong></h1><h2 id="题目链接-3">题目链接</h2><p><a href="https://atcoder.jp/contests/abc270/tasks/abc270_f">F - Transportation (atcoder.jp)</a></p><h2 id="题目描述-3">题目描述</h2><p>​ 有n个岛屿，每次可以建三种道路，第一种：在两个岛屿之间建桥，第二种：在某一个岛屿上建立港口，所有建立港口的岛屿之间可以互相连接，第三种：在某一个岛屿上建立飞机场，所以建立飞机场的岛屿之间可以互相连接，求n个岛屿的最小生成树</p><h2 id="算法思路-3">算法思路</h2><p>​ 如果只考虑道路，那么就是个普通的最小生成树。但是考虑港口和飞机场的话，我们可以建立虚拟源点，作为港口的中转站或者飞机场的中转站，然后由此进行求解最小生成树，然后我们枚举是否建立港口或者飞机场即可</p><p>​ 注意每次Kruskal排序，都会打乱顺序，所以要重新添加道路信息</p><p>​ 虽说一共有七种组合：陆、海、空、陆海、路空、海空、陆海空</p><p>​ 但是单独的海、空很好计算，直接相加即可，也可以归到陆海和路空里，因为把道路考虑进去，只能使答案更小或者不变，不可能变大；同理海空可以归到陆海空里。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">港口的集合结点为<span class="number">1</span>，新要添加的结点为<span class="number">2</span></span><br><span class="line">    如果在<span class="number">2</span>建立港口代价为x，<span class="number">2</span>与港口集合中某一座岛屿建立道路代价为y</span><br><span class="line">    <span class="number">1.</span>x &gt; y，选择建立道路，对于后序结点选择是否建立港口没有影响，因为建立港口的代价只与自身有关</span><br><span class="line">    <span class="number">2.</span>x &lt; y，选择建立港口，对于后序答案无影响</span><br><span class="line">    <span class="number">3.</span>x == y,建什么都行，理由同上</span><br><span class="line">    </span><br><span class="line">主要是因为建立港口和飞机场的代价只与自身有关，道路的建立不影响是否建立港口和飞机场</span><br></pre></td></tr></table></figure><h2 id="ac代码-3">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _u,<span class="keyword">int</span> _v,<span class="keyword">int</span> _w)&#123;</span><br><span class="line">        u = _u,v = _v,w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;a,<span class="keyword">const</span> Edge &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M],e1[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,len,a[N],b[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x] == <span class="number">-1</span>)   <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u,v = e[i].v,w = e[i].w;</span><br><span class="line">        <span class="keyword">int</span> fa = <span class="built_in">find</span>(u),fb = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)&#123;</span><br><span class="line">            f[fb] = fa;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt++; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == n - <span class="number">1</span>)    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e1[i] = <span class="built_in">Edge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建道路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n,m));</span><br><span class="line">    <span class="comment">//建道路、机场</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,b[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、机场和港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        e[i + m + n] = <span class="built_in">Edge</span>(i,n + <span class="number">2</span>,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">2</span>,<span class="number">2</span> * n + m));</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;c---submask&quot;&gt;&lt;strong&gt;C - Submask&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/con</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC269" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC269/"/>
    
    
    <category term="二分" scheme="http://wangxu1905.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dfs" scheme="http://wangxu1905.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 271</title>
    <link href="http://wangxu1905.github.io/2022/10/06/AtCoder%20Beginner%20Contest%20271/"/>
    <id>http://wangxu1905.github.io/2022/10/06/AtCoder%20Beginner%20Contest%20271/</id>
    <published>2022-10-06T11:37:13.421Z</published>
    <updated>2022-10-07T02:41:59.172Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc271/tasks/abc271_d">D - Flip and Adjust (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 有n张正反都带有数字的牌，正反面数字不一定相同，给定S，问是否可以有一种摆放方案，使n张牌显示的面的总和正好等于S，如果没有输出&quot;No&quot;，否则输出&quot;Yes&quot;,并给出方案，'H'代表正面，'T'代表反面</p><h2 id="算法思路">算法思路</h2><p>​ 看起来很dp,<span class="math inline">\(dp[i][j]\)</span>表示前i张牌是否可以得到总和j</p><p>​ <span class="math inline">\(dp[i][j]=dp[i-1][j] \quad| \quad dp[i - 1][j-a[i]],j&gt;=a[i]\\dp[i][j]=dp[i-1][j] \quad| \quad dp[i - 1][j-b[i]],j&gt;=b[i]\)</span></p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>,M = <span class="number">1e4</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,k,t,a[N],b[N],dp[N][M];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= a[i]) dp[i][j] |= dp[i - <span class="number">1</span>][j - a[i]];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= b[i]) dp[i][j] |= dp[i - <span class="number">1</span>][j - b[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!dp[n][m])   <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        stack&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">int</span> w = m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i - <span class="number">1</span>][w - a[i]]) w -= a[i],st.<span class="built_in">push</span>(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> w -= b[i],st.<span class="built_in">push</span>(<span class="string">&#x27;T&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout &lt;&lt; st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc271/tasks/abc271_e">E - Subsequence Path (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 共有n个城镇，m条道路，给定长度为k的序列，原则的道路顺序必须是序列的子序列（可以不连续，空序列可以），问从城镇1到城镇n的最小的路长为多少，如果无法到达，则输出-1</p><h2 id="算法思路-1">算法思路</h2><p>​ n&lt;=2e5,Dijkstra显然不够，根据题目的特殊性质，序列的每条路我们只有两种选择，选与不选，是不是感觉很dp了，循环一遍序列的边,<span class="math inline">\(dis[v] =min(dis[u]+w,dis[v])\)</span></p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,fail;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _u,<span class="keyword">int</span> _v,<span class="keyword">int</span> _w,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        u = _u,v = _v,w = _w,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,len,dis[N],head[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++len] = <span class="built_in">Edge</span>(u,v,w,head[u]);</span><br><span class="line">    head[u] = len; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="built_in">add</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">int</span> u = e[t].u,v = e[t].v,w = e[t].w;</span><br><span class="line">        dis[v] = <span class="built_in">min</span>(dis[u] + w,dis[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n] &gt;= INF)   <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc271/tasks/abc271_d&quot;&gt;D - Flip and Adjust (atcode</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC271" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC271/"/>
    
    
    <category term="博弈论" scheme="http://wangxu1905.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>省赛训练</title>
    <link href="http://wangxu1905.github.io/2022/10/04/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/"/>
    <id>http://wangxu1905.github.io/2022/10/04/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/</id>
    <published>2022-10-04T07:49:30.623Z</published>
    <updated>2022-10-06T03:57:52.665Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>[toc]</p><h1 id="阿生的和谐树"><strong>7-1 阿生的和谐树</strong></h1><p>阿生上学的路上从左到右有<em>N</em>棵树编号(1～<em>N</em>)，其中第<em>i</em>个颗树有和谐值<span class="math inline">\(A_{i}\)</span>。</p><p>阿生认为，如果一段连续的树，它们的和谐值之和可以被<em>M</em>整除，那么这个区间整体看起来就是和谐的。 现在阿生想请你帮忙计算一下，满足和谐条件的区间的数量。</p><h2 id="输入格式">输入格式:</h2><p>第一行，有2个整数N和M，表示树的数量以及计算和谐值的参数。 （ 1 &lt;= N &lt;= 100,000, 1 &lt;= M &lt;= 100 ） 第二行，有N个整数Ai, 分别表示第i个颗树的和谐值。 （ 0 &lt;= Ai &lt;= 1,000,000,000 ）</p><h2 id="输出格式">输出格式:</h2><p>共1行，每行1个整数，表示满足整体是和谐的区间的数量。</p><h2 id="输入样例">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h2 id="输出样例">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="算法思路">算法思路</h2><p>​ 假设<span class="math inline">\(a &gt; b,a \% p = m,b \%p = m\)</span>，可以得到 $(a - b) %p = 0 $</p><p>​ 考虑到数据量为1e5，所以采用前缀和的思想，从前向后计算前缀和，若在下标为i的位置，前缀和取模为t,在1~（i -1）计算出了cnt[t]个前缀和为t的位置，那么可以产生cnt[t]个组合方案，由此累加即可得出结果</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,mod,a[N],cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i] %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        sum = (sum + a[i]) % mod;</span><br><span class="line">        res += cnt[sum];</span><br><span class="line">        cnt[sum]++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿生的字符串"><strong>7-2 阿生的字符串</strong></h1><p>阿生最近在研究字符串之间的变换，可以对字符串进行若干次变换操作:</p><ol type="1"><li>交换任意两个相邻的字符，代价为0。</li><li>将任意一个字符a修改成字符b，代价为 |a - b|（绝对值）。</li></ol><p>现在有两个长度相同的字符串X和Y，阿生想知道，如果要将X和Y变成两个一样的字符串，需要的最少的代价之和是多少。</p><h2 id="输入格式-1">输入格式:</h2><p>共三行，第一行，一个整数N，表示字符串的长度。 （1 &lt;= N &lt;= 2,000） 接下来两行，每行分别是一个字符串，表示字符串X和Y。 （字符串中仅包含小写字母）</p><h2 id="输出格式-1">输出格式:</h2><p>共一行，一个整数，表示将X和Y变换成一样的字符串需要的最小的总代价。</p><h2 id="输入样例-1">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">baaa</span><br><span class="line">aabb</span><br></pre></td></tr></table></figure><h2 id="输出样例-1">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="算法思路-1">算法思路</h2><ul><li>如果两个字符串的同一字符数量完全相同，那么只需要交换相邻位置即可，代价为0</li><li>如果要付出代价，必然是两个字符串存在某一字符c的数量不等。如果想让代价最小，必然将离c最近的字符修改为c。</li></ul><p>综上可以得到，我们可以向将字符串进行排序（冒泡排序，代价为0），然后依次比较str和ptr的每位，如果相同，则不改变，如果不同，那么str[i]是里ptr[i]最近的了，所以将str[i]变成ptr[i]即可。</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,mod,a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str,ptr;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; str &gt;&gt; ptr;</span><br><span class="line">    <span class="built_in">sort</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(ptr.<span class="built_in">begin</span>(),ptr.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        res += <span class="built_in">abs</span>(str[i] - ptr[i]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="约会"><strong>7-3 约会</strong></h1><p>HBU有n个男生，标号从1到n。n个女生，标号从n+1到2n。</p><p>有一天，他们一起开派对。女孩坐第一排，男孩坐第二排。他们的坐姿是这样的，一个男孩坐在一个女孩的后面.</p><p>每个男生都有一个他喜欢的女生，他可以通过在一张纸上写下他想对她说的话来和他的心上人取得联系，并把它做成一架纸飞机，他会直接扔给她。纸飞机将沿直线飞行。</p><p>但是，当两架纸飞机在空中相撞，中途坠落时，麻烦就发生了。显然，这将是非常尴尬的。所以每个男孩都生知道，如果他扔掉纸飞机，有多少纸飞机有可能在中途与它相撞。</p><p>输入保证每个女生都是一个男生的心上人。</p><h2 id="输入格式-2">输入格式:</h2><p>第一行包含一个整数n。</p><p>接下来是n行，第i行包含两个整数，即坐在第i个男生前面的女生和他喜欢的女生的索引。1 ≤ n ≤ 100000</p><h2 id="输出格式-2">输出格式:</h2><p>输出n行，其中第i行包含一个整数，即可能与第i个男生的飞机碰撞的数量。</p><h2 id="输入样例-2">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7 9</span><br><span class="line">6 6</span><br><span class="line">8 10</span><br><span class="line">9 7</span><br><span class="line">10 8</span><br></pre></td></tr></table></figure><h2 id="输出样例-2">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="算法思路-2">算法思路</h2><p>​ <img src="/2022/10/04/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/blog/hexoblog/source/_posts/img/%E7%BA%A6%E4%BC%9A.png" style="zoom: 50%;"></p><p>我们发现只需要考虑女生的座位顺序和飞机发送的顺序，因为女生的下标为<span class="math inline">\((n + 1)\sim 2n\)</span>，我们可以对应映射到<span class="math inline">\(1\sim n\)</span>上</p><p>假设当前的男生为i，喜欢的女生为j，那么我们发现相撞的情况分两种：</p><ol type="1"><li><span class="math inline">\(1\sim (i-1)\)</span>的男生的飞向<span class="math inline">\((j + 1) \sim n\)</span>的女生</li><li><span class="math inline">\((i + 1) \sim n\)</span>的男生的飞向<span class="math inline">\(1\sim(j - 1)\)</span>的女生</li></ol><p>所以，可以将两种相撞的情况分别求，第一种从前向后遍历，第二种从后向前遍历</p><ol type="1"><li>从前向后遍历，通过树状数组，需要计算query(n) - query(j)，计算<span class="math inline">\((j + 1) \sim n\)</span>的女生收到<span class="math inline">\(1\sim (i-1)\)</span>的男生飞机的数量</li><li>从后向前遍历，通过树状数组，需要计算query(j - 1) ，计算<span class="math inline">\(1\sim(j - 1)\)</span>的女生收到的<span class="math inline">\((i + 1) \sim n\)</span>男生飞机的数量</li></ol><p>​ 最后，两种情况相加即可</p><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,a[N],b[N],c[N],res[N],tr[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &amp; -k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))   res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//a[i]-n为女生编号映射到1~n中</span></span><br><span class="line">    <span class="comment">//b[a[i]-n]表示女生映射后坐到第i个位置</span></span><br><span class="line">    <span class="comment">//c[i]存储第i个男生心仪女生的编号（映射后的）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; c[i];</span><br><span class="line">        b[a[i] - n] = i;</span><br><span class="line">        c[i] -= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="comment">//计算第i个男生心仪女生映射后的位置到第n个位置</span></span><br><span class="line">        res[i] += <span class="built_in">query</span>(n) - <span class="built_in">query</span>(b[c[i]]);</span><br><span class="line">        <span class="built_in">add</span>(b[c[i]],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tr));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">        <span class="comment">//计算第1个位置到第i个男生心仪女生映射后的位置</span></span><br><span class="line">        res[i] += <span class="built_in">query</span>(b[c[i]]);</span><br><span class="line">        <span class="built_in">add</span>(b[c[i]],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cout &lt;&lt; res[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="阿生的数字组合"><strong>7-4 阿生的数字组合</strong></h1><p>阿生最近在研究某种数字组合： 定义为：每个数字的十进制表示中(0~9)，每个数位<strong>各不相同</strong>且各个数位之和等于N。 满足条件的数字可能很多，找到其中的最小值即可。 阿生还有很多作业要写，于是找到了你--未来的图灵奖有力争夺者寻求帮助。</p><h2 id="输入格式-3">输入格式:</h2><p>共一行，一个正整数N，如题意所示，表示组合中数字不同数位之和。（1 &lt;= N &lt;= 1,000）</p><h2 id="输出格式-3">输出格式:</h2><p>共一行，一个整数，表示该组合中的最小值。 如果组合中没有任何符合条件的数字，那么输出-1即可。</p><h2 id="输入样例-3">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="输出样例-3">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="算法思路-3">算法思路</h2><p>​ 模拟题。</p><p>​ 每个数位各不相同，所以最多是0~9全都出现一次，总和为45。分成两种情况：</p><ul><li>n&gt;45，直接输出-1。</li><li>n&lt;=45，为了保证最小，根据贪心策略，把数值大的放在低位，所以依次从低到高放置9~1，如果最后不够的话，直接补余数。</li></ul><h2 id="ac代码-3">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,x,mod,a[N],b[N],tr[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span> * <span class="number">5</span>)   <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="built_in">min</span>(x,now--));</span><br><span class="line">            x -= st.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout &lt;&lt; st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="阿生的奶牛"><strong>7-5 阿生的奶牛</strong></h1><p>阿生的奶牛们发现，沿着山脊生长的三叶草（我们可以把它看作是一维数字线）在他的田地里长势特别好。</p><p>他的农场有<em>N</em>头牛（编号从1数到<em>N</em>）。他的<em>N</em>头牛中，每头都有一种特别喜欢的三叶草（这些范围可能重叠）。范围由一个闭合区间[<em>S</em>，<em>E</em>]定义。</p><p>但有些牛是强壮的，有些是虚弱的。给定两头奶牛：<em>A</em>和<em>B</em>，它们最喜欢的三叶草品种是<span class="math inline">\([S_{i},E_{i}]\)</span>和<span class="math inline">\([S_{j},E_{j}]\)</span>。如果<span class="math inline">\(S_{i}&lt;=S_{j}\)</span>,<span class="math inline">\(E_{j}&lt;=E_{i}\)</span>并且<span class="math inline">\(E_{i}-S_{i}&gt;E_{j}-S_{j}\)</span>，我们说<span class="math inline">\(cow_{i}\)</span>比<span class="math inline">\(cow_{j}\)</span>强。</p><p>每头牛有多少头牛比它强壮？阿生需要你的帮助！</p><h2 id="输入格式-4">输入格式:</h2><p>输入包含多个测试用例。</p><p>对于每个测试用例，第一行是一个整数<span class="math inline">\(N(1&lt;=N&lt;=10^{5})\)</span>，表示奶牛的数量。然后是<em>N</em>行，第<em>i</em>行包含两个整数：<span class="math inline">\(S_{i}\)</span>和<span class="math inline">\(E_{i}(0&lt;=S_{i}&lt;E_{i}&lt;=10^{5})\)</span>，分别指定某头牛喜欢的范围的开始-结束位置。位置以距山脊起点的距离表示。</p><h2 id="输出格式-4">输出格式:</h2><p>对于每个测试用例，输出一行包含<em>n</em>个空格分隔的整数，第<em>i</em>个数指定比<span class="math inline">\(cow_{i}\)</span>强的<span class="math inline">\(cows\)</span>的数量。</p><h2 id="输入样例-4">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">0 3</span><br><span class="line">3 4</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="输出样例-4">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 0 0</span><br></pre></td></tr></table></figure><h2 id="算法思路-4">算法思路</h2><p>​ 简单来说，就是给定n个区间，问每个区间是多少个区间的真子集</p><p>​ 我们可以先按左右端点进行排序，因为统计真子集，所以左端点按从小到大排序，在左端点相同的情况下，右端点从大到小排序，也可以采取优先队列。</p><p>​ 因为要排序，我们不仅要记录每个区间的左右端点，还要记录它原本的位置。</p><p>​ 然后依次从优先队列里弹出。</p><p>​ 记当前弹出的为元素t，那么先前弹出的左端点&lt;=t，我们只需要记录先前弹出的右端点有多少个&gt;=t，同时由于是真子集，所以要减去先前弹出的相同的区间即可。</p><p>​ 总结来说：</p><ol type="1"><li>先对区间进行排序</li><li>然后只考虑右端点即可，通过树状数组维护</li><li>由于真子集，所以减去先前与自己一模一样的区间</li></ol><h2 id="ac代码-4">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,l,r;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a,<span class="keyword">const</span> Node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.l != b.l)  <span class="keyword">return</span> a.l &gt; b.l;</span><br><span class="line">        <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,k,mod,a[N],b[N],tr[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &amp; -k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i))  tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))   res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    priority_queue&lt;Node&gt; qu;</span><br><span class="line">    <span class="comment">//记录相同区间的个数</span></span><br><span class="line">    map&lt;PII,<span class="keyword">int</span>&gt; book;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        qu.<span class="built_in">push</span>(&#123;i,x,y&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        Node t = qu.<span class="built_in">top</span>();</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> pos = t.pos,l = t.l,r = t.r;</span><br><span class="line">        <span class="comment">//当前的右端点到最远右端点的区间个数-相同的区间个数</span></span><br><span class="line">        a[pos] = <span class="built_in">query</span>(mx) - <span class="built_in">query</span>(r - <span class="number">1</span>) - book[&#123;l,r&#125;];</span><br><span class="line">        <span class="comment">//当前右端点+1</span></span><br><span class="line">        <span class="built_in">add</span>(r,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//记录当前区间</span></span><br><span class="line">        book[&#123;l,r&#125;]++;</span><br><span class="line">        <span class="comment">//更新最远右端点</span></span><br><span class="line">        mx = <span class="built_in">max</span>(mx,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i)   cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hbu校庆"><strong>7-6 HBU校庆</strong></h1><p>HBU有<em>N</em>名教职工和学生，编号为1∼<em>N</em></p><p>他们的关系就像一棵以校长为根的树，父节点就是子节点的直接上司。</p><p>每个教职工或学生有一个快乐指数，用整数<em>V</em>给出</p><p>一年一度的校庆要开始了，不过，没有教职工愿意和直接上司一起参会，当然，也没有学生愿意和导员一起参会。</p><p>在满足这个条件的前提下，HBU希望邀请一部分教职工或学生参会，使得所有参会人员的快乐指数总和最大，求这个最大值。</p><h2 id="输入格式-5">输入格式:</h2><p>第一行一个整数<em>N</em></p><p>接下来<em>N</em>行，第i行表示i号教职工或学生的的快乐指数<span class="math inline">\(H_{i}\)</span>。</p><p>接下来<em>N</em>−1行，每行输入一对整数<em>L</em>,<em>K</em>，表示K是L的直接上司。</p><h2 id="输出格式-5">输出格式:</h2><p>输出为一个整数，表示所有参会人员的快乐指数总和的最大值。</p><h2 id="输入样例-5">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">6 4</span><br><span class="line">7 4</span><br><span class="line">4 5</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h2 id="输出样例-5">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="数据范围">数据范围</h2><p>1&lt;=<em>N</em>&lt;=6000 −128&lt;=<span class="math inline">\(H_{i}\)</span>​&lt;=127</p><h2 id="算法思路-5">算法思路</h2><p>​ 好像从洛谷里看到过，是个树形dp，<span class="math inline">\(dp[u][0/1]\)</span>表示u结点选择不去或者去，去为1，不去为0</p><p>​ 首先，要找到根节点，入度为0的点即为根节点，然后进行dfs</p><p>​ 状态转移方程分成两种：</p><ol type="1"><li><p>不选择根节点,那么子节点可以选择去或者不去，两者取最大</p><p><span class="math inline">\(dp[u][0]=max(dp[u][0],dp[u][0]+max(dp[v][0],dp[v][1]))\)</span></p></li><li><p>选择根节点，那么子节点必须不去</p><p><span class="math inline">\(dp[u][1]=max(dp[u][1],dp[u][1]+dp[v][0])\)</span></p></li></ol><p>​ 最后，结果取<span class="math inline">\(max(dp[root][0],dp[root][1])\)</span>即可</p><h2 id="ac代码-5">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,len,head[N],root,a[N],f[N][<span class="number">2</span>],in[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,fail;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        v = _v,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[len] = <span class="built_in">Edge</span>(v,head[u]);</span><br><span class="line">    head[u] = len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = a[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i ; i = e[i].fail)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        f[u][<span class="number">0</span>] = <span class="built_in">max</span>(f[u][<span class="number">0</span>],f[u][<span class="number">0</span>] + <span class="built_in">max</span>(f[v][<span class="number">0</span>],f[v][<span class="number">1</span>]));</span><br><span class="line">        f[u][<span class="number">1</span>] = <span class="built_in">max</span>(f[u][<span class="number">1</span>],f[u][<span class="number">1</span>] + f[v][<span class="number">0</span>]); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(v,u);</span><br><span class="line">        in[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in[i])&#123;</span><br><span class="line">            root = i;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(f[root][<span class="number">0</span>],f[root][<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="教学区分布"><strong>7-7 教学区分布</strong></h1><p>HBU将<em>n</em>∗<em>m</em>的教学区分成不同专业的教学与实验范围，为了简单省力，惠国惠民，相同专业的地方总是紧挨着的，上下左右相邻的属于同一个连通域，现在想知道，总共有多少专业？</p><h2 id="输入格式-6">输入格式:</h2><p>第一行两个正整数，n,m,代表教学区宽和长； 接下来一个n*m矩阵,仅包含数字，表示专业分布。</p><h2 id="输出格式-6">输出格式:</h2><p>一个正整数，专业总数。</p><h2 id="输入样例-6">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1122</span><br><span class="line">1222</span><br><span class="line">3111</span><br><span class="line">3333</span><br></pre></td></tr></table></figure><h2 id="输出样例-6">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="数据范围-1">数据范围</h2><p><em>n</em>≤1000,<em>m</em>≤1000</p><h2 id="算法思路-6">算法思路</h2><p>​ 跟走迷宫一样，对每个连通分量进行dfs即可，每次dfs只走和自己数字相同的位置，然后对位置进行标记。</p><h2 id="ac代码-6">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,vis[N][N];</span><br><span class="line"><span class="keyword">char</span> mar[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,dy[] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dx[i],yy = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(xx &lt; <span class="number">1</span> || xx &gt; n || yy &lt; <span class="number">1</span> || yy &gt; m || vis[xx][yy])    <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(mar[x][y] == mar[xx][yy])    <span class="built_in">dfs</span>(xx,yy);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            cin &gt;&gt; mar[i][j];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j])&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i,j);res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选物品"><strong>7-8 选物品</strong></h1><p>阿生现在有<em>n</em>个物品,每个物品有两种属性<span class="math inline">\(x_{i}\)</span>和<span class="math inline">\(y_{i}\)</span>.他想要从中挑出尽可能多的物品满足以下条件:对于任意两个物品<em>i</em>和<em>j</em>,满足<span class="math inline">\(x_{i}&lt;x_{j}\)</span>且 <span class="math inline">\(y_{i}&lt;y_{j}\)</span>或者<span class="math inline">\(x_{i}&gt;x_{j}\)</span>且 <span class="math inline">\(y_{i}&gt;y_{j}\)</span>.问最多能挑出多少物品。</p><h2 id="输入格式-7">输入格式:</h2><p>第一行输入一个正整数<em>T</em>.表示有<em>T</em>组数据. 对于每组数据,第一行输入一个正整数<em>n</em>.表示物品个数. 接下来两行,每行有<em>n</em>个整数. 第一行表示<em>n</em>个节点的<em>x</em>属性. 第二行表示<em>n</em>个节点的<em>y</em>属性. 1≤<em>T</em>≤10 2≤<em>n</em>≤100000 0≤<em>x</em>,<em>y</em>≤1000000000</p><h2 id="输出格式-7">输出格式:</h2><p>输出<em>T</em>行,每一行对应每组数据的输出.</p><h2 id="输入样例-7">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 3 2</span><br><span class="line">0 2 3</span><br><span class="line">4</span><br><span class="line">1 5 4 2 </span><br><span class="line">10 32 19 21</span><br></pre></td></tr></table></figure><h2 id="输出样例-7">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="算法思路-7">算法思路</h2><p>​ 之前确实没看出来是个最长上升子序列的题。</p><p>​ 首先，对结点进行排序，x从小到大排序，x相同时，y从大到小排序。然后这样保证了x一定是递增的，然后找y的最长上升子序列，这样最长子序列的长度就是能选择的物品数量。</p><h2 id="ac代码-7">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a,<span class="keyword">const</span> Node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.x != b.x)  <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">        <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; e[i].x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; e[i].y;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>,e + n + <span class="number">1</span>);</span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = se.<span class="built_in">lower_bound</span>(e[i].y);</span><br><span class="line">        <span class="keyword">if</span>(it != se.<span class="built_in">end</span>())  se.<span class="built_in">erase</span>(it);</span><br><span class="line">        se.<span class="built_in">insert</span>(e[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; se.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)  <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="招生"><strong>7-9 招生</strong></h1><p>HBU某个专业导师想要招聘一个研究生，有<em>n</em>个人报名参加，这位导师通过面试确认了n个人的综合得分，然后进行选择。</p><p>因为导师只要一个人，他会选择得分最高的人，但是这个人可能不是唯一的，为了避免不公平情况发生，也不让自己为难，他会选择在没有和其他人分数相同的情况下得分最高的人录用。</p><p>求这个最高得分，如果没有合适的人，则输出−1</p><h2 id="输入格式-8">输入格式:</h2><p>第一行一个整数n 1&lt;=<em>n</em>&lt;=100000 第二行n个整数表示每个人的面试得分 保证所有输入的数为正整数且不超过10000</p><h2 id="输出格式-8">输出格式:</h2><p>一行一个整数表示答案</p><h2 id="输入样例1">输入样例1:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><h2 id="输出样例1">输出样例1:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="输入样例2">输入样例2:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 5 4 1 5 4</span><br></pre></td></tr></table></figure><h2 id="输出样例2">输出样例2:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="输入样例3">输入样例3:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure><h2 id="输出样例3">输出样例3:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="算法思路-8">算法思路</h2><p>​ 反正分数最多不超过10000，直接桶排序，从大到小遍历，输出第一个人数为1的成绩，否则输出-1</p><h2 id="ac代码-8">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,k,mod,a[N],cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        a[t]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10000</span>; i &gt; <span class="number">0</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            res = i;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="光速排序"><strong>7-10 光速排序</strong></h1><p>在这个问题中，必须分析一个特定的排序算法。该算法通过交换两个相邻的序列元素来处理由<em>n</em>个不同整数组成的序列，直到序列按升序排序。对于输入序列</p><p>9,1,0,5,4 , 光速排序生成输出0,1,4,5,9 .你的任务是确定超快速排序需要执行多少交换操作才能对给定的输入序列进行排序。</p><h2 id="输入格式-9">输入格式:</h2><p>输入包含几个测试用例。每个测试用例都从一行开始，该行包含一个整数<em>n</em>(<em>n</em>&lt;=500000),输入序列的长度。以下<em>n</em>行中的每一行都包含一个整数0≤<span class="math inline">\(a_{i}\)</span>≤999999999，第i个输入序列元素。输入由长度<em>n</em>=0的序列终止。</p><h2 id="输出格式-9">输出格式:</h2><p>对于每个输入序列，程序都会打印一行，其中包含整数*o**p*，这是对给定输入序列进行排序所需的最小交换操作数。</p><h2 id="输入样例-8">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">9</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="输出样例-8">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="算法思路-9">算法思路</h2><p>​ 交换两个相邻的序列元素，消除一个逆序对。所以我们只需要统计一共有多少逆序对就可以了。</p><p>​ 由于数据n只要5e5,而数据值最大有1e9,所以可以进行离散化</p><h2 id="ac代码-9">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],tr[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &amp; -k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i))  tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))   res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>(),x) - ve.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tr));</span><br><span class="line">    ve.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  cin &gt;&gt; ve[i],a[i] = ve[i];</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>());</span><br><span class="line">    ve.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>()),ve.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="built_in">find</span>(a[i]);</span><br><span class="line">        res += <span class="built_in">query</span>(n) - <span class="built_in">query</span>(t);</span><br><span class="line">        <span class="built_in">add</span>(t,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n,n)   <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="骰子"><strong>7-11 骰子</strong></h1><p>阿生购买了N个骰子，为了方便后面进行活动，他需要将这些骰子进行分类。</p><p>两个骰子为同类的定义是：</p><p>将其中一个骰子通过若干次上下、左右或前后翻转后，其与另一个骰子对应的<code>6</code>面数字均相等。</p><p>现在阿生想知道不同种类的骰子的数量分别有多少。</p><h2 id="输入格式-10">输入格式:</h2><p>第一行1个整数N，表示骰子的数量。 （1 &lt;= N &lt;= 1,000） 接下来N行，每行6个数字（1～6，且各不相同） 其中第i行表示第i个骰子当前上、下、左、右、前、后这6面的数字。</p><h2 id="输出格式-10">输出格式:</h2><p>共2行: 第一行1个整数M，表示不同种类的骰子的个数 第二行M个整数，由大到小排序，表示每个种类的骰子的数量</p><h2 id="输入样例1-1">输入样例1:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1 2 6 5 3 4</span><br></pre></td></tr></table></figure><h2 id="输出样例1-1">输出样例1:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="输入样例2-1">输入样例2:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1 2 6 5 3 4</span><br><span class="line">1 2 3 4 6 5</span><br></pre></td></tr></table></figure><h2 id="输出样例2-1">输出样例2:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h2 id="输入样例3-1">输入样例3:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">2 5 1 3 4 6</span><br><span class="line">5 4 3 2 1 6</span><br><span class="line">1 4 6 2 3 5</span><br><span class="line">1 5 6 3 4 2</span><br><span class="line">6 4 2 1 5 3</span><br><span class="line">3 6 4 5 2 1</span><br><span class="line">1 6 3 4 2 5</span><br><span class="line">5 1 4 2 6 3</span><br><span class="line">6 2 3 1 5 4</span><br><span class="line">5 3 6 1 4 2</span><br></pre></td></tr></table></figure><h2 id="输出样例3-1">输出样例3:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">2 1 1 1 1 1 1 1 1</span><br></pre></td></tr></table></figure><h2 id="算法思路-10">算法思路</h2><p>​ 究极打表法。</p><p>​ 一共有三种旋转方式，分别保持上下、左右、前后面不动，进行翻转。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">骰子 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> ，保持上下面不动进行翻转，可以得到</span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们可以发现以下规律：</p><ol type="1"><li>两个面交换位置，其中一个面内部顺序变化</li><li>两个面不交换位置，内部顺序都不发生变化</li></ol><p>保持其他面不变，翻转出来的规律也是如此</p><p>所以我们根据这个进行打表，进行三重循环，分别对应保持上下，左右，前后面的不变的情况，对其他两个面进行操作，i=0,表示不变，i=1,2,3分别对应以上三种情况即可。</p><h2 id="ac代码-10">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7</span>,M = <span class="number">1000</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>,INF = <span class="number">0x3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,cnt,a[N],vis[N][N][N][N][N][N];</span><br><span class="line"><span class="keyword">int</span> num[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)  ve.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">do</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(vis[ve[<span class="number">1</span>]][ve[<span class="number">2</span>]][ve[<span class="number">3</span>]][ve[<span class="number">4</span>]][ve[<span class="number">5</span>]][ve[<span class="number">6</span>]])  <span class="keyword">continue</span>;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i)&#123;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; tmp1;</span><br><span class="line">            tmp1 = ve;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)  tmp1[<span class="number">1</span>] = ve[<span class="number">4</span>],tmp1[<span class="number">2</span>] = ve[<span class="number">3</span>],tmp1[<span class="number">3</span>] = ve[<span class="number">1</span>],tmp1[<span class="number">4</span>] = ve[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>) tmp1[<span class="number">1</span>] = ve[<span class="number">3</span>],tmp1[<span class="number">2</span>] = ve[<span class="number">4</span>],tmp1[<span class="number">3</span>] = ve[<span class="number">2</span>],tmp1[<span class="number">4</span>] = ve[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>) tmp1[<span class="number">1</span>] = ve[<span class="number">2</span>],tmp1[<span class="number">2</span>] = ve[<span class="number">1</span>],tmp1[<span class="number">3</span>] = ve[<span class="number">4</span>],tmp1[<span class="number">4</span>] = ve[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j)&#123;</span><br><span class="line">                vector&lt;<span class="keyword">int</span>&gt; tmp2;</span><br><span class="line">                tmp2 = tmp1;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">1</span>)  tmp2[<span class="number">1</span>] = tmp1[<span class="number">6</span>],tmp2[<span class="number">2</span>] = tmp1[<span class="number">5</span>],tmp2[<span class="number">5</span>] = tmp1[<span class="number">1</span>],tmp2[<span class="number">6</span>] = tmp1[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">2</span>) tmp2[<span class="number">1</span>] = tmp1[<span class="number">5</span>],tmp2[<span class="number">2</span>] = tmp1[<span class="number">6</span>],tmp2[<span class="number">5</span>] = tmp1[<span class="number">2</span>],tmp2[<span class="number">6</span>] = tmp1[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">3</span>) tmp2[<span class="number">1</span>] = tmp1[<span class="number">2</span>],tmp2[<span class="number">2</span>] = tmp1[<span class="number">1</span>],tmp2[<span class="number">5</span>] = tmp1[<span class="number">6</span>],tmp2[<span class="number">6</span>] = tmp1[<span class="number">5</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; ++k)&#123;</span><br><span class="line">                    vector&lt;<span class="keyword">int</span>&gt; tmp3;</span><br><span class="line">                    tmp3 = tmp2;</span><br><span class="line">                    <span class="keyword">if</span>(k == <span class="number">1</span>)  tmp3[<span class="number">3</span>] = tmp2[<span class="number">5</span>],tmp3[<span class="number">4</span>] = tmp2[<span class="number">6</span>],tmp3[<span class="number">5</span>] = tmp2[<span class="number">4</span>],tmp3[<span class="number">6</span>] = tmp2[<span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) tmp3[<span class="number">3</span>] = tmp2[<span class="number">6</span>],tmp3[<span class="number">4</span>] = tmp2[<span class="number">5</span>],tmp3[<span class="number">5</span>] = tmp2[<span class="number">3</span>],tmp3[<span class="number">6</span>] = tmp2[<span class="number">4</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>) tmp3[<span class="number">3</span>] = tmp2[<span class="number">4</span>],tmp3[<span class="number">4</span>] = tmp2[<span class="number">3</span>],tmp3[<span class="number">5</span>] = tmp2[<span class="number">6</span>],tmp3[<span class="number">6</span>] = tmp2[<span class="number">5</span>];</span><br><span class="line">                    vis[tmp3[<span class="number">1</span>]][tmp3[<span class="number">2</span>]][tmp3[<span class="number">3</span>]][tmp3[<span class="number">4</span>]][tmp3[<span class="number">5</span>]][tmp3[<span class="number">6</span>]] = cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(ve.<span class="built_in">begin</span>() + <span class="number">1</span>,ve.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j)  cin &gt;&gt; a[j];</span><br><span class="line">        num[vis[a[<span class="number">1</span>]][a[<span class="number">2</span>]][a[<span class="number">3</span>]][a[<span class="number">4</span>]][a[<span class="number">5</span>]][a[<span class="number">6</span>]]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意是multiset</span></span><br><span class="line">    multiset&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">        <span class="keyword">if</span>(num[i])    se.<span class="built_in">insert</span>(num[i]);</span><br><span class="line">    cout &lt;&lt; se.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = se.<span class="built_in">rbegin</span>(); it != se.<span class="built_in">rend</span>(); ++it)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>    flag = <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿生的数据结构"><strong>7-12 阿生的数据结构</strong></h1><p>阿生在HBU教授数据结构课程。他给可怜的孩子们留了一道毒瘤作业，要求同学给他编写一个新的数据结构，该结构能够在数组的某个区间内快速返回k阶统计量。</p><p>也就是说，给定一个由不同整数组成的数组<em>a</em>[1⋯<em>n</em>]，给出一系列问题<em>Q</em>(<em>i</em>，<em>j</em>，<em>k</em>)需要给出区间[<em>i</em>,<em>j</em>]中的第k小的数字。</p><p>例如，考虑数组<em>a</em>=(1，5，2，6，3，7，4)。设问题为<em>Q</em>（2，5，3）。区间<em>a</em>[2⋯5]是(5，2，6，3)。问题的答案是5。</p><h2 id="输入格式-11">输入格式:</h2><p>输入文件的第一行包含<em>n</em>数组的大小，<em>m</em>要回答的问题数(1&lt;=<em>n</em>&lt;=100000，1&lt;=<em>m</em>&lt;=5000)。</p><p>第二行包含<em>n</em>个不同的整数，其绝对值不超过109.</p><p>以下m行包含问题描述，每个描述由三个数字组成：<em>i</em>、<em>j</em>和<em>k</em>（1&lt;=<em>i</em>&lt;=<em>j</em>&lt;=<em>n</em>，1&lt;=<em>k</em>&lt;=<em>j</em>−<em>i</em>+1），并表示问题Q(<em>i</em>、<em>j</em>、<em>k</em>)。</p><h2 id="输出格式-11">输出格式:</h2><p>对于每个问题，输出在区间[<em>i</em>,<em>j</em>]段中的第k小数字</p><h2 id="输入样例-9">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 5 2 6 3 7 4</span><br><span class="line">2 5 3</span><br><span class="line">4 4 1</span><br><span class="line">1 7 3</span><br></pre></td></tr></table></figure><h2 id="输出样例-9">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="算法思路-11">算法思路</h2><p>​ 主席树板子题</p><h2 id="ac代码-11">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[N * <span class="number">4</span> + N * <span class="number">17</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,p,idx,a[N],root[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++idx;</span><br><span class="line">    <span class="keyword">if</span>(l == r)  <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l,mid),tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = ++idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[q].cnt++;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)    tr[q].l = <span class="built_in">insert</span>(tr[p].l,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span>    tr[q].r = <span class="built_in">insert</span>(tr[p].r,mid + <span class="number">1</span>,r,x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q,<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)  <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt)    <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l,tr[p].l,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r,tr[p].r,mid + <span class="number">1</span>,r,k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()),nums.<span class="built_in">end</span>());</span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>,nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>],<span class="number">0</span>,nums.<span class="built_in">size</span>() - <span class="number">1</span>,<span class="built_in">find</span>(a[i]));</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,k;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        cout &lt;&lt; nums[<span class="built_in">query</span>(root[r],root[l - <span class="number">1</span>],<span class="number">0</span>,nums.<span class="built_in">size</span>() - <span class="number">1</span>,k)] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解密邀请码"><strong>7-13 解密邀请码</strong></h1><p>HBU开设了一门全网独一份的新课程，因此大家迫不及待的等待选课的到来以求选到该课程，但是在选择前需要输入课程的邀请码，任何申请该课程的同学都会收到一个神秘字符串，为了保障字符串的安全性以及自己的课程不被窃取，课程老师发明了一种压缩算法对邀请码中重复的部分进行了压缩，对于字符串中连续的m个相同字符串S将会压缩为[m|S] (m为一个整数且1&lt;=m&lt;=200)，例如字符串HBUHBUHBU将会被压缩为[3|HBU]，现在同学们收到了收到了课程的邀请码字，你能帮助他们进行解密么？</p><h2 id="输入格式-12">输入格式:</h2><p>输入在一行中给出长度不超过50的一个字符串，字符串中保证只包含大写字母，数字，[ ] 和 | 。</p><h2 id="输出格式-12">输出格式:</h2><p>输出为一行只包含大写字母的字符串。</p><h2 id="输入样例-10">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HB[3|U[2|HB]]U</span><br></pre></td></tr></table></figure><h2 id="输出样例-10">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HBUHBHBUHBHBUHBHBU</span><br></pre></td></tr></table></figure><h2 id="样例说明">样例说明：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HB[3|U[2|HB]]U−&gt;HB[3|UHBHB]U−&gt; HBUHBHBUHBHBUHBHBU</span><br></pre></td></tr></table></figure><h2 id="算法思路-12">算法思路</h2><p>​ 我是纯字符串操作，好像大家是递归</p><p>​ 我思路是每次从右向左找第一个&quot;[&quot;,从左向右找第一个&quot;]&quot;，那么两者围成的是最内部的字符串，所以对它进行处理。循环执行以上操作即可。</p><h2 id="ac代码-12">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],tr[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>(),l = s.<span class="built_in">size</span>() - <span class="number">1</span>,r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; s[l] != <span class="string">&#x27;[&#x27;</span>)  l--;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; n &amp;&amp; s[r] != <span class="string">&#x27;]&#x27;</span>)  r++;</span><br><span class="line">        <span class="comment">//如果找不到[或者]退出</span></span><br><span class="line">        <span class="keyword">if</span>(l == <span class="number">-1</span> || r == n)  <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>,pos = l + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//记录数字</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(s[pos]))&#123;</span><br><span class="line">            cnt = cnt * <span class="number">10</span> + (s[pos] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="comment">//截取字符串</span></span><br><span class="line">        string ptr = <span class="string">&quot;&quot;</span>,tmp = s.<span class="built_in">substr</span>(pos,r - pos);</span><br><span class="line">        <span class="comment">//进行字符串扩充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)    ptr += tmp;</span><br><span class="line">        <span class="comment">//字符串删除旧的，插入新的</span></span><br><span class="line">        s.<span class="built_in">erase</span>(l,r - l + <span class="number">1</span>);</span><br><span class="line">        s.<span class="built_in">insert</span>(l,ptr);</span><br><span class="line">        <span class="comment">//字符串长度增加</span></span><br><span class="line">        n += ptr.<span class="built_in">size</span>() - (r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//l不会改变，r此时变为l+ptr.size()</span></span><br><span class="line">        <span class="comment">//因为ptr此时没有[],安心加即可</span></span><br><span class="line">        r = l + ptr.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="放假"><strong>7-14 放假</strong></h1><p>由于成绩优异，小聪放了n天的假，身为学习狂的小聪打算在假期中去图书馆学习、锻炼或者适当的休息。她有个奇怪的习惯：不会连续两天学习或锻炼。只有当图书馆开门时，小聪才能学习，只有当健身房营业时，小聪才能去健身，小聪一天只能干一件事。给出假期中图书馆，健身房的营业情况，求小聪最少需要休息几天。</p><h2 id="输入格式-13">输入格式:</h2><p>第一行一个整数n表示放假天数 第二行 n 个数 每个数为0或1,第 i 个数表示图书馆在第 i 天是否营业 第三行 n 个数 每个数为0或1,第 i 个数表示健身房在第 i 天是否营业 （1为营业 0为不营业） 1&lt;=<em>n</em>&lt;=<span class="math inline">\(10^{5}\)</span></p><h2 id="输出格式-13">输出格式:</h2><p>一个整数，表示小聪休息的最少天数。</p><h2 id="输入样例-11">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 1 0 0</span><br><span class="line">0 1 1 0</span><br></pre></td></tr></table></figure><h2 id="输出样例-11">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="算法思路-13">算法思路</h2><p>​ 看起来很dp的题，定义<span class="math inline">\(dp[i][0/1/2]\)</span>表示第i天为休息/学习/健身，得到状态转移方程如下：</p><p><span class="math inline">\(dp[i][0] = min(dp[i - 1][0],min(dp[i - 1][1],dp[i - 1][2])) + 1]\\dp[i][1] = min(dp[i - 1][0],dp[i - 1][2])\\dp[i][2] = min(dp[i - 1][0],dp[i - 1][1])\)</span></p><p>最后取<span class="math inline">\(min(dp[n][0],min(dp[n][1],dp[n][2]))\)</span>即可</p><h2 id="ac代码-13">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],b[N],dp[N][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>],<span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>],dp[i - <span class="number">1</span>][<span class="number">2</span>])) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">1</span>)   dp[i][<span class="number">1</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>],dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(b[i] == <span class="number">1</span>)   dp[i][<span class="number">2</span>] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>],dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(dp[n][<span class="number">0</span>],<span class="built_in">min</span>(dp[n][<span class="number">1</span>],dp[n][<span class="number">2</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩厂找人"><strong>7-15 扩厂找人</strong></h1><p>阿生是一名新晋大厂厂长，需要选择地方扩张找人，已知一共有 <em>n</em>个候选地，编号为 1,2,⋯,<em>n</em>，有<em>n</em>−1 条道路，使得这 <em>n</em>个候选地之间两两可以到达。</p><p>选择规则如下：</p><p>对于其中一个候选地 <em>i</em>而言，如果将该地以及其直接相连的道路全都删除，就可以得到若干个连通块，用<span class="math inline">\(w_{i}\)</span> 记录下其中的最大连通块中的候选地数量。</p><p>对于所有的满足 <span class="math inline">\(w_{k}=min\{ w_{1},w_{2},···,w_{n}\}\)</span>的候选地<em>k</em>而言，都是最佳军营建造地。</p><p>由于最佳地点可能不止一个，所以阿生想要通过一些操作将该地点唯一化：</p><p>首先，阿生会封闭一条已经存在的道路，接着，构建一条新道路，在这两个操作之后，这 <em>n</em>−1条道路依然可以使<em>n</em> 个地点两两相通，同时，最佳地点只有一个。</p><p>但是，阿生只擅长debug代码，并不精通这个，所以请你给出任意一种可以达成要求的合法方案。</p><h2 id="输入格式-14">输入格式:</h2><p>本题为多组测试数据，第一行输入一个正整数<span class="math inline">\(T(1≤T≤10^{5})\)</span> ，代表测试数据组数。</p><p>对于每组测试数据，第一行输入一个正整数 <span class="math inline">\(n(3≤n≤10^{5})\)</span>，代表候选地的数量。 接下去<em>n</em>−1 行，每行两个正整数<em>u</em>,<em>v</em>(1≤<em>u</em>,<em>v</em>≤<em>n</em>,<em>u</em>\=<em>v</em>) ，代表候选地<em>u</em>,<em>v</em>之间存在一条道路 (无向边)。</p><p>数据保证，每组测试数据给出的道路一定可以使<em>n</em>个候选地两两相通，同时，所有测试数据的<em>n</em>之和不会超过<span class="math inline">\(10^{6}\)</span> .</p><h2 id="输出格式-14">输出格式:</h2><p>对于每组测试数据，输出两行，第一行输出两个正整数<span class="math inline">\(u_{1},v_{1}\)</span>,代表封闭原道路 <span class="math inline">\(u_{1},v_{1}\)</span>，这条道路必须存在。 第二行输出两个正整数，代<span class="math inline">\(u_{2},v_{2}\)</span>表增加一条道路<span class="math inline">\(u_{2},v_{2}\)</span> ，这条道路必须在原道路中不存在或者已经被封闭。</p><p>如果存在多种解，任意输出一种即可，只需要保证满足题意。</p><h2 id="输入样例-12">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure><h2 id="输出样例-12">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 1</span><br><span class="line">3 4</span><br><span class="line">4 1</span><br></pre></td></tr></table></figure><h2 id="算法思路-14">算法思路</h2><p>​ 因为是两两相互可以到达，所以是一棵树，我们可以按序号1为根节点进行dfs。</p><p>​ 在dfs中计算它的子树中最大的子树，然后和除其自身和其子树的结点取最大。dfs中取<span class="math inline">\(w_{i}\)</span>最小的值minv</p><p>​ dfs结束后，如果能得到minv的结点只有一个，那么随便删一条边，然后再添上即可。我们可以选择根节点1和其连边删掉和添加即可。</p><p>​ 如果有两个的结点可以得到minv（此时应该树是对称的），记为u、v,我们选择把v的其中一个子树接到u上即可，此时u应该为唯一的点。</p><h2 id="ac代码-14">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,fail;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        v = _v,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,len,head[N],w[N],minv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++len] = <span class="built_in">Edge</span>(v,head[u]);</span><br><span class="line">    head[u] = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>,mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i ; i = e[i].fail)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v == f)  <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        sum += t;</span><br><span class="line">        mx = <span class="built_in">max</span>(t,mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在除它及其子树的其他结点 和 它最大子树 中取最大</span></span><br><span class="line">    w[u] = <span class="built_in">max</span>(n - sum,mx);</span><br><span class="line">    minv = <span class="built_in">min</span>(minv,w[u]);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    len = <span class="number">0</span>,minv = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) head[i] = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> s1 = <span class="number">0</span>,s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i] == minv)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1 == <span class="number">0</span>) s1 = i;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s2 = i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s2 == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e[head[<span class="number">1</span>]].v &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e[head[<span class="number">1</span>]].v &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; s2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e[head[s2]].v &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; s1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e[head[s2]].v &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--)  <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿川的实验课"><strong>7-16 阿川的实验课</strong></h1><p>阿川每周都有很多的实验课要上，每次都要从生活区的东北角走到教学区的西南角，途中要路过女生宿舍，食堂等等，假设共有n座排成一行，阿川从第一栋一直走到了最后一栋，阿川每次都要走这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住）</p><h2 id="输入格式-15">输入格式:</h2><p>第一行n:1 &lt;= n &lt;= 1e5</p><p>接下来n行 第i行<span class="math inline">\(w_{i}\)</span> 表示第i栋楼的高度 <span class="math inline">\(1 &lt;= w_{i} &lt;= 10^{5}\)</span>。</p><h2 id="输出格式-15">输出格式:</h2><p>输出共n行，每行一个整数表示当前楼可以看到的楼的数量。</p><h2 id="输入样例-13">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 3 8 3 2 5</span><br></pre></td></tr></table></figure><h2 id="输出样例-13">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="算法思路-15">算法思路</h2><p>​ <img src="/2022/10/04/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/blog/hexoblog/source/_posts/img/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83-%E5%BB%BA%E7%AD%91.png" style="zoom: 50%;"></p><p>如果我们现在在第5个建筑，那么我们只能看到建筑3，4和建筑6</p><p>可以得到，如果我们在第i个建筑：</p><ul><li>向左看，只需要关心<span class="math inline">\((i-1)\sim1\)</span>的最长上升子序列，即从<span class="math inline">\(1\sim(i-1)\)</span>的对于i的最长下降子序列</li><li>向右看，只需要关心<span class="math inline">\((i+1)\sim n\)</span>的最长上升子序列，即从<span class="math inline">\(n\sim(i+1)\)</span>的对于i的最长下降子序列</li></ul><p>为什么要进行转换，因为i是变化的，如果不转换，对于每次i的变化，都要重新计算最长上升子序列，所以我们进行转化，定下起点，这样只需要计算一次即可。</p><p>​ 用set的方法不太可行，set可以不选择最高的建筑，这样结果会比预期的大，比如5 3 8 3,那么f[3] = 2,而不是f[3] = 1,因为set的话，不选择8,所以得到f[3]=2</p><h2 id="ac代码-15">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],b[N],len,Left[N],Right[N],f1[N],f2[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i],a[i] = -a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(Left + <span class="number">1</span>,Left + <span class="number">1</span> + len,a[i]) - Left;</span><br><span class="line">        Left[pos] = a[i];</span><br><span class="line">        len = <span class="built_in">max</span>(pos + <span class="number">1</span>,len);</span><br><span class="line">        <span class="comment">//算上当前建筑，加上比当前建筑还高的建筑而且递减的数量</span></span><br><span class="line">        f1[i] = pos;</span><br><span class="line">    &#125;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(Right + <span class="number">1</span>,Right + <span class="number">1</span> + len,a[i]) - Right;</span><br><span class="line">        Right[pos] = a[i];</span><br><span class="line">        len = <span class="built_in">max</span>(pos + <span class="number">1</span>,len);</span><br><span class="line">        f2[i] = pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cout &lt;&lt; f1[i - <span class="number">1</span>] + f2[i + <span class="number">1</span>] + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hbu最亮的崽"><strong>7-17 HBU最亮的崽</strong></h1><p>HBU的孩子们都有一个梦想，那就是成为学校中中最受欢迎的人。在<em>N</em>(1&lt;=<em>N</em>&lt;=10000)个孩子中，你会得到<em>M</em>(1&lt;=<em>M</em>&lt;=50000)对(<em>A</em>，<em>B</em>)的有序排列，即A认为B是受欢迎的。并且受欢迎是传递的，如果A认为B是受欢迎的，B认为C是受欢迎的，那么A也会认为C是受欢迎的</p><h2 id="输入格式-16">输入格式:</h2><p>第一行: 两个正整数N和M</p><p>第二行到1+M行: 每行两个正整数<em>A</em>,<em>B</em>,即<em>A</em>认为<em>B</em>是受欢迎的</p><h2 id="输出格式-16">输出格式:</h2><p>共一行，即受到所有人欢迎的学生的数量。</p><h2 id="输入样例-14">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h2 id="输出样例-14">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="算法思路-16">算法思路</h2><p>​ 找强连通分量，然后进行缩点，如果新的点的入度是其他点的数量，那么该新建点所对应的强连通分量的点都是受所有人欢迎的</p><h2 id="ac代码-16">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,fail;</span><br><span class="line">    <span class="built_in">edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="keyword">int</span> _u,<span class="keyword">int</span> _v,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        u = _u,v = _v,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> n,m,tim,len,cnt,head[N],in[N];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],all[N],scc[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++len] = <span class="built_in">edge</span>(u,v,head[u]);</span><br><span class="line">    head[u] = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++tim;</span><br><span class="line">    st.<span class="built_in">push</span>(u);</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u];i ; i = e[i].fail)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u] == low[u])&#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">while</span>(v = st.<span class="built_in">top</span>())&#123;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            vis[v] = <span class="number">0</span>;</span><br><span class="line">            scc[v] = cnt;</span><br><span class="line">            all[cnt]++;</span><br><span class="line">            <span class="keyword">if</span>(v == u)  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = scc[e[i].u],v = scc[e[i].v];</span><br><span class="line">        <span class="keyword">if</span>(u != v)  in[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == cnt - <span class="number">1</span>)&#123;</span><br><span class="line">            res = all[i];</span><br><span class="line">            num++;</span><br><span class="line">            <span class="comment">//if(num &gt; 1) res = 0;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿生爱数学"><strong>7-18 阿生爱数学</strong></h1><p>阿生发现当已知<em>x</em>∗<em>y</em> =<em>B</em>以及<em>x</em>+<em>y</em>=<em>A</em>时,能很轻易的算出<span class="math inline">\(x^{2}+y^{2}\)</span>的值.但小强想请你在已知<em>A</em> 和<em>B</em>的情况下,计算出的<span class="math inline">\(x^{n}+y^{n}\)</span>值.因为这个结果可能很大,所以所有的运算都在模1<em>e</em>9+7下进行。</p><h2 id="输入格式-17">输入格式:</h2><p>第一行输入一个正整数<em>T</em>.表示有<em>T</em>组数据 接下来<em>T</em>行,每行输入三个整数<em>A</em>,<em>B</em>和<em>n</em>.</p><p>1≤<em>T</em>≤100</p><p>0≤<em>A</em>,<em>B</em>≤1<em>e</em>9+7</p><p>1≤<em>n</em>≤1<em>e</em>5</p><h2 id="输出格式-17">输出格式:</h2><p>输出<em>T</em>行,每一行表示每组数据的结果。</p><h2 id="输入样例-15">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 3</span><br><span class="line">2 3 4</span><br><span class="line">5 2 6</span><br></pre></td></tr></table></figure><h2 id="输出样例-15">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line">999999993</span><br><span class="line">9009</span><br></pre></td></tr></table></figure><h2 id="算法思路-17">算法思路</h2><p><span class="math inline">\(f(1) = x + y = A\)</span></p><p><span class="math inline">\(f(2) = x^{2} + y^{2} = (x+y)*(x+y) - 2xy=A^{2}-2B\)</span></p><p><span class="math inline">\(f(3) = x^{3} + y^{3}=(x+y)*(x^{2}+y^{2})-xy^{2}-x^{2}y\\=(x+y)*(x^{2}+y^{2})-xy(x+y)\\=A*f(2)-B*f(1)\)</span></p><p><span class="math inline">\(f(4) = x^{3} + y^{3} = (x+y)*(x^{3}+y^{3})-xy^{3}-x^{3}y\\=(x+y)*(x^{3}+y^{3})-xy(x^{2}+y^{2})\\=A*f(3)-B*f(2)\)</span></p><p><span class="math inline">\(f(n) = x^{n} + y^{n} = (x+y)*(x^{n-1}+y^{n-1})-xy^{n-1}-x^{n-1}y\\=(x+y)*(x^{n-1}+y^{n-1})-xy(x^{n-1}+y^{n-1})\\=A*f(n-1)-B*f(n-2),n&gt;= 3\)</span></p><p>初始化f[1]和f[2]，然后根据递归规律计算f[n]即可</p><h2 id="ac代码-17">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,f[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A,B;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; n;</span><br><span class="line">    f[<span class="number">1</span>] = A,f[<span class="number">2</span>] = ((A * A - <span class="number">2</span> * B) % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">        f[i] = (A * f[i - <span class="number">1</span>] % mod - B * f[i - <span class="number">2</span>] % mod + mod) % mod;</span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阿生的视野"><strong>7-19 阿生的视野</strong></h1><p>阿生在进行一场5v5王者竞技游戏,但遗憾的是阿生被对面针对了，对方打野疯狂针对他，导致他不得不点亮整个河道来确保自身的安全，阿生的游戏体验就寄托在能否能获得一条长度为L的河道的全部视野,即可以看作是[0,L]的一条数轴。</p><p>游戏当中有n个可以提供视野的真视守卫,第i个真视守卫能够覆盖区间<span class="math inline">\([x_{i},y_{i}]\)</span>。现在阿生想知道至少用几个真视守卫就可以覆盖整个河道来保证自己的游戏体验。</p><h2 id="输入格式-18">输入格式:</h2><p>输入包括n+1行。</p><p>第一行包括两个正整数n和L(1&lt;=<em>n</em>&lt;=105,1&lt;=<em>L</em>&lt;=109)</p><p>接下来的n行,每行两个正整数<em>x<strong>i<em>,</em>y</strong>i</em>(0&lt;=<em>x<strong>i<em>&lt;=</em>y</strong>i</em>&lt;=109),表示第i个真视守卫覆盖的区间。</p><h2 id="输出格式-18">输出格式:</h2><p>一个整数，表示最少需要的真视守卫数量, 如果无解, 输出-1。</p><h2 id="输入样例-16">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">5 6</span><br><span class="line">2 4</span><br><span class="line">0 3</span><br><span class="line">4 8</span><br></pre></td></tr></table></figure><h2 id="输出样例-16">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="算法思路-18">算法思路</h2><p>​ 贪心，按照左端点进行升序，右端点降序，然后初始化r=0</p><p>​ 如果第一段的起点不是0，直接判掉。</p><p>​ 然后r代表当前能走到的最远距离，然后从左端点在[0,r]的区间中找到最远的右端点，如果找到的右端点&lt;=r，那么说明没办法再前进了，输出-1，否则更新右端点，计数器cnt+1。</p><h2 id="ac代码-18">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,f[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node &amp;a,<span class="keyword">const</span> Node &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.l != b.l)  <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">    <span class="keyword">return</span> a.r &gt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        a[i].l = l,a[i].r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a + n,cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>].l != <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>,r = <span class="number">0</span>,pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; L)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(a[pos].l &lt;= r)&#123;</span><br><span class="line">                mx = <span class="built_in">max</span>(mx,a[pos].r);</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mx &lt;= r)&#123;</span><br><span class="line">                flag = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">            r = mx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="铺设网线"><strong>7-20 铺设网线</strong></h1><p>阿生想在宿舍连上HBU的VIP专属校园网。不幸的是，他的账号无法通过WIFI连接，所以他需要架设一些连接学校路由器到所在宿舍所需的网线。</p><p>学校免费提供<em>N</em>台可用的路由器，编号为1⋯<em>N</em>，位于学校到阿生宿舍之间，它们之间没有网线连接。</p><p>此外，学校还提供了<em>P</em>根网线,第<em>i</em>根网线可以连接两个不同的路由器<span class="math inline">\(A_{i}\)</span>和<span class="math inline">\(B_{i}\)</span>，长度为<span class="math inline">\(L_{i}（1≤L_{i}≤1000000)\)</span>。1号路由器已连接到校园网，阿生宿舍路由器编号为<em>N</em>。</p><p>同时，学校愿意在P根网线中为阿生提供<em>K</em>(0≤<em>K</em>&lt;<em>N</em>)条免费网线。也就是说，阿生需要连到校园网，需要的网线不大于K的话，阿生可以免费连接，否则，他需要支付除去K条网线之外的最长的一个网线的价格，输出该网线对应的长度即可，没有则输出0。</p><h2 id="输入格式-19">输入格式:</h2><p>第1行：三个整数：<em>N</em>、<em>P</em>和<em>K</em></p><p>第2行到第<em>P</em>+1:第<em>i</em>+1行包含三个空格分隔的整数：<span class="math inline">\(A_{i}\)</span>、<span class="math inline">\(B_{i}\)</span>和<span class="math inline">\(L_{i}\)</span></p><h2 id="输出格式-19">输出格式:</h2><p>共1行：一个整数，阿生可以支付的最低金额。如果无法连接到校园网，请打印-1。</p><h2 id="输入样例-17">输入样例:</h2><p>在这里给出一组输入。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 7 1</span><br><span class="line">1 2 5</span><br><span class="line">3 1 4</span><br><span class="line">2 4 8</span><br><span class="line">3 2 3</span><br><span class="line">5 2 9</span><br><span class="line">3 4 7</span><br><span class="line">4 5 6</span><br></pre></td></tr></table></figure><h2 id="输出样例-17">输出样例:</h2><p>在这里给出相应的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="算法思路-19">算法思路</h2><p>​ 真的没想到是二分。我们把网线的价格定义在[l,r]中，为了保证我们花费最小，我们当然希望把K次免费的机会用于最贵的线路。所以我们可以采取二分的方法，找到[l,r]中能够使K次免费机会使用完的最大下限mid，这样就可以找到需要支付的最低价格。</p><p>​ 我们在[l,r]进行二分，计算mid，对于w&gt;mid的线路，我们将价格置成1，w&lt;=mid的线路置成0,那么通过Dijkstra计算出的最短距离即为路径中w&gt;mid的线路数num，如果num&gt;=K,那么把区间进行缩小到[mid+1,r]，否则缩小到[l,mid]</p><p>​ 二分结束后，如果dis[1]为无穷大，那么说明不可达，输出-1，否则输出ans（mid）即可</p><h2 id="ac代码-19">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,c,fail;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _v,<span class="keyword">int</span> _w,<span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        v = _v,w = _w,fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,len,head[N],dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[len] = <span class="built_in">Edge</span>(v,w,head[u]);</span><br><span class="line">    head[u] = len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; qu;</span><br><span class="line">    qu.<span class="built_in">push</span>(&#123;<span class="number">0</span>,s&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!qu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = qu.<span class="built_in">top</span>().second;</span><br><span class="line">        qu.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])  <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i ; i = e[i].fail)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].v,w = e[i].c;</span><br><span class="line">            <span class="keyword">if</span>(dis[u] + w &lt; dis[v])&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                qu.<span class="built_in">push</span>(&#123;dis[v],v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[<span class="number">1</span>] &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx,w);</span><br><span class="line">        <span class="built_in">add</span>(u,v,w);<span class="built_in">add</span>(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = mx,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[i].w &gt; mid)  e[i].c = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>    e[i].c = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dijkstra</span>(n)) ans = mid,r = mid;</span><br><span class="line">        <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[<span class="number">1</span>] &gt;= INF)   <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;阿生的和谐树&quot;&gt;&lt;strong&gt;7-1 阿生的和谐树&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;阿生上学的路上从左到右有&lt;em&gt;N&lt;/em&gt;棵树编号(1～&lt;em&gt;N&lt;/em&gt;)，其中第&lt;em&gt;</summary>
      
    
    
    
    <category term="pta" scheme="http://wangxu1905.github.io/categories/pta/"/>
    
    <category term="省赛训练" scheme="http://wangxu1905.github.io/categories/pta/%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="图论" scheme="http://wangxu1905.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="数论" scheme="http://wangxu1905.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
    <category term="贪心" scheme="http://wangxu1905.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="树状数组" scheme="http://wangxu1905.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="主席树" scheme="http://wangxu1905.github.io/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>202209-2 何以包邮？</title>
    <link href="http://wangxu1905.github.io/2022/10/04/202209-2%20%E4%BD%95%E4%BB%A5%E5%8C%85%E9%82%AE%EF%BC%9F/"/>
    <id>http://wangxu1905.github.io/2022/10/04/202209-2%20%E4%BD%95%E4%BB%A5%E5%8C%85%E9%82%AE%EF%BC%9F/</id>
    <published>2022-10-04T01:55:50.766Z</published>
    <updated>2022-10-06T12:06:30.692Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="题目描述">题目描述</h2><p>新学期伊始，适逢顿顿书城有购书满 x 元包邮的活动，小 P 同学欣然前往准备买些参考书。 一番浏览后，小 P 初步筛选出 n 本书加入购物车中，其中第 i 本（1≤i≤n）的价格为 ai 元。 考虑到预算有限，在最终付款前小 P 决定再从购物车中删去几本书（也可以不删），使得剩余图书的价格总和 m 在满足包邮条件（m≥x）的前提下最小。</p><p>试帮助小 P 计算，最终选购哪些书可以在凑够 x 元包邮的前提下花费最小？</p><h2 id="输入格式">输入格式</h2><p>从标准输入读入数据。</p><p>输入的第一行包含空格分隔的两个正整数 n 和 x，分别表示购物车中图书数量和包邮条件。</p><p>接下来输入 n 行，其中第 i 行（1≤i≤n）仅包含一个正整数 ai，表示购物车中第 i 本书的价格。输入数据保证 n 本书的价格总和不小于 x。</p><h2 id="输出格式">输出格式</h2><p>输出到标准输出。</p><p>仅输出一个正整数，表示在满足包邮条件下的最小花费。</p><h2 id="样例1输入">样例1输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 100</span><br><span class="line">20</span><br><span class="line">90</span><br><span class="line">60</span><br><span class="line">60</span><br></pre></td></tr></table></figure><h2 id="样例1输出">样例1输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110</span><br></pre></td></tr></table></figure><h2 id="样例1解释">样例1解释</h2><p>购买前两本书（20+90）即可包邮且花费最小。</p><h2 id="样例2输入">样例2输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 30</span><br><span class="line">15</span><br><span class="line">40</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="样例2输出">样例2输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="样例2解释">样例2解释</h2><p>仅购买第三本书恰好可以满足包邮条件。</p><h2 id="样例3输入">样例3输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 90</span><br><span class="line">50</span><br><span class="line">50</span><br></pre></td></tr></table></figure><h2 id="样例3输出">样例3输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="样例3解释">样例3解释</h2><p>必须全部购买才能包邮。</p><h2 id="算法思路">算法思路</h2><p>​ 这题超简单，01背包板子，f[i]表示能否得到价值i的方案</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,p,x,a[N],b[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        m += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= a[i]; --j)</span><br><span class="line">            f[j] |= f[j - a[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i])&#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;新学期伊始，适逢顿顿书城有购书满 x 元包邮的活动，小 P 同学欣然前往准备买些参考书。 一番浏览后，小 P 初步筛选出 n 本书加入购物车中，其中第 i 本（1≤i≤n）的</summary>
      
    
    
    
    <category term="csp" scheme="http://wangxu1905.github.io/categories/csp/"/>
    
    <category term="第二题" scheme="http://wangxu1905.github.io/categories/csp/%E7%AC%AC%E4%BA%8C%E9%A2%98/"/>
    
    
    <category term="01背包" scheme="http://wangxu1905.github.io/tags/01%E8%83%8C%E5%8C%85/"/>
    
    <category term="dp" scheme="http://wangxu1905.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>The 2022 ICPC Asia Regionals Online Contest (II)</title>
    <link href="http://wangxu1905.github.io/2022/09/30/The%202022%20ICPC%20Asia%20Regionals%20Online%20Contest%20(II)/"/>
    <id>http://wangxu1905.github.io/2022/09/30/The%202022%20ICPC%20Asia%20Regionals%20Online%20Contest%20(II)/</id>
    <published>2022-09-30T10:15:55.734Z</published>
    <updated>2022-09-30T12:32:07.933Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="题目链接">题目链接</h2><p><a href="https://pintia.cn/problem-sets/1574060137151397888/exam/problems/1574060247893606409">题目详情 - J A Game about Increasing Sequences (pintia.cn)</a></p><h2 id="题目描述">题目描述</h2><p>​ 给定一个长度为n的数组集合，每次只能从数组开头或结尾进行删除一个元素操作，而且每次删除的值必须严格比上一次删除的大，谁先不能操作谁输。Alice先操作，双方按最优策略进行操作，输出谁赢。</p><h2 id="算法思路">算法思路</h2><p>​ 按两类情况讨论,我们把两端记作L段,R段</p><ul><li>L段大，R段小，如果L段的最长上升序列是奇数，Alice是必胜，否则他只能选择R段</li><li>L段和R段一样大，如果存在一边的最长上升序列是奇数，则Alice是必胜，否则Alice必败</li></ul><p>我们再去仔细考虑第一种情况，如果Alice被迫选择R段，我们考虑会不会出现中间突然选择L段，如果某一个人突然选择L段，分成三种情况：</p><ul><li>此时两边一样大，那突然选L段的那个人必输，所以他不会这么做</li><li>L段还是大，R段还是小，那么选L段的那个人必输，所以他不会这么做</li><li>L段是小的，R段是大的，如果突然选L段的话，肯定是R段的数量对于他是偶数，而且我们也知道L段是偶数，那么只要对手(Alice/Bob)去模仿他的行动，那么突然选L段的人必输</li></ul><p>所以，我们不需要考虑有人会突然变换选择端的位置</p><p>综上，可以得到，对于初始情况，只要存在一端的最长上升序列是奇数，那么Alice必胜，否则Alice必败</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i - <span class="number">1</span>]) l++; </span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i + <span class="number">1</span>]) r++; </span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l &amp; <span class="number">1</span> || r &amp; <span class="number">1</span>)  <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/1574060137151397888/exam/problems/1574060247893</summary>
      
    
    
    
    <category term="ICPC" scheme="http://wangxu1905.github.io/categories/ICPC/"/>
    
    <category term="网络赛" scheme="http://wangxu1905.github.io/categories/ICPC/%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    
    
    <category term="博弈论" scheme="http://wangxu1905.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 270</title>
    <link href="http://wangxu1905.github.io/2022/09/30/AtCoder%20Beginner%20Contest%20270/"/>
    <id>http://wangxu1905.github.io/2022/09/30/AtCoder%20Beginner%20Contest%20270/</id>
    <published>2022-09-30T03:20:40.111Z</published>
    <updated>2022-10-08T10:03:54.592Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="d---stones"><strong>D - Stones</strong></h1><h2 id="题目链接">题目链接</h2><p><a href="https://atcoder.jp/contests/abc270/tasks/abc270_d">D - Stones (atcoder.jp)</a></p><h2 id="题目描述">题目描述</h2><p>​ 有一堆石头，有n个石子和一个数组集合，两个人玩游戏，每个人每次可以从数组集合中选择一个数，表示拿走这么多的石子，请问在两个人都最优的那石子的情况下，先手最多能拿多少石子</p><h2 id="算法思路">算法思路</h2><p>​ 由于数据量很小，可以考虑记忆化搜索，我们定义<span class="math inline">\(f[i][0/1]\)</span>表示这一步是Alice或者Bob能够使得两人石子之差最大/最小是多少，跑一遍记忆化搜索即可。Alice取max，Bob取min。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">差值为k,则Alice为x + k,Bob为x</span><br><span class="line">    则x + k + x = n，解得x = (n - k) / <span class="number">2</span></span><br><span class="line">    那么Alice：x + k = (n - k) / <span class="number">2</span> + k = (n + k) / <span class="number">2</span></span><br><span class="line">    = (n + <span class="built_in">dfs</span>(n,<span class="number">0</span>)) / <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,p,idx,a[N],b[N],f[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(f[n][now] != <span class="number">-1</span>)    <span class="keyword">return</span> f[n][now];</span><br><span class="line">    <span class="keyword">if</span>(now)&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">            <span class="keyword">if</span>(n &gt;= a[i])   res = <span class="built_in">min</span>(res,<span class="built_in">dfs</span>(n - a[i],<span class="number">0</span>) - a[i]);</span><br><span class="line">        <span class="keyword">return</span> f[n][now] = res;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">            <span class="keyword">if</span>(n &gt;= a[i])   res = <span class="built_in">max</span>(res,<span class="built_in">dfs</span>(n - a[i],<span class="number">1</span>) + a[i]);</span><br><span class="line">        <span class="keyword">return</span> f[n][now] = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    cout &lt;&lt; (n + <span class="built_in">dfs</span>(n,<span class="number">0</span>)) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="e---apple-baskets-on-circle"><strong>E - Apple Baskets on Circle</strong></h1><h2 id="题目链接-1">题目链接</h2><p><a href="https://atcoder.jp/contests/abc270/tasks/abc270_e">E - Apple Baskets on Circle (atcoder.jp)</a></p><h2 id="题目描述-1">题目描述</h2><p>​ 有n个篮子，每个篮子里都有一些苹果，从第一个篮子开始，如果篮子里有苹果，则吃掉一个。然后走到下一个篮子，所有的篮子围成环形，求这个人吃掉k个苹果后的每个篮子里还剩下多少个苹果。</p><h2 id="算法思路-1">算法思路</h2><p>​ 调了4个小时。。。哎</p><p>​ 为了减少修改线段树结点的次数，我们每次都是尽可能地把修改的值提高到最大。</p><p>​ 线段树维护的是区间能吃的篮子的数量cnt，区间除0外的区间的苹果最小值minv（如果为0的话，可以定义成INF），tag为懒标记，标记为吃的苹果数量</p><p>​ 我们每一次都吃掉所有有苹果篮子的最小值的苹果，前提是k还足够的情况下，如果k不够的话，那么就向下取整，如果k都不够所有有苹果篮子的数量，直接循环遍历一遍即可，反正也才O（n）</p><p>​ 如果某一个篮子的苹果被吃完了，则要下放到叶子结点去，将该节点做上标记，并将最小值赋值成INF，cnt = 0，这样就不会影响到其他有苹果的篮子的最小值。</p><p>​ 还有注意最后查询a[i]的值的时候，别用minv和1e12，判断，要用cnt判断，血的教训，数据真大，1e18吃到了1e12一下，WA了好多发</p><h2 id="ac代码-1">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,cnt,minv,tag;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].cnt = tr[u &lt;&lt; <span class="number">1</span>].cnt + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt;</span><br><span class="line">    tr[u].minv = <span class="built_in">min</span>(tr[u &lt;&lt; <span class="number">1</span>].minv,tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushadd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果结点不为0，则进行修改</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].cnt &amp;&amp; c)&#123;</span><br><span class="line">        tr[u].tag += c;</span><br><span class="line">        tr[u].minv -= c;</span><br><span class="line">        <span class="comment">//修改后，结点为0，则赋值成INF</span></span><br><span class="line">        <span class="keyword">if</span>(tr[u].minv == <span class="number">0</span>) tr[u].minv = INF,tr[u].cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pushadd</span>(u &lt;&lt; <span class="number">1</span>,tr[u].tag);</span><br><span class="line">    <span class="built_in">pushadd</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,tr[u].tag);</span><br><span class="line">    tr[u].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u] = &#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l] &gt; <span class="number">0</span>)    tr[u].minv = a[l],tr[u].cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>    tr[u].minv = INF,tr[u].cnt = <span class="number">0</span>;</span><br><span class="line">        tr[u].tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//叶结点直接修改</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == tr[u].r)&#123;</span><br><span class="line">        <span class="built_in">pushadd</span>(u,c);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果还用剩余，只需要修改</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].minv &gt; c)&#123;</span><br><span class="line">        <span class="built_in">pushadd</span>(u,c);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果变为0了，则下放到叶结点</span></span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,c);</span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,c);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="comment">//用cnt判断是否为0</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == tr[u].r)&#123;</span><br><span class="line">        a[tr[u].l] = (tr[u].cnt) ? tr[u].minv : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>),<span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="comment">//如果k大于能吃的篮子的数量</span></span><br><span class="line">    <span class="keyword">while</span>(k &gt; tr[<span class="number">1</span>].cnt)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = tr[<span class="number">1</span>].cnt * tr[<span class="number">1</span>].minv;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= k)&#123;</span><br><span class="line">            k -= num;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,tr[<span class="number">1</span>].minv);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不够的话，则向下取整</span></span><br><span class="line">            <span class="keyword">int</span> c = k / tr[<span class="number">1</span>].cnt;</span><br><span class="line">            k -= c * tr[<span class="number">1</span>].cnt;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">query</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp;&amp; a[i])    a[i] -= <span class="number">1</span>,k--;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---transportation"><strong>F - Transportation</strong></h1><h2 id="题目链接-2">题目链接</h2><p><a href="https://atcoder.jp/contests/abc270/tasks/abc270_f">F - Transportation (atcoder.jp)</a></p><h2 id="题目描述-2">题目描述</h2><p>​ 有n个岛屿，每次可以建三种道路，第一种：在两个岛屿之间建桥，第二种：在某一个岛屿上建立港口，所有建立港口的岛屿之间可以互相连接，第三种：在某一个岛屿上建立飞机场，所以建立飞机场的岛屿之间可以互相连接，求n个岛屿的最小生成树</p><h2 id="算法思路-2">算法思路</h2><p>​ 如果只考虑道路，那么就是个普通的最小生成树。但是考虑港口和飞机场的话，我们可以建立虚拟源点，作为港口的中转站或者飞机场的中转站，然后由此进行求解最小生成树，然后我们枚举是否建立港口或者飞机场即可</p><p>​ 注意每次Kruskal排序，都会打乱顺序，所以要重新添加道路信息</p><p>​ 虽说一共有七种组合：陆、海、空、陆海、路空、海空、陆海空</p><p>​ 但是单独的海、空很好计算，直接相加即可，也可以归到陆海和路空里，因为把道路考虑进去，只能使答案更小或者不变，不可能变大；同理海空可以归到陆海空里。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">港口的集合结点为<span class="number">1</span>，新要添加的结点为<span class="number">2</span></span><br><span class="line">    如果在<span class="number">2</span>建立港口代价为x，<span class="number">2</span>与港口集合中某一座岛屿建立道路代价为y</span><br><span class="line">    <span class="number">1.</span>x &gt; y，选择建立道路，对于后序结点选择是否建立港口没有影响，因为建立港口的代价只与自身有关</span><br><span class="line">    <span class="number">2.</span>x &lt; y，选择建立港口，对于后序答案无影响</span><br><span class="line">    <span class="number">3.</span>x == y,建什么都行，理由同上</span><br><span class="line">    </span><br><span class="line">主要是因为建立港口和飞机场的代价只与自身有关，道路的建立不影响是否建立港口和飞机场</span><br></pre></td></tr></table></figure><h2 id="ac代码-2">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>,M = <span class="number">6e5</span> + <span class="number">5</span>,INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> _u,<span class="keyword">int</span> _v,<span class="keyword">int</span> _w)&#123;</span><br><span class="line">        u = _u,v = _v,w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp;a,<span class="keyword">const</span> Edge &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M],e1[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,len,a[N],b[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x] == <span class="number">-1</span>)   <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u,v = e[i].v,w = e[i].w;</span><br><span class="line">        <span class="keyword">int</span> fa = <span class="built_in">find</span>(u),fb = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)&#123;</span><br><span class="line">            f[fb] = fa;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt++; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == n - <span class="number">1</span>)    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e1[i] = <span class="built_in">Edge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建道路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n,m));</span><br><span class="line">    <span class="comment">//建道路、机场</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,b[i]);</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">1</span>,n + m));</span><br><span class="line">    <span class="comment">//建道路、机场和港口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) e[i] = e1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        e[i + m] = <span class="built_in">Edge</span>(i,n + <span class="number">1</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        e[i + m + n] = <span class="built_in">Edge</span>(i,n + <span class="number">2</span>,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">min</span>(res,<span class="built_in">Kruskal</span>(n + <span class="number">2</span>,<span class="number">2</span> * n + m));</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;d---stones&quot;&gt;&lt;strong&gt;D - Stones&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/conte</summary>
      
    
    
    
    <category term="Atcoder" scheme="http://wangxu1905.github.io/categories/Atcoder/"/>
    
    <category term="ABC270" scheme="http://wangxu1905.github.io/categories/Atcoder/ABC270/"/>
    
    
    <category term="博弈论" scheme="http://wangxu1905.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="最小生成树" scheme="http://wangxu1905.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="势能线段树" scheme="http://wangxu1905.github.io/tags/%E5%8A%BF%E8%83%BD%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 136 (Rated for Div. 2)</title>
    <link href="http://wangxu1905.github.io/2022/09/30/Educational%20Codeforces%20Round%20136%20(Rated%20for%20Div.%202)/"/>
    <id>http://wangxu1905.github.io/2022/09/30/Educational%20Codeforces%20Round%20136%20(Rated%20for%20Div.%202)/</id>
    <published>2022-09-30T02:19:28.423Z</published>
    <updated>2022-09-30T02:51:00.406Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="题目链接">题目链接</h2><p><a href="https://codeforces.com/contest/1739/problem/C">Problem - C - Codeforces</a></p><h2 id="题目描述">题目描述</h2><p>​ 给定偶数张卡牌，卡牌上的数分别为1-n,两两不同。两个人玩卡牌游戏，一个人先打一张牌，然后后手必须打出比他更大的牌，否则他就输了。如果两个人都没有牌了，那么平手。两人轮流交换先打的顺序，求n张牌的情况下先手必胜、后手必胜和平手的方案数</p><h2 id="算法思路">算法思路</h2><p>​ 先手必胜的情况可以分成两种：</p><ul><li>先手拿到了n，那么只要第一次就出n，后手必输，那么先手剩下的n/2 - 1张牌是随便的，所以方案数为C(n - 1,n / 2 - 1)</li><li>先手拿到了n-1,那么先手出n-1，后手必出n，然后交换先后顺序，此时转移到n-2张牌，后手赢的方案数，即winB[n - 2]</li></ul><p>​ 平局的情况：</p><ul><li>平局的情况只有一种，即把n个数两两一组，Alice取第一组小的，第二组大的·····</li></ul><p>​ 后手必胜的情况：</p><ul><li>先手必胜和平局的情况的已经计算好了，只需要总数减掉就可以了</li></ul><p>​ 综上可得：</p><ul><li>先初始化：winA[2] = 1,winB[2] = 0</li><li>先手必胜：winA[n] = C(n - 1,n / 2 - 1) + winB[n - 2]</li><li>平局：1</li><li>后手必胜：winB[n] = ((C(n,n / 2) - 1 - winA[n] ) % mod + mod) % mod</li></ul><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">65</span>,mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,s,q,t,k,winA[N],winB[N],fact[N],infact[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)   res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a] * infact[b] % mod * infact[a - b] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    winA[<span class="number">2</span>] = <span class="number">1</span>,winB[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">        winA[i] = (<span class="built_in">C</span>(i - <span class="number">1</span>,i / <span class="number">2</span> - <span class="number">1</span>) + winB[i - <span class="number">2</span>]) % mod;</span><br><span class="line">        winB[i] = ((<span class="built_in">C</span>(i,i / <span class="number">2</span>) - <span class="number">1</span> - winA[i]) % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; winA[n] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; winB[n] &lt;&lt; <span class="string">&quot; 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        infact[i] = infact[i - <span class="number">1</span>] * <span class="built_in">qmi</span>(i,mod - <span class="number">2</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="built_in">init</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1739/problem/C&quot;&gt;Problem - C - Codeforces&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="codeforces" scheme="http://wangxu1905.github.io/categories/codeforces/"/>
    
    <category term="div2" scheme="http://wangxu1905.github.io/categories/codeforces/div2/"/>
    
    
    <category term="博弈论" scheme="http://wangxu1905.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="思维" scheme="http://wangxu1905.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>P1972 [SDOI2009] HH的项链</title>
    <link href="http://wangxu1905.github.io/2022/09/23/P1972%20[SDOI2009]%20HH%E7%9A%84%E9%A1%B9%E9%93%BE/"/>
    <id>http://wangxu1905.github.io/2022/09/23/P1972%20[SDOI2009]%20HH%E7%9A%84%E9%A1%B9%E9%93%BE/</id>
    <published>2022-09-23T13:22:01.345Z</published>
    <updated>2022-09-23T13:32:43.405Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="sdoi2009-hh的项链">[SDOI2009] HH的项链</h1><h2 id="题目描述">题目描述</h2><p>HH 有一串由各种漂亮的贝壳组成的项链。HH 相信不同的贝壳会带来好运，所以每次散步完后，他都会随意取出一段贝壳，思考它们所表达的含义。HH 不断地收集新的贝壳，因此，他的项链变得越来越长。</p><p>有一天，他突然提出了一个问题：某一段贝壳中，包含了多少种不同的贝壳？这个问题很难回答…… 因为项链实在是太长了。于是，他只好求助睿智的你，来解决这个问题。</p><h2 id="输入格式">输入格式</h2><p>一行一个正整数 <span class="math inline">\(n\)</span>，表示项链长度。<br>第二行 <span class="math inline">\(n\)</span> 个正整数 <span class="math inline">\(a_i\)</span>，表示项链中第 <span class="math inline">\(i\)</span> 个贝壳的种类。</p><p>第三行一个整数 <span class="math inline">\(m\)</span>，表示 HH 询问的个数。<br>接下来 <span class="math inline">\(m\)</span> 行，每行两个整数 <span class="math inline">\(l,r\)</span>，表示询问的区间。</p><h2 id="输出格式">输出格式</h2><p>输出 <span class="math inline">\(m\)</span> 行，每行一个整数，依次表示询问对应的答案。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 3 4 3 5</span><br><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">3 5</span><br><span class="line">2 6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>【数据范围】</p><p>对于 <span class="math inline">\(20\%\)</span> 的数据，<span class="math inline">\(1\le n,m\leq 5000\)</span>；<br>对于 <span class="math inline">\(40\%\)</span> 的数据，<span class="math inline">\(1\le n,m\leq 10^5\)</span>；<br>对于 <span class="math inline">\(60\%\)</span> 的数据，<span class="math inline">\(1\le n,m\leq 5\times 10^5\)</span>；<br>对于 <span class="math inline">\(100\%\)</span> 的数据，<span class="math inline">\(1\le n,m,a_i \leq 10^6\)</span>，<span class="math inline">\(1\le l \le r \le n\)</span>。</p><p>本题可能需要较快的读入方式，最大数据点读入数据约 20MB</p><h2 id="算法思路">算法思路</h2><p>​ 恍惚之间，感觉主席树(太难了，忘了咋写了)</p><p>​ 看题解，发现树状数组就能解决。</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,pos;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],pos[N],res[N],tr[N],vis[N];</span><br><span class="line">vector&lt;Node&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node &amp;a,<span class="keyword">const</span> Node &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &amp; -k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i))  tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = u; i ; i -= <span class="built_in">lowbit</span>(i))  res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.in&quot;,&quot;r&quot;,stdin);freopen(&quot;output.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        ve.<span class="built_in">push_back</span>(&#123;l,r,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(),ve.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = next; j &lt;= ve[i].r; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[a[j]])   <span class="built_in">add</span>(vis[a[j]],<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">add</span>(j,<span class="number">1</span>);</span><br><span class="line">            vis[a[j]] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        next = ve[i].r + <span class="number">1</span>;</span><br><span class="line">        res[ve[i].pos] = <span class="built_in">query</span>(ve[i].r) - <span class="built_in">query</span>(ve[i].l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cout &lt;&lt; res[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;sdoi2009-hh的项链&quot;&gt;[SDOI2009] HH的项链&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;HH 有一串由各种漂亮的贝壳组成的项链。HH 相信不同的贝壳会带来好运，所以每次</summary>
      
    
    
    
    <category term="洛谷" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="数据结构" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树状数组" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
    <category term="树状数组" scheme="http://wangxu1905.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>P5142 区间方差</title>
    <link href="http://wangxu1905.github.io/2022/09/23/P5142%20%E5%8C%BA%E9%97%B4%E6%96%B9%E5%B7%AE/"/>
    <id>http://wangxu1905.github.io/2022/09/23/P5142%20%E5%8C%BA%E9%97%B4%E6%96%B9%E5%B7%AE/</id>
    <published>2022-09-23T12:58:34.375Z</published>
    <updated>2022-09-23T13:21:05.183Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="区间方差">区间方差</h1><h2 id="题目背景">题目背景</h2><p>出题人并没有能力写有趣的题面……</p><h2 id="题目描述">题目描述</h2><p>对于一个长度为 <span class="math inline">\(n\)</span> 的序列 <span class="math inline">\(a_1,a_2,a_3\cdots a_n\)</span>，我们定义它的平均数 <span class="math inline">\(a\)</span> 为:</p><p><span class="math display">\[a=\frac{1}{n}\sum_{i=1}^{n}a_i\]</span></p><p>并定义它的方差 <span class="math inline">\(d\)</span> 为:</p><p><span class="math display">\[d=\frac{1}{n}\sum_{i=1}^{n}(a_i-a)^2\]</span></p><p>现在给定一个长度为 <span class="math inline">\(n\)</span> 的序列 <span class="math inline">\(b_1,b_2\cdots b_n\)</span>。你需要支持两种操作。每种操作的格式为 <code>c x y</code>。</p><p>若 <span class="math inline">\(c=1\)</span>，为修改操作，代表将 <span class="math inline">\(b_x\)</span> 赋值为 <span class="math inline">\(y\)</span>。</p><p>若 <span class="math inline">\(c=2\)</span>，为查询操作，代表查询 <span class="math inline">\(b_x\)</span> 到 <span class="math inline">\(b_y\)</span> 的方差。</p><p>为了避免浮点数误差，请以分数取模形式输出结果（对 1000000007（<span class="math inline">\(10^9+7\)</span>）取模）。</p><h2 id="输入格式">输入格式</h2><p>第一行两个整数 <span class="math inline">\(n,m\)</span>，代表序列 <span class="math inline">\(b\)</span> 的长度为 <span class="math inline">\(n\)</span>，有 <span class="math inline">\(m\)</span> 个操作。</p><p>第二行 <span class="math inline">\(n\)</span> 个整数 <span class="math inline">\(b_i\)</span>，表示序列 <span class="math inline">\(b\)</span> 的初始值。</p><p>下面有 <span class="math inline">\(m\)</span> 行整数，每行格式为 <code>c x y</code>，含义如上文所示。保证所有操作合法。</p><h2 id="输出格式">输出格式</h2><p>对于每个操作 2，输出一行。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4 8</span><br><span class="line">0 0 0 0</span><br><span class="line">1 1 1</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">1 4 4</span><br><span class="line">2 1 1</span><br><span class="line">2 1 2</span><br><span class="line">2 1 3</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">250000002</span><br><span class="line">666666672</span><br><span class="line">250000003</span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><h4 id="样例-1-解释">样例 1 解释</h4><p>四次修改后，序列 <span class="math inline">\(b\)</span> 为：<span class="math inline">\(\{1,2,3,4\}\)</span>。</p><p>区间 <span class="math inline">\([1,1]\)</span> 的方差为 <span class="math inline">\(0\)</span>。</p><p>区间 <span class="math inline">\([1,2]\)</span> 的方差为 <span class="math inline">\(\frac{1}{4}\)</span> 。<span class="math inline">\(4\)</span> 的逆元为 <span class="math inline">\(250000002\)</span>。</p><p>区间 <span class="math inline">\([1,3]\)</span> 的方差为 <span class="math inline">\(\frac{2}{3}\)</span>。<span class="math inline">\(3\)</span> 的逆元为 <span class="math inline">\(333333336\)</span>，<span class="math inline">\(2\times333333336\bmod M=666666672\)</span>。</p><h4 id="数据规模与约定">数据规模与约定</h4><ul><li>对于 <span class="math inline">\(50\%\)</span> 的数据，<span class="math inline">\(n\leq 1000\)</span>，<span class="math inline">\(m\leq 1000\)</span>。</li><li>对于 <span class="math inline">\(100\%\)</span> 的数据，<span class="math inline">\(1\leq n,m\leq 1\times 10^5\)</span>，<span class="math inline">\(1\leq b_i\leq 1\times 10^9\)</span>，<span class="math inline">\(1\leq x\leq n\)</span>。对于操作 1，<span class="math inline">\(1\leq y\leq 1\times 10^9\)</span>。对于操作2，<span class="math inline">\(x\leq y\leq n\)</span>。</li></ul><h2 id="算法思路">算法思路</h2><p>​ 我们把方差的式子进行展开化简即可，发现只需要维护区间和以及区间平方和即可。</p><p>​ 注：分数取模，即乘逆元</p><h2 id="ac代码">AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>,mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">&#125;tr[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,t,a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)   res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].v1 = (tr[u &lt;&lt; <span class="number">1</span>].v1 + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v1) % mod;</span><br><span class="line">    tr[u].v2 = (tr[u &lt;&lt; <span class="number">1</span>].v2 + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v2) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u] = &#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[u].v1 = a[l] * a[l],tr[u].v2 = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == x &amp;&amp; tr[u].r == x)&#123;</span><br><span class="line">        tr[u].v1 = k * k,tr[u].v2 = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,x,k);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,k);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PII <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= x &amp;&amp; tr[u].r &lt;= y)   <span class="keyword">return</span> &#123;tr[u].v1,tr[u].v2&#125;;</span><br><span class="line">    <span class="keyword">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res1 = <span class="number">0</span>,res2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)&#123;</span><br><span class="line">        PII tmp = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,x,y);</span><br><span class="line">        res1 += tmp.first,res2 += tmp.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y &gt; mid)&#123;</span><br><span class="line">        PII tmp = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,x,y);</span><br><span class="line">        res1 += tmp.first,res2 += tmp.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;res1,res2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.in&quot;,&quot;r&quot;,stdin);freopen(&quot;output.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> c,x,y;</span><br><span class="line">        cin &gt;&gt; c &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">1</span>)  <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            PII res = <span class="built_in">query</span>(<span class="number">1</span>,x,y);</span><br><span class="line">            <span class="keyword">int</span> x1 = res.first,x2 = res.second,nn = y - x + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> up = (x1 * nn % mod - x2 * x2 % mod) % mod;</span><br><span class="line">            <span class="keyword">int</span> down = nn * nn % mod; </span><br><span class="line">            <span class="keyword">int</span> gcd = __gcd(up,down);</span><br><span class="line">            up /= gcd,down /= gcd;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; up &lt;&lt; &quot;      &quot; &lt;&lt; down &lt;&lt; endl;</span></span><br><span class="line">            cout &lt;&lt; (up * <span class="built_in">qmi</span>(down,mod - <span class="number">2</span>) % mod + mod) % mod &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;区间方差&quot;&gt;区间方差&lt;/h1&gt;
&lt;h2 id=&quot;题目背景&quot;&gt;题目背景&lt;/h2&gt;
&lt;p&gt;出题人并没有能力写有趣的题面……&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;对于一个长度为 &lt;spa</summary>
      
    
    
    
    <category term="洛谷" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="数据结构" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="http://wangxu1905.github.io/categories/%E6%B4%9B%E8%B0%B7/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
    <category term="线段树" scheme="http://wangxu1905.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
</feed>
