<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1743. 从相邻元素对还原数组</title>
      <link href="/2021/07/25/1743.%20%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/"/>
      <url>/2021/07/25/1743.%20%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>存在一个由 n 个不同元素组成的整数数组 nums ，但你已经记不清具体内容。好在你还记得 nums 中的每一对相邻元素。</p><p>给你一个二维整数数组 adjacentPairs ，大小为 n - 1 ，其中每个 adjacentPairs[i] = [ui, vi] 表示元素 ui 和 vi 在 nums 中相邻。</p><p>题目数据保证所有由元素 nums[i] 和 nums[i+1] 组成的相邻元素对都存在于 adjacentPairs 中，存在形式可能是 [nums[i], nums[i+1]] ，也可能是 [nums[i+1], nums[i]] 。这些相邻元素对可以 按任意顺序 出现。</p><p>返回 原始数组 nums 。如果存在多种解答，返回 其中任意一个 即可</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs">https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：adjacentPairs = [[2,1],[3,4],[3,2]]<br>输出：[1,2,3,4]<br>解释：数组的所有相邻元素对都在 adjacentPairs 中。<br>特别要注意的是，adjacentPairs[i] 只表示两个元素相邻，并不保证其 左-右 顺序。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：adjacentPairs = [[4,-2],[1,4],[-3,1]]<br>输出：[-2,4,1,-3]<br>解释：数组中可能存在负数。<br>另一种解答是 [-3,1,4,-2] ，也会被视作正确答案。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：adjacentPairs = [[100000,-100000]]<br>输出：[100000,-100000]</p></blockquote><p><strong>提示：</strong></p><ul><li>nums.length == n</li><li>adjacentPairs.length == n - 1</li><li>adjacentPairs[i].length == 2</li><li>2 &lt;= n &lt;= 105</li><li>-105 &lt;= nums[i], ui, vi &lt;= 105</li><li>题目数据保证存在一些以 adjacentPairs 作为元素对的数组 nums</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    遍历vector，对出现的数字进行计数，若数字只出现一次，则其在整体的两端，根据确定的一端，依次推断第二位，第三位，直到最后一个元素</p><p>​    具体方法，使用哈希表记录每个元素的相邻元素有哪些，然后我们遍历哈希表，找到有且仅作为第二个元素，有一个相邻元素的元素e1作为结果数组的第一个元素，然后e1唯一相邻的元素，此时排除e2相邻的e1后，确定与e2相邻的e3作为第三个元素。。。以此类推，推断出全部的元素</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">restoreArray</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; adjacentPairs)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;adjacentPair : adjacentPairs)&#123;</span><br><span class="line">            mp[adjacentPair[<span class="number">0</span>]].<span class="built_in">push_back</span>(adjacentPair[<span class="number">1</span>]);</span><br><span class="line">            mp[adjacentPair[<span class="number">1</span>]].<span class="built_in">push_back</span>(adjacentPair[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n =adjacentPairs.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[e,adj] : mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(adj.<span class="built_in">size</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = e;</span><br><span class="line">                res[<span class="number">1</span>] = mp[res[<span class="number">0</span>]][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; adj = mp[res[i - <span class="number">1</span>]];</span><br><span class="line">            res[i] = res[i - <span class="number">2</span>] == adj[<span class="number">0</span>] ? adj[<span class="number">1</span>] : adj[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加</title>
      <link href="/2021/07/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2021/07/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong><br><img src="https://img-blog.csdnimg.cn/20210422183914727.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU3MzY0OTI3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：l1 = [0], l2 = [0]<br>输出：[0]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 &lt;= Node.val &lt;= 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，遍历两个链表间的相同的位，通过flag判断是否进位，然后，找出没有结束的链表，依次传值，同时判断是否进位，最后，若最高位通过进位变为10，则创建新的节点，其值为1.</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)&#123;   <span class="comment">//对l1,l2相同的位相加</span></span><br><span class="line">            <span class="keyword">if</span>(p -&gt; val == <span class="number">-1</span>)     <span class="comment">//若为头节点</span></span><br><span class="line">                p -&gt; val = (l1 -&gt; val + l2 -&gt; val + flag) % <span class="number">10</span>;   </span><br><span class="line">            <span class="keyword">else</span>&#123;        </span><br><span class="line">                ListNode* q  = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l1 -&gt; val + l2 -&gt; val + flag) % <span class="number">10</span>);</span><br><span class="line">                p -&gt; next = q;</span><br><span class="line">                p = p -&gt; next;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = (l1 -&gt; val + l2 -&gt; val + flag) &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;   <span class="comment">//判断是否进位</span></span><br><span class="line">            l1 = l1 -&gt; next;</span><br><span class="line">            l2 = l2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>)&#123;   <span class="comment">//l1有剩余</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l1 -&gt; val + flag ) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            flag = l1 -&gt; val + flag &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            l1 = l1 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="literal">NULL</span>)&#123;  <span class="comment">//l2有剩余</span></span><br><span class="line">            ListNode* q = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l2 -&gt; val + flag) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            flag = l2 -&gt; val + flag &gt;= <span class="number">10</span> ? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            l2 = l2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;   <span class="comment">//判断最高一位是否要进位</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="改进后的代码"><a href="#改进后的代码" class="headerlink" title="改进后的代码"></a>改进后的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)&#123;   <span class="comment">//对l1,l2判断是否为空</span></span><br><span class="line">        <span class="keyword">int</span> val1 = l1!=<span class="literal">NULL</span> ? l1-&gt;val : <span class="number">0</span>;       </span><br><span class="line">        <span class="keyword">int</span> val2 = l2!=<span class="literal">NULL</span> ? l2-&gt;val : <span class="number">0</span>;         </span><br><span class="line">            ListNode* q  = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (val1 + val2 + flag) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            flag = ( val1 + val2 + flag) &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;   <span class="comment">//判断是否进位</span></span><br><span class="line">            l1 = l1 != <span class="literal">NULL</span> ? l1 -&gt; next : l1;    <span class="comment">//链表为空，则仍为本身，否则指向下一个节点        </span></span><br><span class="line">            l2 = l2 != <span class="literal">NULL</span> ? l2-&gt; next : l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;   <span class="comment">//判断最高一位是否要进位</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="力扣题解里的递归解法"><a href="#力扣题解里的递归解法" class="headerlink" title="力扣题解里的递归解法"></a>力扣题解里的递归解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span> &amp;&amp; carry== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        l1 = l1 != <span class="literal">NULL</span> ? (carry += l1 -&gt; val,l1 -&gt; next) : l1;</span><br><span class="line">        l2 = l2 != <span class="literal">NULL</span> ? (carry += l2 -&gt; val,l2 -&gt; next) : l2;</span><br><span class="line">        ListNode* p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(carry % <span class="number">10</span>);</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">        p -&gt; next = <span class="built_in">addTwoNumbers</span>(l1,l2);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
