<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ STL vector的push_back()和emplace_back()</title>
      <link href="/2021/07/31/C++%20STL%20vector%E7%9A%84push_back()%E5%92%8Cemplace_back()/"/>
      <url>/2021/07/31/C++%20STL%20vector%E7%9A%84push_back()%E5%92%8Cemplace_back()/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>emplace_back() 和 push_back() 的区别，在于底层实现的机制不同。push_back() 向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，事后会自行销毁先前创建的这个元素）；而emplace_back() 在实现时，则是直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> num):<span class="built_in">num</span>(num) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; other) :<span class="built_in">num</span>(other.num) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(Test&amp;&amp; other) :<span class="built_in">num</span>(other.num) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用移动构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;emplace_back:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;Test&gt; demo1;</span><br><span class="line">demo1.<span class="built_in">emplace_back</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;push_back:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;Test&gt; demo2;</span><br><span class="line">    demo2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>emplace_back:<br>调用构造函数<br>push_back:<br>调用构造函数<br>调用移动构造函数</p></blockquote><p>把移动构造函数注释后，运行结果如下：</p><blockquote><p>emplace_back:<br>调用构造函数<br>push_back:<br>调用构造函数<br>调用拷贝构造函数</p></blockquote><p>由此可以看出，push_back() 在底层实现时，会优先选择调用移动构造函数，如果没有才会调用拷贝构造函数。</p><p>显然完成同样的操作，push_back() 的底层实现过程比 emplace_back() 更繁琐，换句话说，emplace_back() 的执行效率比 push_back() 高。因此，在实际使用时，建议大家优先选用 emplace_back()。</p><blockquote><p>由于 emplace_back() 是 C++ 11 标准新增加的，如果程序要兼顾之前的版本，还是应该使用 push_back()。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C++函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>987. 二叉树的垂序遍历</title>
      <link href="/2021/07/31/987.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/2021/07/31/987.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给你二叉树的根结点 root ，请你设计算法计算二叉树的 垂序遍历 序列。</p><p>对位于 (row, col) 的每个结点而言，其左右子结点分别位于 (row + 1, col - 1) 和 (row + 1, col + 1) 。树的根结点位于 (0, 0) 。</p><p>二叉树的 垂序遍历 从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，则按结点的值从小到大进行排序。</p><p>返回二叉树的 垂序遍历 序列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree">https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong></p><blockquote><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg" style="zoom: 80%;" /><p><strong>输入：</strong>root = [3,9,20,null,null,15,7]<br><strong>输出：</strong>[[9],[3,15],[20],[7]]<br><strong>解释：</strong><br>列 -1 ：只有结点 9 在此列中。<br>列  0 ：只有结点 3 和 15 在此列中，按从上到下顺序。<br>列  1 ：只有结点 20 在此列中。<br>列  2 ：只有结点 7 在此列中。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg" style="zoom: 80%;" /><p><strong>输入：</strong>root = [1,2,3,4,5,6,7]<br><strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]<br><strong>解释：</strong><br>列 -2 ：只有结点 4 在此列中。<br>列 -1 ：只有结点 2 在此列中。<br>列  0 ：结点 1 、5 和 6 都在此列中。<br>          1 在上面，所以它出现在前面。<br>          5 和 6 位置都是 (2, 0) ，所以按值从小到大排序，5 在 6 的前面。<br>列  1 ：只有结点 3 在此列中。<br>列  2 ：只有结点 7 在此列中。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg" style="zoom: 80%;" /><p><strong>输入：</strong>root = [1,2,3,4,6,5,7]<br><strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]<br><strong>解释：</strong><br>这个示例实际上与示例 2 完全相同，只是结点 5 和 6 在树中的位置发生了交换。<br>因为 5 和 6 的位置仍然相同，所以答案保持不变，仍然按值从小到大排序。</p></blockquote><p><strong>提示：</strong></p><ul><li>树中结点数目总数在范围 <code>[1, 1000]</code> 内</li><li>0 &lt;= Node.val &lt;= 1000</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    vector有个很好的优点，当对它进行排序时，会考虑里面所有的元素，升序遍历</p><p>​    首先通过DFS用三元组存储每个节点的行，列和值（由于垂序遍历是按列从左到右进行遍历，所以三元组为**&lt;列，行，值&gt;**），然后进行sort排序，返回结果</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">verticalTraversal</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; pos;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">dfs</span>(root,<span class="number">0</span>,<span class="number">0</span>,pos);</span><br><span class="line">        <span class="built_in">sort</span>(pos.<span class="built_in">begin</span>(),pos.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> lastrow = <span class="number">1001</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[row,col,val] : pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lastrow != row)&#123;</span><br><span class="line">                lastrow = row;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在res的最后一个里插入元素</span></span><br><span class="line">            res.<span class="built_in">back</span>().<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* node,<span class="keyword">int</span> col,<span class="keyword">int</span> row,vector&lt;tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; &amp;pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(&#123;row,col,node -&gt; val&#125;);</span><br><span class="line">        <span class="comment">//左子树，行+1，列-1</span></span><br><span class="line">        <span class="built_in">dfs</span>(node -&gt; left,col + <span class="number">1</span>,row - <span class="number">1</span>,pos);</span><br><span class="line">        <span class="comment">//右子树，行+1，列+1</span></span><br><span class="line">        <span class="built_in">dfs</span>(node -&gt; right,col + <span class="number">1</span>,row + <span class="number">1</span>,pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li>时间复杂度：O(nlogn),其中n是树的节点数，O(n)的时间对整棵树进行一次DFS，随后需要O(nlogn)的时间对pos的数组进行sort排序以及O(n)的时间对pos进行遍历得到结果，由于O(nlogn)在渐进意义上大于O(n)，所以算法的总时间复杂度为O(nlogn)。</li><li>空间复杂度：O(n)，DFS需要O(n)的栈空间，同时pos也需要O(n)的空间。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> DFS </tag>
            
            <tag> 三元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学问题的解题窍门</title>
      <link href="/2021/07/30/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AA%8D%E9%97%A8/"/>
      <url>/2021/07/30/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AA%8D%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="1-辗转相除法"><a href="#1-辗转相除法" class="headerlink" title="1.辗转相除法"></a>1.辗转相除法</h1><h2 id="1-1求最大公约数"><a href="#1-1求最大公约数" class="headerlink" title="1.1求最大公约数"></a>1.1求最大公约数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b,b % a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2拓展欧几里德算法"><a href="#1-2拓展欧几里德算法" class="headerlink" title="1.2拓展欧几里德算法"></a>1.2拓展欧几里德算法</h2><p><strong>扩展欧几里得算法</strong>是<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675">欧几里得算法</a>（又叫辗转相除法）的扩展。除了计算a、b两个整数的<a href="https://baike.baidu.com/item/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/869308">最大公约数</a>，此算法还能找到整数x、y（其中一个很可能是负数）。通常谈到<a href="https://baike.baidu.com/item/%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/6760265">最大公因子</a>时, 我们都会提到一个非常基本的事实: **给予二整数 a 与 b, 必存在有整数 x 与 y 使得ax + by = gcd(a,b)**。有两个数a,b，对它们进行<a href="https://baike.baidu.com/item/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/4625352">辗转相除法</a>，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到ax+by=gcd(a,b)的整数解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">extgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span>&amp; x,<span class="keyword">int</span>&amp; y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = a;</span><br><span class="line">    <span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">        d = <span class="built_in">extgcd</span>(b,a % b,y,x);</span><br><span class="line">        y -= (a / b) * x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-有关素数的基础算法"><a href="#2-有关素数的基础算法" class="headerlink" title="2.有关素数的基础算法"></a>2.有关素数的基础算法</h1><h2 id="2-1-素数测试"><a href="#2-1-素数测试" class="headerlink" title="2.1 素数测试"></a>2.1 素数测试</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设输入的都是正数</span></span><br><span class="line"><span class="comment">//素数测试O(√n)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n != <span class="number">1</span>; <span class="comment">// 1除外 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//约数枚举O(√n)</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">divisor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / i; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span>(i != n / i) res.<span class="built_in">push</span>(n / i); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数分解</span></span><br><span class="line"><span class="function">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="title">prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">++res[i];</span><br><span class="line">n /= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">1</span>) res[n] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="2-2-埃氏筛法"><a href="#2-2-埃氏筛法" class="headerlink" title="2.2 埃氏筛法"></a>2.2 埃氏筛法</h2><p>首先，将2到n范围内的所有整数写下来。其中最小的数字2是素数。将表中所有2的倍数都划去。表中剩余的最小数字是3，它不能被更小的数整除，所以是素数。再将表中所有3的倍数都划去。依此类推，如果表中剩余的最小数字是m时，m是素数。然后将表中所有m的倍数都划去。像这样反复操作，就能依次枚举n以内的素数。</p><table><thead><tr><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th>9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th><th align="center">17</th><th align="center">18</th><th align="center">19</th><th align="center">20</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">3</td><td align="center">-</td><td align="center">5</td><td align="center">-</td><td align="center">7</td><td align="center">-</td><td>9</td><td align="center">-</td><td align="center">11</td><td align="center">-</td><td align="center">13</td><td align="center">-</td><td align="center">15</td><td align="center">-</td><td align="center">17</td><td align="center">-</td><td align="center">19</td><td align="center">-</td></tr><tr><td align="center">2</td><td align="center">3</td><td align="center">-</td><td align="center">5</td><td align="center">-</td><td align="center">7</td><td align="center">-</td><td>-</td><td align="center">-</td><td align="center">11</td><td align="center">-</td><td align="center">13</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">17</td><td align="center">-</td><td align="center">19</td><td align="center">-</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[MAX_N];<span class="comment">// 第i个素数</span></span><br><span class="line"><span class="keyword">bool</span> is_prime[MAX_N + <span class="number">1</span>];<span class="comment">// is_prime[i]为true表示i是素数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回n以为素数的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) is_prime[i] = <span class="literal">true</span>;</span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(is_prime[i]) &#123;</span><br><span class="line">prime[p++] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span> * i;j &lt;= n; j+=i)</span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="3-快速幂运算"><a href="#3-快速幂运算" class="headerlink" title="3.快速幂运算"></a>3.快速幂运算</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//迭代 </span></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span> </span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = res * x % mod;</span><br><span class="line">x = x * x % mod;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归 </span></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">ll res = <span class="built_in">mod_pow</span>(x * x % mod,n / <span class="number">2</span>,mod);</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>)res = res * x % mod; </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++取整函数ceil，floor，fix，round</title>
      <link href="/2021/07/29/C++%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0ceil%EF%BC%88%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%EF%BC%89%E5%92%8Cfloor%EF%BC%88%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%EF%BC%89/"/>
      <url>/2021/07/29/C++%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0ceil%EF%BC%88%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%EF%BC%89%E5%92%8Cfloor%EF%BC%88%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>使用ceil函数。ceil(x)返回的是大于x的最小整数(朝正无穷方向取整)。<br>    ceil(10.5) == 11    ceil(-10.5) ==-10</p><p>使用floor函数。floor(x)返回的是小于或等于x的最大整数(朝负无穷方向取整)。<br>    floor(10.5) == 10    floor(-10.5) == -11</p><p>使用fix函数。fix(x)是朝零方向取整 。<br>    fix(-1.3)=-1; fix(1.3)=1;</p><p>使用round函数。round(x)是四舍五入到最近的整数。<br>    round(-1.3)=-1;round(-1.52)=-2;round(1.3)=1;round(1.52)=2</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1104. 二叉树寻路</title>
      <link href="/2021/07/29/1104.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%BB%E8%B7%AF/"/>
      <url>/2021/07/29/1104.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%BB%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>在一棵无限的二叉树上，每个节点都有两个子节点，树中的节点 逐行 依次按 “之” 字形进行标记。</p><p>如下图所示，在奇数行（即，第一行、第三行、第五行……）中，按从左到右的顺序进行标记；</p><p>而偶数行（即，第二行、第四行、第六行……）中，按从右到左的顺序进行标记。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/tree.png"></p><p>给你树上某一个节点的标号 label，请你返回从根节点到该标号为 label 节点的路径，该路径是由途经的节点标号所组成的。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree">https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：label = 14<br>输出：[1,3,4,14]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：label = 26<br>输出：[1,2,6,10,26]</p></blockquote><p><strong>提示：</strong></p><ul><li>1 &lt;= label &lt;= 10^6</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    如果是正常二叉树标记顺序，每个结点的父结点值应为子节点值 val / 2。而在这种 “之” 字形排序下，父结点应为正常父结点在当层的 <strong>对称位置</strong>。</p><p>​    每层节点对称结点和为定值，用该值减去val/2,即可得到对称后label父节点的值。</p><p>​    假设当前层为level:当前层最小值:<strong>pow(2 , level - 1)</strong> ,最大值:<strong>pow(2 , level) - 1</strong>，对称后level的父节点为<strong>pow(2 , level - 1) + pow(2 , level) - 1 - label  /  2</strong>,然后进行循环，取得路径。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">pathInZigZagTree</span><span class="params">(<span class="keyword">int</span> label)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int level = ceil(log(label + 1) / log(2));</span></span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">pow</span>(<span class="number">2</span>,level) &lt;= label)</span><br><span class="line">            ++level;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ret</span><span class="params">(level)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(level--)&#123;</span><br><span class="line">            ret[level]=label;</span><br><span class="line">            label=<span class="built_in">pow</span>(<span class="number">2</span>,level)<span class="number">-1</span>+<span class="built_in">pow</span>(<span class="number">2</span>,level<span class="number">-1</span>)-label/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>863. 二叉树中所有距离为 K 的结点</title>
      <link href="/2021/07/28/863.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%89%80%E6%9C%89%E8%B7%9D%E7%A6%BB%E4%B8%BA%20K%20%E7%9A%84%E7%BB%93%E7%82%B9/"/>
      <url>/2021/07/28/863.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%89%80%E6%9C%89%E8%B7%9D%E7%A6%BB%E4%B8%BA%20K%20%E7%9A%84%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。</p><p>返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree">https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2<br>输出：[7,4,1]<br>解释：<br>所求结点为与目标结点（值为 5）距离为 2 的结点，<br>值分别为 7，4，以及 1</p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" style="zoom: 33%;" /><p>注意，输入的 “root” 和 “target” 实际上是树上的结点。<br>上面的输入仅仅是对这些对象进行了序列化描述。</p></blockquote><p><strong>提示：</strong></p><ul><li>给定的树是非空的。</li><li>树上的每个结点都具有唯一的值 0 &lt;= node.val &lt;= 500 。</li><li>目标结点 target 是树上的结点。</li><li>0 &lt;= K &lt;= 1000.</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    将target当做树的根节点，进行DFS遍历，寻找与target距离为k的所有节点，即深度为k的所有节点。</p><p>​    由于二叉树没有记录父节点，为此我们从根节点出发，进行BFS遍历，通过哈希表记录每个节点的父节点。</p><p>​    然后从target出发， 进行DFS，进行左右儿子搜索，同时进行沿父节点向上搜索。</p><p>​    由于，每个节点的值唯一，所以节点的val可以作为哈希表的键。此外，为了避免在DFS中对节点进行重复访问，递归时额外传入来源节点parent,在递归前比较目标节点是否与来源节点相同，不同才进行递归。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>,TreeNode*&gt; parents;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findres</span><span class="params">(TreeNode* node, TreeNode* from,<span class="keyword">int</span> deepth, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(deepth == k)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(node -&gt; val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node -&gt; left != from)</span><br><span class="line">            <span class="built_in">findres</span>(node -&gt; left,node,deepth + <span class="number">1</span>,k);</span><br><span class="line">        <span class="keyword">if</span>(node -&gt; right != from)</span><br><span class="line">            <span class="built_in">findres</span>(node -&gt; right,node,deepth + <span class="number">1</span>,k);</span><br><span class="line">        <span class="keyword">if</span>(parents[node -&gt; val] != from)</span><br><span class="line">            <span class="built_in">findres</span>(parents[node -&gt; val],node,deepth + <span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">distanceK</span><span class="params">(TreeNode* root, TreeNode* target, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(node -&gt; left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node -&gt; left);</span><br><span class="line">                parents[node -&gt; left -&gt; val] = node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node -&gt; right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node -&gt; right);</span><br><span class="line">                parents[node -&gt; right -&gt; val] = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">findres</span>(target,<span class="literal">nullptr</span>,<span class="number">0</span>,k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1743. 从相邻元素对还原数组</title>
      <link href="/2021/07/25/1743.%20%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/"/>
      <url>/2021/07/25/1743.%20%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>存在一个由 n 个不同元素组成的整数数组 nums ，但你已经记不清具体内容。好在你还记得 nums 中的每一对相邻元素。</p><p>给你一个二维整数数组 adjacentPairs ，大小为 n - 1 ，其中每个 adjacentPairs[i] = [ui, vi] 表示元素 ui 和 vi 在 nums 中相邻。</p><p>题目数据保证所有由元素 nums[i] 和 nums[i+1] 组成的相邻元素对都存在于 adjacentPairs 中，存在形式可能是 [nums[i], nums[i+1]] ，也可能是 [nums[i+1], nums[i]] 。这些相邻元素对可以 按任意顺序 出现。</p><p>返回 原始数组 nums 。如果存在多种解答，返回 其中任意一个 即可</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs">https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：adjacentPairs = [[2,1],[3,4],[3,2]]<br>输出：[1,2,3,4]<br>解释：数组的所有相邻元素对都在 adjacentPairs 中。<br>特别要注意的是，adjacentPairs[i] 只表示两个元素相邻，并不保证其 左-右 顺序。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：adjacentPairs = [[4,-2],[1,4],[-3,1]]<br>输出：[-2,4,1,-3]<br>解释：数组中可能存在负数。<br>另一种解答是 [-3,1,4,-2] ，也会被视作正确答案。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：adjacentPairs = [[100000,-100000]]<br>输出：[100000,-100000]</p></blockquote><p><strong>提示：</strong></p><ul><li>nums.length == n</li><li>adjacentPairs.length == n - 1</li><li>adjacentPairs[i].length == 2</li><li>2 &lt;= n &lt;= 105</li><li>-105 &lt;= nums[i], ui, vi &lt;= 105</li><li>题目数据保证存在一些以 adjacentPairs 作为元素对的数组 nums</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>​    遍历vector，对出现的数字进行计数，若数字只出现一次，则其在整体的两端，根据确定的一端，依次推断第二位，第三位，直到最后一个元素</p><p>​    具体方法，使用哈希表记录每个元素的相邻元素有哪些，然后我们遍历哈希表，找到有且仅作为第二个元素，有一个相邻元素的元素e1作为结果数组的第一个元素，然后e1唯一相邻的元素，此时排除e2相邻的e1后，确定与e2相邻的e3作为第三个元素。。。以此类推，推断出全部的元素</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">restoreArray</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; adjacentPairs)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;adjacentPair : adjacentPairs)&#123;</span><br><span class="line">            mp[adjacentPair[<span class="number">0</span>]].<span class="built_in">push_back</span>(adjacentPair[<span class="number">1</span>]);</span><br><span class="line">            mp[adjacentPair[<span class="number">1</span>]].<span class="built_in">push_back</span>(adjacentPair[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n =adjacentPairs.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[e,adj] : mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(adj.<span class="built_in">size</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = e;</span><br><span class="line">                res[<span class="number">1</span>] = mp[res[<span class="number">0</span>]][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; n;++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; adj = mp[res[i - <span class="number">1</span>]];</span><br><span class="line">            res[i] = res[i - <span class="number">2</span>] == adj[<span class="number">0</span>] ? adj[<span class="number">1</span>] : adj[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加</title>
      <link href="/2021/07/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2021/07/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p><strong>示例 1：</strong><br><img src="https://img-blog.csdnimg.cn/20210422183914727.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU3MzY0OTI3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：l1 = [0], l2 = [0]<br>输出：[0]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 &lt;= Node.val &lt;= 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，遍历两个链表间的相同的位，通过flag判断是否进位，然后，找出没有结束的链表，依次传值，同时判断是否进位，最后，若最高位通过进位变为10，则创建新的节点，其值为1.</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)&#123;   <span class="comment">//对l1,l2相同的位相加</span></span><br><span class="line">            <span class="keyword">if</span>(p -&gt; val == <span class="number">-1</span>)     <span class="comment">//若为头节点</span></span><br><span class="line">                p -&gt; val = (l1 -&gt; val + l2 -&gt; val + flag) % <span class="number">10</span>;   </span><br><span class="line">            <span class="keyword">else</span>&#123;        </span><br><span class="line">                ListNode* q  = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l1 -&gt; val + l2 -&gt; val + flag) % <span class="number">10</span>);</span><br><span class="line">                p -&gt; next = q;</span><br><span class="line">                p = p -&gt; next;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = (l1 -&gt; val + l2 -&gt; val + flag) &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;   <span class="comment">//判断是否进位</span></span><br><span class="line">            l1 = l1 -&gt; next;</span><br><span class="line">            l2 = l2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>)&#123;   <span class="comment">//l1有剩余</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l1 -&gt; val + flag ) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            flag = l1 -&gt; val + flag &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            l1 = l1 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="literal">NULL</span>)&#123;  <span class="comment">//l2有剩余</span></span><br><span class="line">            ListNode* q = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (l2 -&gt; val + flag) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            flag = l2 -&gt; val + flag &gt;= <span class="number">10</span> ? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            l2 = l2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;   <span class="comment">//判断最高一位是否要进位</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="改进后的代码"><a href="#改进后的代码" class="headerlink" title="改进后的代码"></a>改进后的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)&#123;   <span class="comment">//对l1,l2判断是否为空</span></span><br><span class="line">        <span class="keyword">int</span> val1 = l1!=<span class="literal">NULL</span> ? l1-&gt;val : <span class="number">0</span>;       </span><br><span class="line">        <span class="keyword">int</span> val2 = l2!=<span class="literal">NULL</span> ? l2-&gt;val : <span class="number">0</span>;         </span><br><span class="line">            ListNode* q  = <span class="keyword">new</span> <span class="built_in">ListNode</span>( (val1 + val2 + flag) % <span class="number">10</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            flag = ( val1 + val2 + flag) &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>;   <span class="comment">//判断是否进位</span></span><br><span class="line">            l1 = l1 != <span class="literal">NULL</span> ? l1 -&gt; next : l1;    <span class="comment">//链表为空，则仍为本身，否则指向下一个节点        </span></span><br><span class="line">            l2 = l2 != <span class="literal">NULL</span> ? l2-&gt; next : l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;   <span class="comment">//判断最高一位是否要进位</span></span><br><span class="line">            ListNode* q =  <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            p -&gt; next = q;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="力扣题解里的递归解法"><a href="#力扣题解里的递归解法" class="headerlink" title="力扣题解里的递归解法"></a>力扣题解里的递归解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span> &amp;&amp; carry== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        l1 = l1 != <span class="literal">NULL</span> ? (carry += l1 -&gt; val,l1 -&gt; next) : l1;</span><br><span class="line">        l2 = l2 != <span class="literal">NULL</span> ? (carry += l2 -&gt; val,l2 -&gt; next) : l2;</span><br><span class="line">        ListNode* p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(carry % <span class="number">10</span>);</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">        p -&gt; next = <span class="built_in">addTwoNumbers</span>(l1,l2);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
